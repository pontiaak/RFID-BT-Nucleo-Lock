
Naomi-RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ace0  0800ace0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ace0  0800ace0  0001ace0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace8  0800ace8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acec  0800acec  0001acec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800acf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  20000078  0800ad68  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ba4  0800ad68  00020ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017545  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300a  00000000  00000000  00037630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  0003a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9b  00000000  00000000  0003ba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c1f  00000000  00000000  0003c9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000181ac  00000000  00000000  000415fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001011f1  00000000  00000000  000597a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006384  00000000  00000000  0015a998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00160d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a854 	.word	0x0800a854

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a854 	.word	0x0800a854

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bb 	b.w	8000638 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b970 	b.w	8000638 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9e08      	ldr	r6, [sp, #32]
 8000376:	460d      	mov	r5, r1
 8000378:	4604      	mov	r4, r0
 800037a:	460f      	mov	r7, r1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d14a      	bne.n	8000416 <__udivmoddi4+0xa6>
 8000380:	428a      	cmp	r2, r1
 8000382:	4694      	mov	ip, r2
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0xe2>
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	b143      	cbz	r3, 800039e <__udivmoddi4+0x2e>
 800038c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000390:	f1c3 0220 	rsb	r2, r3, #32
 8000394:	409f      	lsls	r7, r3
 8000396:	fa20 f202 	lsr.w	r2, r0, r2
 800039a:	4317      	orrs	r7, r2
 800039c:	409c      	lsls	r4, r3
 800039e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a2:	fa1f f58c 	uxth.w	r5, ip
 80003a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003aa:	0c22      	lsrs	r2, r4, #16
 80003ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80003b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003b4:	fb01 f005 	mul.w	r0, r1, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x62>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003c4:	f080 811c 	bcs.w	8000600 <__udivmoddi4+0x290>
 80003c8:	4290      	cmp	r0, r2
 80003ca:	f240 8119 	bls.w	8000600 <__udivmoddi4+0x290>
 80003ce:	3902      	subs	r1, #2
 80003d0:	4462      	add	r2, ip
 80003d2:	1a12      	subs	r2, r2, r0
 80003d4:	b2a4      	uxth	r4, r4
 80003d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003da:	fb0e 2210 	mls	r2, lr, r0, r2
 80003de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e2:	fb00 f505 	mul.w	r5, r0, r5
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	d90a      	bls.n	8000400 <__udivmoddi4+0x90>
 80003ea:	eb1c 0404 	adds.w	r4, ip, r4
 80003ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f2:	f080 8107 	bcs.w	8000604 <__udivmoddi4+0x294>
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	f240 8104 	bls.w	8000604 <__udivmoddi4+0x294>
 80003fc:	4464      	add	r4, ip
 80003fe:	3802      	subs	r0, #2
 8000400:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	2100      	movs	r1, #0
 8000408:	b11e      	cbz	r6, 8000412 <__udivmoddi4+0xa2>
 800040a:	40dc      	lsrs	r4, r3
 800040c:	2300      	movs	r3, #0
 800040e:	e9c6 4300 	strd	r4, r3, [r6]
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0xbc>
 800041a:	2e00      	cmp	r6, #0
 800041c:	f000 80ed 	beq.w	80005fa <__udivmoddi4+0x28a>
 8000420:	2100      	movs	r1, #0
 8000422:	e9c6 0500 	strd	r0, r5, [r6]
 8000426:	4608      	mov	r0, r1
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	fab3 f183 	clz	r1, r3
 8000430:	2900      	cmp	r1, #0
 8000432:	d149      	bne.n	80004c8 <__udivmoddi4+0x158>
 8000434:	42ab      	cmp	r3, r5
 8000436:	d302      	bcc.n	800043e <__udivmoddi4+0xce>
 8000438:	4282      	cmp	r2, r0
 800043a:	f200 80f8 	bhi.w	800062e <__udivmoddi4+0x2be>
 800043e:	1a84      	subs	r4, r0, r2
 8000440:	eb65 0203 	sbc.w	r2, r5, r3
 8000444:	2001      	movs	r0, #1
 8000446:	4617      	mov	r7, r2
 8000448:	2e00      	cmp	r6, #0
 800044a:	d0e2      	beq.n	8000412 <__udivmoddi4+0xa2>
 800044c:	e9c6 4700 	strd	r4, r7, [r6]
 8000450:	e7df      	b.n	8000412 <__udivmoddi4+0xa2>
 8000452:	b902      	cbnz	r2, 8000456 <__udivmoddi4+0xe6>
 8000454:	deff      	udf	#255	; 0xff
 8000456:	fab2 f382 	clz	r3, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8090 	bne.w	8000580 <__udivmoddi4+0x210>
 8000460:	1a8a      	subs	r2, r1, r2
 8000462:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000466:	fa1f fe8c 	uxth.w	lr, ip
 800046a:	2101      	movs	r1, #1
 800046c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000470:	fb07 2015 	mls	r0, r7, r5, r2
 8000474:	0c22      	lsrs	r2, r4, #16
 8000476:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800047a:	fb0e f005 	mul.w	r0, lr, r5
 800047e:	4290      	cmp	r0, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x124>
 8000482:	eb1c 0202 	adds.w	r2, ip, r2
 8000486:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x122>
 800048c:	4290      	cmp	r0, r2
 800048e:	f200 80cb 	bhi.w	8000628 <__udivmoddi4+0x2b8>
 8000492:	4645      	mov	r5, r8
 8000494:	1a12      	subs	r2, r2, r0
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb2 f0f7 	udiv	r0, r2, r7
 800049c:	fb07 2210 	mls	r2, r7, r0, r2
 80004a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004a4:	fb0e fe00 	mul.w	lr, lr, r0
 80004a8:	45a6      	cmp	lr, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x14e>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004b4:	d202      	bcs.n	80004bc <__udivmoddi4+0x14c>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f200 80bb 	bhi.w	8000632 <__udivmoddi4+0x2c2>
 80004bc:	4610      	mov	r0, r2
 80004be:	eba4 040e 	sub.w	r4, r4, lr
 80004c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004c6:	e79f      	b.n	8000408 <__udivmoddi4+0x98>
 80004c8:	f1c1 0720 	rsb	r7, r1, #32
 80004cc:	408b      	lsls	r3, r1
 80004ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80004d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004d6:	fa05 f401 	lsl.w	r4, r5, r1
 80004da:	fa20 f307 	lsr.w	r3, r0, r7
 80004de:	40fd      	lsrs	r5, r7
 80004e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004e4:	4323      	orrs	r3, r4
 80004e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ea:	fa1f fe8c 	uxth.w	lr, ip
 80004ee:	fb09 5518 	mls	r5, r9, r8, r5
 80004f2:	0c1c      	lsrs	r4, r3, #16
 80004f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004f8:	fb08 f50e 	mul.w	r5, r8, lr
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000502:	fa00 f001 	lsl.w	r0, r0, r1
 8000506:	d90b      	bls.n	8000520 <__udivmoddi4+0x1b0>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000510:	f080 8088 	bcs.w	8000624 <__udivmoddi4+0x2b4>
 8000514:	42a5      	cmp	r5, r4
 8000516:	f240 8085 	bls.w	8000624 <__udivmoddi4+0x2b4>
 800051a:	f1a8 0802 	sub.w	r8, r8, #2
 800051e:	4464      	add	r4, ip
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	b29d      	uxth	r5, r3
 8000524:	fbb4 f3f9 	udiv	r3, r4, r9
 8000528:	fb09 4413 	mls	r4, r9, r3, r4
 800052c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000530:	fb03 fe0e 	mul.w	lr, r3, lr
 8000534:	45a6      	cmp	lr, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x1da>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000540:	d26c      	bcs.n	800061c <__udivmoddi4+0x2ac>
 8000542:	45a6      	cmp	lr, r4
 8000544:	d96a      	bls.n	800061c <__udivmoddi4+0x2ac>
 8000546:	3b02      	subs	r3, #2
 8000548:	4464      	add	r4, ip
 800054a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054e:	fba3 9502 	umull	r9, r5, r3, r2
 8000552:	eba4 040e 	sub.w	r4, r4, lr
 8000556:	42ac      	cmp	r4, r5
 8000558:	46c8      	mov	r8, r9
 800055a:	46ae      	mov	lr, r5
 800055c:	d356      	bcc.n	800060c <__udivmoddi4+0x29c>
 800055e:	d053      	beq.n	8000608 <__udivmoddi4+0x298>
 8000560:	b156      	cbz	r6, 8000578 <__udivmoddi4+0x208>
 8000562:	ebb0 0208 	subs.w	r2, r0, r8
 8000566:	eb64 040e 	sbc.w	r4, r4, lr
 800056a:	fa04 f707 	lsl.w	r7, r4, r7
 800056e:	40ca      	lsrs	r2, r1
 8000570:	40cc      	lsrs	r4, r1
 8000572:	4317      	orrs	r7, r2
 8000574:	e9c6 7400 	strd	r7, r4, [r6]
 8000578:	4618      	mov	r0, r3
 800057a:	2100      	movs	r1, #0
 800057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000580:	f1c3 0120 	rsb	r1, r3, #32
 8000584:	fa02 fc03 	lsl.w	ip, r2, r3
 8000588:	fa20 f201 	lsr.w	r2, r0, r1
 800058c:	fa25 f101 	lsr.w	r1, r5, r1
 8000590:	409d      	lsls	r5, r3
 8000592:	432a      	orrs	r2, r5
 8000594:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fbb1 f0f7 	udiv	r0, r1, r7
 80005a0:	fb07 1510 	mls	r5, r7, r0, r1
 80005a4:	0c11      	lsrs	r1, r2, #16
 80005a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005aa:	fb00 f50e 	mul.w	r5, r0, lr
 80005ae:	428d      	cmp	r5, r1
 80005b0:	fa04 f403 	lsl.w	r4, r4, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x258>
 80005b6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005be:	d22f      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005c0:	428d      	cmp	r5, r1
 80005c2:	d92d      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005c4:	3802      	subs	r0, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1b49      	subs	r1, r1, r5
 80005ca:	b292      	uxth	r2, r2
 80005cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005d0:	fb07 1115 	mls	r1, r7, r5, r1
 80005d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005d8:	fb05 f10e 	mul.w	r1, r5, lr
 80005dc:	4291      	cmp	r1, r2
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x282>
 80005e0:	eb1c 0202 	adds.w	r2, ip, r2
 80005e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005e8:	d216      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 80005ea:	4291      	cmp	r1, r2
 80005ec:	d914      	bls.n	8000618 <__udivmoddi4+0x2a8>
 80005ee:	3d02      	subs	r5, #2
 80005f0:	4462      	add	r2, ip
 80005f2:	1a52      	subs	r2, r2, r1
 80005f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005f8:	e738      	b.n	800046c <__udivmoddi4+0xfc>
 80005fa:	4631      	mov	r1, r6
 80005fc:	4630      	mov	r0, r6
 80005fe:	e708      	b.n	8000412 <__udivmoddi4+0xa2>
 8000600:	4639      	mov	r1, r7
 8000602:	e6e6      	b.n	80003d2 <__udivmoddi4+0x62>
 8000604:	4610      	mov	r0, r2
 8000606:	e6fb      	b.n	8000400 <__udivmoddi4+0x90>
 8000608:	4548      	cmp	r0, r9
 800060a:	d2a9      	bcs.n	8000560 <__udivmoddi4+0x1f0>
 800060c:	ebb9 0802 	subs.w	r8, r9, r2
 8000610:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000614:	3b01      	subs	r3, #1
 8000616:	e7a3      	b.n	8000560 <__udivmoddi4+0x1f0>
 8000618:	4645      	mov	r5, r8
 800061a:	e7ea      	b.n	80005f2 <__udivmoddi4+0x282>
 800061c:	462b      	mov	r3, r5
 800061e:	e794      	b.n	800054a <__udivmoddi4+0x1da>
 8000620:	4640      	mov	r0, r8
 8000622:	e7d1      	b.n	80005c8 <__udivmoddi4+0x258>
 8000624:	46d0      	mov	r8, sl
 8000626:	e77b      	b.n	8000520 <__udivmoddi4+0x1b0>
 8000628:	3d02      	subs	r5, #2
 800062a:	4462      	add	r2, ip
 800062c:	e732      	b.n	8000494 <__udivmoddi4+0x124>
 800062e:	4608      	mov	r0, r1
 8000630:	e70a      	b.n	8000448 <__udivmoddi4+0xd8>
 8000632:	4464      	add	r4, ip
 8000634:	3802      	subs	r0, #2
 8000636:	e742      	b.n	80004be <__udivmoddi4+0x14e>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_UART_RxCpltCallback+0x30>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	d108      	bne.n	8000662 <HAL_UART_RxCpltCallback+0x26>
	{
		HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8000650:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000654:	4906      	ldr	r1, [pc, #24]	; (8000670 <HAL_UART_RxCpltCallback+0x34>)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <HAL_UART_RxCpltCallback+0x30>)
 8000658:	f006 fe58 	bl	800730c <HAL_UART_Receive_IT>
		newMessageFlag = 1;		//ensures that the code executed by bluetooth message is executed only once
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_UART_RxCpltCallback+0x38>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
	}
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000168 	.word	0x20000168
 8000670:	200004c4 	.word	0x200004c4
 8000674:	200006b8 	.word	0x200006b8

08000678 <addName>:

void addName(struct NamesArray *array, const uint8_t *buffer, size_t start, size_t length) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	603b      	str	r3, [r7, #0]
    if (array->count < MAX_NAMES && length < MAX_NAME_LENGTH) {
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800068c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8000690:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000694:	d22c      	bcs.n	80006f0 <addName+0x78>
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b31      	cmp	r3, #49	; 0x31
 800069a:	d829      	bhi.n	80006f0 <addName+0x78>
        strncpy(array->names[array->count], buffer + start, length);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80006a2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80006a6:	2232      	movs	r2, #50	; 0x32
 80006a8:	fb02 f303 	mul.w	r3, r2, r3
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	18d0      	adds	r0, r2, r3
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f008 fd7f 	bl	80091bc <strncpy>
        array->names[array->count][length] = '\0';  // Ensure null-terminated string
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80006c4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	2132      	movs	r1, #50	; 0x32
 80006cc:	fb01 f303 	mul.w	r3, r1, r3
 80006d0:	441a      	add	r2, r3
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	4413      	add	r3, r2
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
        array->count++;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80006e0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80006e4:	3301      	adds	r3, #1
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80006ec:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
    }
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <deleteName>:

void deleteName(struct NamesArray *array, const uint8_t *nameToDelete) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < array->count; ++i) {
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e03a      	b.n	800077e <deleteName+0x86>
        if (strcmp(array->names[i], nameToDelete) == 0) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2232      	movs	r2, #50	; 0x32
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	6839      	ldr	r1, [r7, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fd5a 	bl	80001d0 <strcmp>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d12a      	bne.n	8000778 <deleteName+0x80>
            // Move names after the deleted name to fill the gap
            for (size_t j = i; j < array->count - 1; ++j) {
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	e012      	b.n	800074e <deleteName+0x56>
                strcpy(array->names[j], array->names[j + 1]);
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	2232      	movs	r2, #50	; 0x32
 800072c:	fb02 f303 	mul.w	r3, r2, r3
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	18d0      	adds	r0, r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3301      	adds	r3, #1
 8000738:	2232      	movs	r2, #50	; 0x32
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	4619      	mov	r1, r3
 8000744:	f008 fde7 	bl	8009316 <strcpy>
            for (size_t j = i; j < array->count - 1; ++j) {
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	3301      	adds	r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000754:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8000758:	3b01      	subs	r3, #1
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	429a      	cmp	r2, r3
 800075e:	d3e3      	bcc.n	8000728 <deleteName+0x30>
            }
            array->count--;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000766:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800076a:	3b01      	subs	r3, #1
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8000772:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
            break;  // Exit the loop after deleting the name
 8000776:	e00b      	b.n	8000790 <deleteName+0x98>
    for (size_t i = 0; i < array->count; ++i) {
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000784:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3bc      	bcc.n	8000708 <deleteName+0x10>
        }
    }
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <sendEncryptedData>:

*/
}


void sendEncryptedData(char *messageToSend){
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b0b6      	sub	sp, #216	; 0xd8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

    char message[200]; // Assuming a maximum length for the message

    // Copy the content of messageToSend into message
    strcpy(message, messageToSend);
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 fdb5 	bl	8009316 <strcpy>
	int i;

	printf("Original:\n");
 80007ac:	4847      	ldr	r0, [pc, #284]	; (80008cc <sendEncryptedData+0x134>)
 80007ae:	f008 fb89 	bl	8008ec4 <puts>
	for(i=0; i < strlen(message); i++){
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80007b8:	e013      	b.n	80007e2 <sendEncryptedData+0x4a>
	printf("%lld\n", (long long)message[i]);
 80007ba:	f107 0208 	add.w	r2, r7, #8
 80007be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2200      	movs	r2, #0
 80007ca:	461c      	mov	r4, r3
 80007cc:	4615      	mov	r5, r2
 80007ce:	4622      	mov	r2, r4
 80007d0:	462b      	mov	r3, r5
 80007d2:	483f      	ldr	r0, [pc, #252]	; (80008d0 <sendEncryptedData+0x138>)
 80007d4:	f008 fb10 	bl	8008df8 <iprintf>
	for(i=0; i < strlen(message); i++){
 80007d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007dc:	3301      	adds	r3, #1
 80007de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fcfc 	bl	80001e4 <strlen>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8e1      	bhi.n	80007ba <sendEncryptedData+0x22>
	}


	long long *encrypted = rsa_encrypt(message, sizeof(message), pubAPP);
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	4a36      	ldr	r2, [pc, #216]	; (80008d4 <sendEncryptedData+0x13c>)
 80007fc:	21c8      	movs	r1, #200	; 0xc8
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fb32 	bl	8002e68 <rsa_encrypt>
 8000804:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	if (!encrypted){fprintf(stderr, "Error in encryption!\n");}
 8000808:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d107      	bne.n	8000820 <sendEncryptedData+0x88>
 8000810:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <sendEncryptedData+0x140>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	2215      	movs	r2, #21
 8000818:	2101      	movs	r1, #1
 800081a:	4830      	ldr	r0, [pc, #192]	; (80008dc <sendEncryptedData+0x144>)
 800081c:	f008 fade 	bl	8008ddc <fwrite>
									strcpy(bufferForOutput, "e:");
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <sendEncryptedData+0x148>)
 8000822:	4a30      	ldr	r2, [pc, #192]	; (80008e4 <sendEncryptedData+0x14c>)
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	4611      	mov	r1, r2
 8000828:	8019      	strh	r1, [r3, #0]
 800082a:	3302      	adds	r3, #2
 800082c:	0c12      	lsrs	r2, r2, #16
 800082e:	701a      	strb	r2, [r3, #0]
									HAL_UART_Transmit(&huart1, (void*)bufferForOutput, strlen(bufferForOutput), 1000);
 8000830:	482b      	ldr	r0, [pc, #172]	; (80008e0 <sendEncryptedData+0x148>)
 8000832:	f7ff fcd7 	bl	80001e4 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	4928      	ldr	r1, [pc, #160]	; (80008e0 <sendEncryptedData+0x148>)
 8000840:	4829      	ldr	r0, [pc, #164]	; (80008e8 <sendEncryptedData+0x150>)
 8000842:	f006 fcd9 	bl	80071f8 <HAL_UART_Transmit>
									for(i=0; i < strlen(message); i++){
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800084c:	e01b      	b.n	8000886 <sendEncryptedData+0xee>
									sprintf(bufferForOutput, "%lu ", (long long)encrypted[i]);
 800084e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000858:	4413      	add	r3, r2
 800085a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800085e:	4923      	ldr	r1, [pc, #140]	; (80008ec <sendEncryptedData+0x154>)
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <sendEncryptedData+0x148>)
 8000862:	f008 fb6b 	bl	8008f3c <siprintf>
									HAL_UART_Transmit(&huart1, (void*)bufferForOutput, strlen(bufferForOutput), 1000);
 8000866:	481e      	ldr	r0, [pc, #120]	; (80008e0 <sendEncryptedData+0x148>)
 8000868:	f7ff fcbc 	bl	80001e4 <strlen>
 800086c:	4603      	mov	r3, r0
 800086e:	b29a      	uxth	r2, r3
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	491a      	ldr	r1, [pc, #104]	; (80008e0 <sendEncryptedData+0x148>)
 8000876:	481c      	ldr	r0, [pc, #112]	; (80008e8 <sendEncryptedData+0x150>)
 8000878:	f006 fcbe 	bl	80071f8 <HAL_UART_Transmit>
									for(i=0; i < strlen(message); i++){
 800087c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000880:	3301      	adds	r3, #1
 8000882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fcaa 	bl	80001e4 <strlen>
 8000890:	4602      	mov	r2, r0
 8000892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000896:	429a      	cmp	r2, r3
 8000898:	d8d9      	bhi.n	800084e <sendEncryptedData+0xb6>
									}
									strcpy(bufferForOutput, "\n");
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <sendEncryptedData+0x148>)
 800089c:	220a      	movs	r2, #10
 800089e:	801a      	strh	r2, [r3, #0]
									HAL_Delay(150);
 80008a0:	2096      	movs	r0, #150	; 0x96
 80008a2:	f003 fa47 	bl	8003d34 <HAL_Delay>
									HAL_UART_Transmit(&huart1, (void*)bufferForOutput, strlen(bufferForOutput), 1000);
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <sendEncryptedData+0x148>)
 80008a8:	f7ff fc9c 	bl	80001e4 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b4:	490a      	ldr	r1, [pc, #40]	; (80008e0 <sendEncryptedData+0x148>)
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <sendEncryptedData+0x150>)
 80008b8:	f006 fc9e 	bl	80071f8 <HAL_UART_Transmit>


	free(encrypted);
 80008bc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80008c0:	f008 f81c 	bl	80088fc <free>


}
 80008c4:	bf00      	nop
 80008c6:	37d8      	adds	r7, #216	; 0xd8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bdb0      	pop	{r4, r5, r7, pc}
 80008cc:	0800a878 	.word	0x0800a878
 80008d0:	0800a884 	.word	0x0800a884
 80008d4:	20000a38 	.word	0x20000a38
 80008d8:	20000074 	.word	0x20000074
 80008dc:	0800a88c 	.word	0x0800a88c
 80008e0:	200006cc 	.word	0x200006cc
 80008e4:	0800a8a4 	.word	0x0800a8a4
 80008e8:	20000168 	.word	0x20000168
 80008ec:	0800a8a8 	.word	0x0800a8a8

080008f0 <extractNumbers>:


long long *extractNumbers(const uint8_t *buffer, size_t *numElements) {
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b08f      	sub	sp, #60	; 0x3c
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
    const char *startMarker = "m:";
 80008fa:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <extractNumbers+0x110>)
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
    const char *endMarker = "}";
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <extractNumbers+0x114>)
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t startMarkerLength = strlen(startMarker);
 8000902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000904:	f7ff fc6e 	bl	80001e4 <strlen>
 8000908:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t endMarkerLength = strlen(endMarker);
 800090a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800090c:	f7ff fc6a 	bl	80001e4 <strlen>
 8000910:	6278      	str	r0, [r7, #36]	; 0x24

    // Find the position of "m:" in the buffer
    const char *startPos = strstr((const char *)buffer, startMarker);
 8000912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f008 fc64 	bl	80091e2 <strstr>
 800091a:	6238      	str	r0, [r7, #32]
    if (startPos == NULL) {
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d109      	bne.n	8000936 <extractNumbers+0x46>
        fprintf(stderr, "Error: Start marker not found.\n");
 8000922:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <extractNumbers+0x118>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	221f      	movs	r2, #31
 800092a:	2101      	movs	r1, #1
 800092c:	4837      	ldr	r0, [pc, #220]	; (8000a0c <extractNumbers+0x11c>)
 800092e:	f008 fa55 	bl	8008ddc <fwrite>
        return NULL;
 8000932:	2300      	movs	r3, #0
 8000934:	e060      	b.n	80009f8 <extractNumbers+0x108>
    }

    // Move the position after "m:"
    startPos += startMarkerLength;
 8000936:	6a3a      	ldr	r2, [r7, #32]
 8000938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093a:	4413      	add	r3, r2
 800093c:	623b      	str	r3, [r7, #32]

    // Find the position of "}" in the buffer
    const char *endPos = strstr(startPos, endMarker);
 800093e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000940:	6a38      	ldr	r0, [r7, #32]
 8000942:	f008 fc4e 	bl	80091e2 <strstr>
 8000946:	61f8      	str	r0, [r7, #28]
    if (endPos == NULL) {
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d109      	bne.n	8000962 <extractNumbers+0x72>
        fprintf(stderr, "Error: End marker not found.\n");
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <extractNumbers+0x118>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	221d      	movs	r2, #29
 8000956:	2101      	movs	r1, #1
 8000958:	482d      	ldr	r0, [pc, #180]	; (8000a10 <extractNumbers+0x120>)
 800095a:	f008 fa3f 	bl	8008ddc <fwrite>
        return NULL;
 800095e:	2300      	movs	r3, #0
 8000960:	e04a      	b.n	80009f8 <extractNumbers+0x108>
    }

    // Calculate the length between "m:" and "}"
    size_t length = endPos - startPos;
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	61bb      	str	r3, [r7, #24]

    // Calculate the number of elements
    *numElements = length / 10;
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4a29      	ldr	r2, [pc, #164]	; (8000a14 <extractNumbers+0x124>)
 800096e:	fba2 2303 	umull	r2, r3, r2, r3
 8000972:	08da      	lsrs	r2, r3, #3
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	601a      	str	r2, [r3, #0]

    // Allocate memory for the array
    long long *message = malloc(sizeof(long long) * (*numElements));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	4618      	mov	r0, r3
 8000980:	f007 ffb4 	bl	80088ec <malloc>
 8000984:	4603      	mov	r3, r0
 8000986:	617b      	str	r3, [r7, #20]
    if (message == NULL) {
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d109      	bne.n	80009a2 <extractNumbers+0xb2>
        fprintf(stderr, "Error: Heap allocation failed.\n");
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <extractNumbers+0x118>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	221f      	movs	r2, #31
 8000996:	2101      	movs	r1, #1
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <extractNumbers+0x128>)
 800099a:	f008 fa1f 	bl	8008ddc <fwrite>
        return NULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	e02a      	b.n	80009f8 <extractNumbers+0x108>
    }

    // Extract numbers and convert to long long
    for (size_t i = 0; i < *numElements; i++) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
 80009a6:	e021      	b.n	80009ec <extractNumbers+0xfc>
        char numberString[11];
        strncpy(numberString, startPos + i * 10, 10);
 80009a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	461a      	mov	r2, r3
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	1899      	adds	r1, r3, r2
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	220a      	movs	r2, #10
 80009be:	4618      	mov	r0, r3
 80009c0:	f008 fbfc 	bl	80091bc <strncpy>
        numberString[10] = '\0';
 80009c4:	2300      	movs	r3, #0
 80009c6:	74bb      	strb	r3, [r7, #18]

        message[i] = strtoll(numberString, NULL, 10);
 80009c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	18d4      	adds	r4, r2, r3
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	220a      	movs	r2, #10
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f008 f8d5 	bl	8008b88 <strtoll>
 80009de:	4602      	mov	r2, r0
 80009e0:	460b      	mov	r3, r1
 80009e2:	e9c4 2300 	strd	r2, r3, [r4]
    for (size_t i = 0; i < *numElements; i++) {
 80009e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e8:	3301      	adds	r3, #1
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3d8      	bcc.n	80009a8 <extractNumbers+0xb8>
    }

    return message;
 80009f6:	697b      	ldr	r3, [r7, #20]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	373c      	adds	r7, #60	; 0x3c
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	0800a8b0 	.word	0x0800a8b0
 8000a04:	0800a8b4 	.word	0x0800a8b4
 8000a08:	20000074 	.word	0x20000074
 8000a0c:	0800a8b8 	.word	0x0800a8b8
 8000a10:	0800a8d8 	.word	0x0800a8d8
 8000a14:	cccccccd 	.word	0xcccccccd
 8000a18:	0800a8f8 	.word	0x0800a8f8

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a20:	f5ad 4d6c 	sub.w	sp, sp, #60416	; 0xec00
 8000a24:	b097      	sub	sp, #92	; 0x5c
 8000a26:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f003 f908 	bl	8003c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f001 fdc4 	bl	80025b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f001 ff2e 	bl	8002890 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a34:	f001 fe70 	bl	8002718 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a38:	f001 feac 	bl	8002794 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a3c:	f001 fef8 	bl	8002830 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000a40:	f001 fe0e 	bl	8002660 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  MFRC522_Init();
 8000a44:	f002 fbcc 	bl	80031e0 <MFRC522_Init>

  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);	//BLUETUT
 8000a48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a4c:	49af      	ldr	r1, [pc, #700]	; (8000d0c <main+0x2f0>)
 8000a4e:	48b0      	ldr	r0, [pc, #704]	; (8000d10 <main+0x2f4>)
 8000a50:	f006 fc5c 	bl	800730c <HAL_UART_Receive_IT>

  //HAL_Delay(1000);
  //HAL_TIM_Base_Start_IT(&htim2);
  TX_BUFFER[0]=4;
 8000a54:	4aaf      	ldr	r2, [pc, #700]	; (8000d14 <main+0x2f8>)
 8000a56:	2304      	movs	r3, #4
 8000a58:	7013      	strb	r3, [r2, #0]

  struct HistoryArray myHistory[MAX_NAMES]; // this structures stores the history later passed to the app
  struct NamesArray myNames = {{0}, 0}; // this structures stores the names which are allowed to enter
 8000a5a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000a5e:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 8000a62:	4618      	mov	r0, r3
 8000a64:	f246 13ac 	movw	r3, #25004	; 0x61ac
 8000a68:	461a      	mov	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f008 fb8c 	bl	8009188 <memset>
  nameSpaceCounter = i - 5;
 8000a70:	4ba9      	ldr	r3, [pc, #676]	; (8000d18 <main+0x2fc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	1f5a      	subs	r2, r3, #5
 8000a76:	4ba9      	ldr	r3, [pc, #676]	; (8000d1c <main+0x300>)
 8000a78:	601a      	str	r2, [r3, #0]
  char masterBuffer[] = "master";
 8000a7a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000a7e:	f5a3 632c 	sub.w	r3, r3, #2752	; 0xac0
 8000a82:	49a7      	ldr	r1, [pc, #668]	; (8000d20 <main+0x304>)
 8000a84:	461a      	mov	r2, r3
 8000a86:	460b      	mov	r3, r1
 8000a88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a8c:	6010      	str	r0, [r2, #0]
 8000a8e:	3204      	adds	r2, #4
 8000a90:	8011      	strh	r1, [r2, #0]
 8000a92:	3202      	adds	r2, #2
 8000a94:	0c0b      	lsrs	r3, r1, #16
 8000a96:	7013      	strb	r3, [r2, #0]
  addName(&myNames, masterBuffer, 0, 6);
 8000a98:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8000a9c:	39c0      	subs	r1, #192	; 0xc0
 8000a9e:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8000aa2:	38b8      	subs	r0, #184	; 0xb8
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f7ff fde6 	bl	8000678 <addName>

  RTC_TimeTypeDef new_time = {0};
 8000aac:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000ab0:	f6a3 23d4 	subw	r3, r3, #2772	; 0xad4
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	6053      	str	r3, [r2, #4]
 8000abc:	6093      	str	r3, [r2, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
 8000ac0:	6113      	str	r3, [r2, #16]
  new_time.Hours = 7;
 8000ac2:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000ac6:	f6a3 22d4 	subw	r2, r3, #2772	; 0xad4
 8000aca:	2307      	movs	r3, #7
 8000acc:	7013      	strb	r3, [r2, #0]
  new_time.Minutes = 45;
 8000ace:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000ad2:	f6a3 22d4 	subw	r2, r3, #2772	; 0xad4
 8000ad6:	232d      	movs	r3, #45	; 0x2d
 8000ad8:	7053      	strb	r3, [r2, #1]
  new_time.Seconds = 0;
 8000ada:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000ade:	f6a3 22d4 	subw	r2, r3, #2772	; 0xad4
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	7093      	strb	r3, [r2, #2]
  HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000ae6:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000aea:	3bd4      	subs	r3, #212	; 0xd4
 8000aec:	2200      	movs	r2, #0
 8000aee:	4619      	mov	r1, r3
 8000af0:	488c      	ldr	r0, [pc, #560]	; (8000d24 <main+0x308>)
 8000af2:	f005 f83d 	bl	8005b70 <HAL_RTC_SetTime>
  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 8000af6:	4a8c      	ldr	r2, [pc, #560]	; (8000d28 <main+0x30c>)
 8000af8:	2300      	movs	r3, #0
 8000afa:	6013      	str	r3, [r2, #0]
  RTC_DateTypeDef today;
  today.Year = 21;
 8000afc:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b00:	f6a3 22d8 	subw	r2, r3, #2776	; 0xad8
 8000b04:	2315      	movs	r3, #21
 8000b06:	70d3      	strb	r3, [r2, #3]
  today.Month = 06;
 8000b08:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b0c:	f6a3 22d8 	subw	r2, r3, #2776	; 0xad8
 8000b10:	2306      	movs	r3, #6
 8000b12:	7053      	strb	r3, [r2, #1]
  today.Date = 1;
 8000b14:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b18:	f6a3 22d8 	subw	r2, r3, #2776	; 0xad8
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	7093      	strb	r3, [r2, #2]
  today.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000b20:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b24:	f6a3 22d8 	subw	r2, r3, #2776	; 0xad8
 8000b28:	2302      	movs	r3, #2
 8000b2a:	7013      	strb	r3, [r2, #0]
  HAL_RTC_SetDate(&hrtc, &today, RTC_FORMAT_BIN);
 8000b2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000b30:	3bd8      	subs	r3, #216	; 0xd8
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	487b      	ldr	r0, [pc, #492]	; (8000d24 <main+0x308>)
 8000b38:	f005 f913 	bl	8005d62 <HAL_RTC_SetDate>


  rsa_gen_keys(pubSTM, privSTM, PRIME_SOURCE_FILE);	//generating both public and private rsa keys
 8000b3c:	4b7b      	ldr	r3, [pc, #492]	; (8000d2c <main+0x310>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	497b      	ldr	r1, [pc, #492]	; (8000d30 <main+0x314>)
 8000b44:	487b      	ldr	r0, [pc, #492]	; (8000d34 <main+0x318>)
 8000b46:	f002 f903 	bl	8002d50 <rsa_gen_keys>
  char messagetest[] = "TestMessageUwU";
 8000b4a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b4e:	f6a3 23e8 	subw	r3, r3, #2792	; 0xae8
 8000b52:	4a79      	ldr	r2, [pc, #484]	; (8000d38 <main+0x31c>)
 8000b54:	461c      	mov	r4, r3
 8000b56:	4613      	mov	r3, r2
 8000b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b5a:	c407      	stmia	r4!, {r0, r1, r2}
 8000b5c:	8023      	strh	r3, [r4, #0]
 8000b5e:	3402      	adds	r4, #2
 8000b60:	0c1b      	lsrs	r3, r3, #16
 8000b62:	7023      	strb	r3, [r4, #0]
  encryptedtest = rsa_encrypt(messagetest, sizeof(messagetest), pubSTM);
 8000b64:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000b68:	3be8      	subs	r3, #232	; 0xe8
 8000b6a:	4a72      	ldr	r2, [pc, #456]	; (8000d34 <main+0x318>)
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 f97a 	bl	8002e68 <rsa_encrypt>
 8000b74:	4602      	mov	r2, r0
 8000b76:	4b71      	ldr	r3, [pc, #452]	; (8000d3c <main+0x320>)
 8000b78:	601a      	str	r2, [r3, #0]
  decryptedtest = rsa_decrypt(encryptedtest, 8*sizeof(messagetest), privSTM);
 8000b7a:	4b70      	ldr	r3, [pc, #448]	; (8000d3c <main+0x320>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a6c      	ldr	r2, [pc, #432]	; (8000d30 <main+0x314>)
 8000b80:	2178      	movs	r1, #120	; 0x78
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 f9dc 	bl	8002f40 <rsa_decrypt>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b6d      	ldr	r3, [pc, #436]	; (8000d40 <main+0x324>)
 8000b8c:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	496c      	ldr	r1, [pc, #432]	; (8000d44 <main+0x328>)
 8000b92:	4864      	ldr	r0, [pc, #400]	; (8000d24 <main+0x308>)
 8000b94:	f005 f889 	bl	8005caa <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	496b      	ldr	r1, [pc, #428]	; (8000d48 <main+0x32c>)
 8000b9c:	4861      	ldr	r0, [pc, #388]	; (8000d24 <main+0x308>)
 8000b9e:	f005 f967 	bl	8005e70 <HAL_RTC_GetDate>


	  	  	//HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);	//BLUETUT
	  	  	MFRC522_Init();		//reset is needed for rfid module to work, also needs to be not in rfid loop as not to cause rst pin problem
 8000ba2:	f002 fb1d 	bl	80031e0 <MFRC522_Init>
	  	  	HAL_GPIO_WritePin(GPIOB, Bluetooth_LED_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	4868      	ldr	r0, [pc, #416]	; (8000d4c <main+0x330>)
 8000bac:	f003 fc20 	bl	80043f0 <HAL_GPIO_WritePin>
	  	  	status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 8000bb0:	4967      	ldr	r1, [pc, #412]	; (8000d50 <main+0x334>)
 8000bb2:	2026      	movs	r0, #38	; 0x26
 8000bb4:	f002 fc0b 	bl	80033ce <MFRC522_Request>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a66      	ldr	r2, [pc, #408]	; (8000d54 <main+0x338>)
 8000bbc:	7013      	strb	r3, [r2, #0]
	  		status = MFRC522_Anticoll(str);//Take a collision, look up 5 bytes
 8000bbe:	4864      	ldr	r0, [pc, #400]	; (8000d50 <main+0x334>)
 8000bc0:	f002 fc2a 	bl	8003418 <MFRC522_Anticoll>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4a63      	ldr	r2, [pc, #396]	; (8000d54 <main+0x338>)
 8000bc8:	7013      	strb	r3, [r2, #0]
	  		memcpy(serNum, str, 5);//function for c language:(para1:that place save data,para2:the the source of data,para3:size)
 8000bca:	4a63      	ldr	r2, [pc, #396]	; (8000d58 <main+0x33c>)
 8000bcc:	4b60      	ldr	r3, [pc, #384]	; (8000d50 <main+0x334>)
 8000bce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bd2:	6010      	str	r0, [r2, #0]
 8000bd4:	3204      	adds	r2, #4
 8000bd6:	7011      	strb	r1, [r2, #0]
	  		if(readFlag == 1){
 8000bd8:	4b60      	ldr	r3, [pc, #384]	; (8000d5c <main+0x340>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d105      	bne.n	8000bec <main+0x1d0>
	  			HAL_GPIO_WritePin(GPIOB, RFID_LED_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2120      	movs	r1, #32
 8000be4:	4859      	ldr	r0, [pc, #356]	; (8000d4c <main+0x330>)
 8000be6:	f003 fc03 	bl	80043f0 <HAL_GPIO_WritePin>
 8000bea:	e004      	b.n	8000bf6 <main+0x1da>
	  		}else{
	  			HAL_GPIO_WritePin(GPIOB, RFID_LED_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2120      	movs	r1, #32
 8000bf0:	4856      	ldr	r0, [pc, #344]	; (8000d4c <main+0x330>)
 8000bf2:	f003 fbfd 	bl	80043f0 <HAL_GPIO_WritePin>
	  		}
	  		if(writeFlag == 1){
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <main+0x344>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d106      	bne.n	8000c0c <main+0x1f0>
	  			HAL_GPIO_WritePin(GPIOB, RFID_WRITE_LED_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c04:	4851      	ldr	r0, [pc, #324]	; (8000d4c <main+0x330>)
 8000c06:	f003 fbf3 	bl	80043f0 <HAL_GPIO_WritePin>
 8000c0a:	e005      	b.n	8000c18 <main+0x1fc>
	  		}else{
	  			HAL_GPIO_WritePin(GPIOB, RFID_WRITE_LED_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c12:	484e      	ldr	r0, [pc, #312]	; (8000d4c <main+0x330>)
 8000c14:	f003 fbec 	bl	80043f0 <HAL_GPIO_WritePin>
	  		}


	  		if (status == MI_OK && readFlag == 1)
 8000c18:	4b4e      	ldr	r3, [pc, #312]	; (8000d54 <main+0x338>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f040 8146 	bne.w	8000eae <main+0x492>
 8000c22:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <main+0x340>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	f040 8141 	bne.w	8000eae <main+0x492>
	  		{
	  				//HAL_GPIO_WritePin(RFID_LED_GPIO_Port, RFID_LED_Pin, 1);
	  				//HAL_GPIO_WritePin(GPIOB, Bluetooth_LED_Pin, GPIO_PIN_SET);
					HAL_Delay(200);
 8000c2c:	20c8      	movs	r0, #200	; 0xc8
 8000c2e:	f003 f881 	bl	8003d34 <HAL_Delay>
					MFRC522_SelectTag(str);
 8000c32:	4847      	ldr	r0, [pc, #284]	; (8000d50 <main+0x334>)
 8000c34:	f002 fc76 	bl	8003524 <MFRC522_SelectTag>
					test =	MFRC522_Auth(PICC_AUTHENT1A,2,rfidKey,serNum);
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <main+0x33c>)
 8000c3a:	4a4a      	ldr	r2, [pc, #296]	; (8000d64 <main+0x348>)
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	2060      	movs	r0, #96	; 0x60
 8000c40:	f002 fcb2 	bl	80035a8 <MFRC522_Auth>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4a48      	ldr	r2, [pc, #288]	; (8000d68 <main+0x34c>)
 8000c48:	7013      	strb	r3, [r2, #0]
					status = MFRC522_Read( 2, R1);
 8000c4a:	4948      	ldr	r1, [pc, #288]	; (8000d6c <main+0x350>)
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f002 fd0e 	bl	800366e <MFRC522_Read>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a3f      	ldr	r2, [pc, #252]	; (8000d54 <main+0x338>)
 8000c56:	7013      	strb	r3, [r2, #0]
					test =	MFRC522_Auth(PICC_AUTHENT1A,4,rfidKey,serNum);
 8000c58:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <main+0x33c>)
 8000c5a:	4a42      	ldr	r2, [pc, #264]	; (8000d64 <main+0x348>)
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	2060      	movs	r0, #96	; 0x60
 8000c60:	f002 fca2 	bl	80035a8 <MFRC522_Auth>
 8000c64:	4603      	mov	r3, r0
 8000c66:	4a40      	ldr	r2, [pc, #256]	; (8000d68 <main+0x34c>)
 8000c68:	7013      	strb	r3, [r2, #0]
					status = MFRC522_Read( 4, R2);
 8000c6a:	4941      	ldr	r1, [pc, #260]	; (8000d70 <main+0x354>)
 8000c6c:	2004      	movs	r0, #4
 8000c6e:	f002 fcfe 	bl	800366e <MFRC522_Read>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a37      	ldr	r2, [pc, #220]	; (8000d54 <main+0x338>)
 8000c76:	7013      	strb	r3, [r2, #0]
					test =	MFRC522_Auth(PICC_AUTHENT1A,5,rfidKey,serNum);
 8000c78:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <main+0x33c>)
 8000c7a:	4a3a      	ldr	r2, [pc, #232]	; (8000d64 <main+0x348>)
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	2060      	movs	r0, #96	; 0x60
 8000c80:	f002 fc92 	bl	80035a8 <MFRC522_Auth>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4a38      	ldr	r2, [pc, #224]	; (8000d68 <main+0x34c>)
 8000c88:	7013      	strb	r3, [r2, #0]
					status = MFRC522_Read( 5, R3);
 8000c8a:	493a      	ldr	r1, [pc, #232]	; (8000d74 <main+0x358>)
 8000c8c:	2005      	movs	r0, #5
 8000c8e:	f002 fcee 	bl	800366e <MFRC522_Read>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a2f      	ldr	r2, [pc, #188]	; (8000d54 <main+0x338>)
 8000c96:	7013      	strb	r3, [r2, #0]

					memcpy(combinedR, R1, sizeof(R1));
 8000c98:	4a37      	ldr	r2, [pc, #220]	; (8000d78 <main+0x35c>)
 8000c9a:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <main+0x350>)
 8000c9c:	4614      	mov	r4, r2
 8000c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ca2:	8023      	strh	r3, [r4, #0]
 8000ca4:	3402      	adds	r4, #2
 8000ca6:	0c1b      	lsrs	r3, r3, #16
 8000ca8:	7023      	strb	r3, [r4, #0]
					memcpy(combinedR + sizeof(R1), R2, sizeof(R2));
 8000caa:	4a34      	ldr	r2, [pc, #208]	; (8000d7c <main+0x360>)
 8000cac:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <main+0x354>)
 8000cae:	4614      	mov	r4, r2
 8000cb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000cb2:	6020      	str	r0, [r4, #0]
 8000cb4:	6061      	str	r1, [r4, #4]
 8000cb6:	60a2      	str	r2, [r4, #8]
 8000cb8:	881a      	ldrh	r2, [r3, #0]
 8000cba:	789b      	ldrb	r3, [r3, #2]
 8000cbc:	81a2      	strh	r2, [r4, #12]
 8000cbe:	73a3      	strb	r3, [r4, #14]
					memcpy(combinedR + 2 * sizeof(R2), R3, sizeof(R3));
 8000cc0:	4a2f      	ldr	r2, [pc, #188]	; (8000d80 <main+0x364>)
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <main+0x358>)
 8000cc4:	4614      	mov	r4, r2
 8000cc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000cc8:	6020      	str	r0, [r4, #0]
 8000cca:	6061      	str	r1, [r4, #4]
 8000ccc:	60a2      	str	r2, [r4, #8]
 8000cce:	881a      	ldrh	r2, [r3, #0]
 8000cd0:	789b      	ldrb	r3, [r3, #2]
 8000cd2:	81a2      	strh	r2, [r4, #12]
 8000cd4:	73a3      	strb	r3, [r4, #14]

					i = 0;
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <main+0x2fc>)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6013      	str	r3, [r2, #0]
					while( combinedR[i]!=' '){	//finding how many chars does the name takes before a space-stopper
 8000cdc:	e004      	b.n	8000ce8 <main+0x2cc>
						i++;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <main+0x2fc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <main+0x2fc>)
 8000ce6:	601a      	str	r2, [r3, #0]
					while( combinedR[i]!=' '){	//finding how many chars does the name takes before a space-stopper
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <main+0x2fc>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <main+0x35c>)
 8000cee:	5c9b      	ldrb	r3, [r3, r2]
 8000cf0:	2b20      	cmp	r3, #32
 8000cf2:	d1f4      	bne.n	8000cde <main+0x2c2>
					}
					nameSpaceCounter = i;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <main+0x2fc>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <main+0x300>)
 8000cfa:	601a      	str	r2, [r3, #0]

					for (size_t i = 0; i < myNames.count; ++i) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8000d02:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e0c1      	b.n	8000e8e <main+0x472>
 8000d0a:	bf00      	nop
 8000d0c:	200004c4 	.word	0x200004c4
 8000d10:	20000168 	.word	0x20000168
 8000d14:	200002d0 	.word	0x200002d0
 8000d18:	200006bc 	.word	0x200006bc
 8000d1c:	200006c0 	.word	0x200006c0
 8000d20:	0800aa8c 	.word	0x0800aa8c
 8000d24:	20000094 	.word	0x20000094
 8000d28:	200006b8 	.word	0x200006b8
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000a28 	.word	0x20000a28
 8000d34:	20000a18 	.word	0x20000a18
 8000d38:	0800aa94 	.word	0x0800aa94
 8000d3c:	20000878 	.word	0x20000878
 8000d40:	2000087c 	.word	0x2000087c
 8000d44:	2000085c 	.word	0x2000085c
 8000d48:	20000870 	.word	0x20000870
 8000d4c:	48000400 	.word	0x48000400
 8000d50:	200001f4 	.word	0x200001f4
 8000d54:	200001f0 	.word	0x200001f0
 8000d58:	20000204 	.word	0x20000204
 8000d5c:	2000000c 	.word	0x2000000c
 8000d60:	200006c8 	.word	0x200006c8
 8000d64:	20000004 	.word	0x20000004
 8000d68:	20000209 	.word	0x20000209
 8000d6c:	2000020c 	.word	0x2000020c
 8000d70:	2000021c 	.word	0x2000021c
 8000d74:	2000022c 	.word	0x2000022c
 8000d78:	2000023c 	.word	0x2000023c
 8000d7c:	2000024b 	.word	0x2000024b
 8000d80:	2000025a 	.word	0x2000025a
						if (strncmp(myNames.names[i], combinedR, nameSpaceCounter) == 0) {
 8000d84:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8000d88:	39b8      	subs	r1, #184	; 0xb8
 8000d8a:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8000d8e:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	2332      	movs	r3, #50	; 0x32
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	18c8      	adds	r0, r1, r3
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <main+0x43c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	492e      	ldr	r1, [pc, #184]	; (8000e5c <main+0x440>)
 8000da4:	f008 f9f8 	bl	8009198 <strncmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d164      	bne.n	8000e78 <main+0x45c>
							HAL_GPIO_WritePin(GPIOB, Bluetooth_LED_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2110      	movs	r1, #16
 8000db2:	482b      	ldr	r0, [pc, #172]	; (8000e60 <main+0x444>)
 8000db4:	f003 fb1c 	bl	80043f0 <HAL_GPIO_WritePin>
							HAL_Delay(2000);
 8000db8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dbc:	f002 ffba 	bl	8003d34 <HAL_Delay>
							HAL_GPIO_WritePin(GPIOB, Bluetooth_LED_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4826      	ldr	r0, [pc, #152]	; (8000e60 <main+0x444>)
 8000dc6:	f003 fb13 	bl	80043f0 <HAL_GPIO_WritePin>
							// Open when there's a match

							snprintf((char*)myHistory[historyEntranceCounter].timeStamps, sizeof(myHistory[historyEntranceCounter].timeStamps), "%02d-%02d-%02d/%02d:%02d", date.Year, date.Month, date.Date, time.Hours, time.Minutes);
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <main+0x448>)
 8000dcc:	6819      	ldr	r1, [r3, #0]
 8000dce:	f507 42c6 	add.w	r2, r7, #25344	; 0x6300
 8000dd2:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8000dd6:	3a0c      	subs	r2, #12
 8000dd8:	2346      	movs	r3, #70	; 0x46
 8000dda:	fb01 f303 	mul.w	r3, r1, r3
 8000dde:	3330      	adds	r3, #48	; 0x30
 8000de0:	4413      	add	r3, r2
 8000de2:	1c9c      	adds	r4, r3, #2
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <main+0x44c>)
 8000de6:	78db      	ldrb	r3, [r3, #3]
 8000de8:	461d      	mov	r5, r3
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <main+0x44c>)
 8000dec:	785b      	ldrb	r3, [r3, #1]
 8000dee:	4618      	mov	r0, r3
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <main+0x44c>)
 8000df2:	789b      	ldrb	r3, [r3, #2]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <main+0x450>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <main+0x450>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	9202      	str	r2, [sp, #8]
 8000e04:	9101      	str	r1, [sp, #4]
 8000e06:	9000      	str	r0, [sp, #0]
 8000e08:	462b      	mov	r3, r5
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <main+0x454>)
 8000e0c:	2114      	movs	r1, #20
 8000e0e:	4620      	mov	r0, r4
 8000e10:	f008 f860 	bl	8008ed4 <sniprintf>
							snprintf((char*)myHistory[historyEntranceCounter].names, sizeof(myHistory[historyEntranceCounter].names), "%s:", myNames.names[i]);
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <main+0x448>)
 8000e16:	6819      	ldr	r1, [r3, #0]
 8000e18:	f507 42c6 	add.w	r2, r7, #25344	; 0x6300
 8000e1c:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8000e20:	3a0c      	subs	r2, #12
 8000e22:	2346      	movs	r3, #70	; 0x46
 8000e24:	fb01 f303 	mul.w	r3, r1, r3
 8000e28:	18d0      	adds	r0, r2, r3
 8000e2a:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8000e2e:	39b8      	subs	r1, #184	; 0xb8
 8000e30:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8000e34:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	2332      	movs	r3, #50	; 0x32
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	440b      	add	r3, r1
 8000e42:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <main+0x458>)
 8000e44:	2132      	movs	r1, #50	; 0x32
 8000e46:	f008 f845 	bl	8008ed4 <sniprintf>
							historyEntranceCounter++;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <main+0x448>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <main+0x448>)
 8000e52:	601a      	str	r2, [r3, #0]


							break;  // If you want to stop after the first match
 8000e54:	e02b      	b.n	8000eae <main+0x492>
 8000e56:	bf00      	nop
 8000e58:	200006c0 	.word	0x200006c0
 8000e5c:	2000023c 	.word	0x2000023c
 8000e60:	48000400 	.word	0x48000400
 8000e64:	200006c4 	.word	0x200006c4
 8000e68:	20000870 	.word	0x20000870
 8000e6c:	2000085c 	.word	0x2000085c
 8000e70:	0800a918 	.word	0x0800a918
 8000e74:	0800a934 	.word	0x0800a934
					for (size_t i = 0; i < myNames.count; ++i) {
 8000e78:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8000e7c:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8000e88:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000e92:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 8000e96:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000e9a:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8000e9e:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8000ea2:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	f4ff af6b 	bcc.w	8000d84 <main+0x368>
						}
					}
	  		}
	  		if (status == MI_OK && writeFlag == 1)
 8000eae:	4b8e      	ldr	r3, [pc, #568]	; (80010e8 <main+0x6cc>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d13a      	bne.n	8000f2c <main+0x510>
 8000eb6:	4b8d      	ldr	r3, [pc, #564]	; (80010ec <main+0x6d0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d136      	bne.n	8000f2c <main+0x510>
	  		{
	  			HAL_Delay(500);
 8000ebe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec2:	f002 ff37 	bl	8003d34 <HAL_Delay>
	  			MFRC522_SelectTag(str);
 8000ec6:	488a      	ldr	r0, [pc, #552]	; (80010f0 <main+0x6d4>)
 8000ec8:	f002 fb2c 	bl	8003524 <MFRC522_SelectTag>
	  			test =	MFRC522_Auth(PICC_AUTHENT1A,2,rfidKey,serNum);
 8000ecc:	4b89      	ldr	r3, [pc, #548]	; (80010f4 <main+0x6d8>)
 8000ece:	4a8a      	ldr	r2, [pc, #552]	; (80010f8 <main+0x6dc>)
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	2060      	movs	r0, #96	; 0x60
 8000ed4:	f002 fb68 	bl	80035a8 <MFRC522_Auth>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a88      	ldr	r2, [pc, #544]	; (80010fc <main+0x6e0>)
 8000edc:	7013      	strb	r3, [r2, #0]
	  			status = MFRC522_Write((uint8_t)2 , writeArray1);
 8000ede:	4988      	ldr	r1, [pc, #544]	; (8001100 <main+0x6e4>)
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f002 fbf0 	bl	80036c6 <MFRC522_Write>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a7f      	ldr	r2, [pc, #508]	; (80010e8 <main+0x6cc>)
 8000eea:	7013      	strb	r3, [r2, #0]
	  			test =	MFRC522_Auth(PICC_AUTHENT1A,4,rfidKey,serNum);
 8000eec:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <main+0x6d8>)
 8000eee:	4a82      	ldr	r2, [pc, #520]	; (80010f8 <main+0x6dc>)
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	2060      	movs	r0, #96	; 0x60
 8000ef4:	f002 fb58 	bl	80035a8 <MFRC522_Auth>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a80      	ldr	r2, [pc, #512]	; (80010fc <main+0x6e0>)
 8000efc:	7013      	strb	r3, [r2, #0]
	  			status = MFRC522_Write((uint8_t)4 , writeArray2);
 8000efe:	4981      	ldr	r1, [pc, #516]	; (8001104 <main+0x6e8>)
 8000f00:	2004      	movs	r0, #4
 8000f02:	f002 fbe0 	bl	80036c6 <MFRC522_Write>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a77      	ldr	r2, [pc, #476]	; (80010e8 <main+0x6cc>)
 8000f0a:	7013      	strb	r3, [r2, #0]
	  			test =	MFRC522_Auth(PICC_AUTHENT1A,5,rfidKey,serNum);
 8000f0c:	4b79      	ldr	r3, [pc, #484]	; (80010f4 <main+0x6d8>)
 8000f0e:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <main+0x6dc>)
 8000f10:	2105      	movs	r1, #5
 8000f12:	2060      	movs	r0, #96	; 0x60
 8000f14:	f002 fb48 	bl	80035a8 <MFRC522_Auth>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a78      	ldr	r2, [pc, #480]	; (80010fc <main+0x6e0>)
 8000f1c:	7013      	strb	r3, [r2, #0]
	  			status = MFRC522_Write((uint8_t)5 , writeArray3);
 8000f1e:	497a      	ldr	r1, [pc, #488]	; (8001108 <main+0x6ec>)
 8000f20:	2005      	movs	r0, #5
 8000f22:	f002 fbd0 	bl	80036c6 <MFRC522_Write>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a6f      	ldr	r2, [pc, #444]	; (80010e8 <main+0x6cc>)
 8000f2a:	7013      	strb	r3, [r2, #0]
	  		}


	  			//OPEN
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'o' && RX_BUFFER[2] == 'p' && RX_BUFFER[3] == 'e' && RX_BUFFER[4] == 'n')
 8000f2c:	4b77      	ldr	r3, [pc, #476]	; (800110c <main+0x6f0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d127      	bne.n	8000f84 <main+0x568>
 8000f34:	4b76      	ldr	r3, [pc, #472]	; (8001110 <main+0x6f4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b7b      	cmp	r3, #123	; 0x7b
 8000f3a:	d123      	bne.n	8000f84 <main+0x568>
 8000f3c:	4b74      	ldr	r3, [pc, #464]	; (8001110 <main+0x6f4>)
 8000f3e:	785b      	ldrb	r3, [r3, #1]
 8000f40:	2b6f      	cmp	r3, #111	; 0x6f
 8000f42:	d11f      	bne.n	8000f84 <main+0x568>
 8000f44:	4b72      	ldr	r3, [pc, #456]	; (8001110 <main+0x6f4>)
 8000f46:	789b      	ldrb	r3, [r3, #2]
 8000f48:	2b70      	cmp	r3, #112	; 0x70
 8000f4a:	d11b      	bne.n	8000f84 <main+0x568>
 8000f4c:	4b70      	ldr	r3, [pc, #448]	; (8001110 <main+0x6f4>)
 8000f4e:	78db      	ldrb	r3, [r3, #3]
 8000f50:	2b65      	cmp	r3, #101	; 0x65
 8000f52:	d117      	bne.n	8000f84 <main+0x568>
 8000f54:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <main+0x6f4>)
 8000f56:	791b      	ldrb	r3, [r3, #4]
 8000f58:	2b6e      	cmp	r3, #110	; 0x6e
 8000f5a:	d113      	bne.n	8000f84 <main+0x568>
	          {
	        	  sendEncryptedData("opening door");
 8000f5c:	486d      	ldr	r0, [pc, #436]	; (8001114 <main+0x6f8>)
 8000f5e:	f7ff fc1b 	bl	8000798 <sendEncryptedData>
	        	  HAL_GPIO_WritePin(GPIOB, Bluetooth_LED_Pin, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2110      	movs	r1, #16
 8000f66:	486c      	ldr	r0, [pc, #432]	; (8001118 <main+0x6fc>)
 8000f68:	f003 fa42 	bl	80043f0 <HAL_GPIO_WritePin>
	        	  HAL_Delay(1000);
 8000f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f70:	f002 fee0 	bl	8003d34 <HAL_Delay>
	        	  HAL_GPIO_WritePin(GPIOB, Bluetooth_LED_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2110      	movs	r1, #16
 8000f78:	4867      	ldr	r0, [pc, #412]	; (8001118 <main+0x6fc>)
 8000f7a:	f003 fa39 	bl	80043f0 <HAL_GPIO_WritePin>
	        	  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 8000f7e:	4a63      	ldr	r2, [pc, #396]	; (800110c <main+0x6f0>)
 8000f80:	2300      	movs	r3, #0
 8000f82:	6013      	str	r3, [r2, #0]
	          }
	          //READING START
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'r' && RX_BUFFER[2] == 'e' && RX_BUFFER[3] == 'a' && RX_BUFFER[4] == 'd' && RX_BUFFER[5] == 'O' && RX_BUFFER[6] == 'n')
 8000f84:	4b61      	ldr	r3, [pc, #388]	; (800110c <main+0x6f0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d127      	bne.n	8000fdc <main+0x5c0>
 8000f8c:	4b60      	ldr	r3, [pc, #384]	; (8001110 <main+0x6f4>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b7b      	cmp	r3, #123	; 0x7b
 8000f92:	d123      	bne.n	8000fdc <main+0x5c0>
 8000f94:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <main+0x6f4>)
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	2b72      	cmp	r3, #114	; 0x72
 8000f9a:	d11f      	bne.n	8000fdc <main+0x5c0>
 8000f9c:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <main+0x6f4>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	2b65      	cmp	r3, #101	; 0x65
 8000fa2:	d11b      	bne.n	8000fdc <main+0x5c0>
 8000fa4:	4b5a      	ldr	r3, [pc, #360]	; (8001110 <main+0x6f4>)
 8000fa6:	78db      	ldrb	r3, [r3, #3]
 8000fa8:	2b61      	cmp	r3, #97	; 0x61
 8000faa:	d117      	bne.n	8000fdc <main+0x5c0>
 8000fac:	4b58      	ldr	r3, [pc, #352]	; (8001110 <main+0x6f4>)
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	2b64      	cmp	r3, #100	; 0x64
 8000fb2:	d113      	bne.n	8000fdc <main+0x5c0>
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <main+0x6f4>)
 8000fb6:	795b      	ldrb	r3, [r3, #5]
 8000fb8:	2b4f      	cmp	r3, #79	; 0x4f
 8000fba:	d10f      	bne.n	8000fdc <main+0x5c0>
 8000fbc:	4b54      	ldr	r3, [pc, #336]	; (8001110 <main+0x6f4>)
 8000fbe:	799b      	ldrb	r3, [r3, #6]
 8000fc0:	2b6e      	cmp	r3, #110	; 0x6e
 8000fc2:	d10b      	bne.n	8000fdc <main+0x5c0>
	          {
	              sendEncryptedData("starting reading");
 8000fc4:	4855      	ldr	r0, [pc, #340]	; (800111c <main+0x700>)
 8000fc6:	f7ff fbe7 	bl	8000798 <sendEncryptedData>
	              readFlag = 1;
 8000fca:	4a55      	ldr	r2, [pc, #340]	; (8001120 <main+0x704>)
 8000fcc:	2301      	movs	r3, #1
 8000fce:	6013      	str	r3, [r2, #0]
	              writeFlag = 0;
 8000fd0:	4a46      	ldr	r2, [pc, #280]	; (80010ec <main+0x6d0>)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	6013      	str	r3, [r2, #0]
	              newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <main+0x6f0>)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	6013      	str	r3, [r2, #0]
	          }

	          //READING STOP
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'r' && RX_BUFFER[2] == 'e' && RX_BUFFER[3] == 'a' && RX_BUFFER[4] == 'd' && RX_BUFFER[5] == 'O' && RX_BUFFER[6] == 'f')
 8000fdc:	4b4b      	ldr	r3, [pc, #300]	; (800110c <main+0x6f0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d124      	bne.n	800102e <main+0x612>
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <main+0x6f4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b7b      	cmp	r3, #123	; 0x7b
 8000fea:	d120      	bne.n	800102e <main+0x612>
 8000fec:	4b48      	ldr	r3, [pc, #288]	; (8001110 <main+0x6f4>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	2b72      	cmp	r3, #114	; 0x72
 8000ff2:	d11c      	bne.n	800102e <main+0x612>
 8000ff4:	4b46      	ldr	r3, [pc, #280]	; (8001110 <main+0x6f4>)
 8000ff6:	789b      	ldrb	r3, [r3, #2]
 8000ff8:	2b65      	cmp	r3, #101	; 0x65
 8000ffa:	d118      	bne.n	800102e <main+0x612>
 8000ffc:	4b44      	ldr	r3, [pc, #272]	; (8001110 <main+0x6f4>)
 8000ffe:	78db      	ldrb	r3, [r3, #3]
 8001000:	2b61      	cmp	r3, #97	; 0x61
 8001002:	d114      	bne.n	800102e <main+0x612>
 8001004:	4b42      	ldr	r3, [pc, #264]	; (8001110 <main+0x6f4>)
 8001006:	791b      	ldrb	r3, [r3, #4]
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	d110      	bne.n	800102e <main+0x612>
 800100c:	4b40      	ldr	r3, [pc, #256]	; (8001110 <main+0x6f4>)
 800100e:	795b      	ldrb	r3, [r3, #5]
 8001010:	2b4f      	cmp	r3, #79	; 0x4f
 8001012:	d10c      	bne.n	800102e <main+0x612>
 8001014:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <main+0x6f4>)
 8001016:	799b      	ldrb	r3, [r3, #6]
 8001018:	2b66      	cmp	r3, #102	; 0x66
 800101a:	d108      	bne.n	800102e <main+0x612>
			  {
	              sendEncryptedData("stopping reading");
 800101c:	4841      	ldr	r0, [pc, #260]	; (8001124 <main+0x708>)
 800101e:	f7ff fbbb 	bl	8000798 <sendEncryptedData>
				  readFlag = 0;
 8001022:	4a3f      	ldr	r2, [pc, #252]	; (8001120 <main+0x704>)
 8001024:	2300      	movs	r3, #0
 8001026:	6013      	str	r3, [r2, #0]
				  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 8001028:	4a38      	ldr	r2, [pc, #224]	; (800110c <main+0x6f0>)
 800102a:	2300      	movs	r3, #0
 800102c:	6013      	str	r3, [r2, #0]
			  }

	          //ADD USER
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'A' && RX_BUFFER[2] == 'd' && RX_BUFFER[3] == 'd' && RX_BUFFER[4] == ':')
 800102e:	4b37      	ldr	r3, [pc, #220]	; (800110c <main+0x6f0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d133      	bne.n	800109e <main+0x682>
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <main+0x6f4>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b7b      	cmp	r3, #123	; 0x7b
 800103c:	d12f      	bne.n	800109e <main+0x682>
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <main+0x6f4>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	2b41      	cmp	r3, #65	; 0x41
 8001044:	d12b      	bne.n	800109e <main+0x682>
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <main+0x6f4>)
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	2b64      	cmp	r3, #100	; 0x64
 800104c:	d127      	bne.n	800109e <main+0x682>
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <main+0x6f4>)
 8001050:	78db      	ldrb	r3, [r3, #3]
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d123      	bne.n	800109e <main+0x682>
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <main+0x6f4>)
 8001058:	791b      	ldrb	r3, [r3, #4]
 800105a:	2b3a      	cmp	r3, #58	; 0x3a
 800105c:	d11f      	bne.n	800109e <main+0x682>
	          {
	        	  i = 0;
 800105e:	4a32      	ldr	r2, [pc, #200]	; (8001128 <main+0x70c>)
 8001060:	2300      	movs	r3, #0
 8001062:	6013      	str	r3, [r2, #0]
	        	  while( RX_BUFFER[i]!='}'){
 8001064:	e004      	b.n	8001070 <main+0x654>
	        		  i++;
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <main+0x70c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <main+0x70c>)
 800106e:	601a      	str	r2, [r3, #0]
	        	  while( RX_BUFFER[i]!='}'){
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <main+0x70c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <main+0x6f4>)
 8001076:	5c9b      	ldrb	r3, [r3, r2]
 8001078:	2b7d      	cmp	r3, #125	; 0x7d
 800107a:	d1f4      	bne.n	8001066 <main+0x64a>
	        	  }
	        	  nameSpaceCounter = i - 5;
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <main+0x70c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	1f5a      	subs	r2, r3, #5
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <main+0x710>)
 8001084:	601a      	str	r2, [r3, #0]
	        	  addName(&myNames, RX_BUFFER, 5, nameSpaceCounter);	//nameSpaceCounter is length of the name and 5 is index where the name starts in buffer
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <main+0x710>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f507 7012 	add.w	r0, r7, #584	; 0x248
 800108e:	38b8      	subs	r0, #184	; 0xb8
 8001090:	2205      	movs	r2, #5
 8001092:	491f      	ldr	r1, [pc, #124]	; (8001110 <main+0x6f4>)
 8001094:	f7ff faf0 	bl	8000678 <addName>
	        	  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 8001098:	4a1c      	ldr	r2, [pc, #112]	; (800110c <main+0x6f0>)
 800109a:	2300      	movs	r3, #0
 800109c:	6013      	str	r3, [r2, #0]
	       	  }

	          //DELETE USER
			  if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'D' && RX_BUFFER[2] == 'l' && RX_BUFFER[3] == 't' && RX_BUFFER[4] == ':')
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <main+0x6f0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	f040 80af 	bne.w	8001206 <main+0x7ea>
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <main+0x6f4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b7b      	cmp	r3, #123	; 0x7b
 80010ae:	f040 80aa 	bne.w	8001206 <main+0x7ea>
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <main+0x6f4>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	2b44      	cmp	r3, #68	; 0x44
 80010b8:	f040 80a5 	bne.w	8001206 <main+0x7ea>
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <main+0x6f4>)
 80010be:	789b      	ldrb	r3, [r3, #2]
 80010c0:	2b6c      	cmp	r3, #108	; 0x6c
 80010c2:	f040 80a0 	bne.w	8001206 <main+0x7ea>
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <main+0x6f4>)
 80010c8:	78db      	ldrb	r3, [r3, #3]
 80010ca:	2b74      	cmp	r3, #116	; 0x74
 80010cc:	f040 809b 	bne.w	8001206 <main+0x7ea>
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <main+0x6f4>)
 80010d2:	791b      	ldrb	r3, [r3, #4]
 80010d4:	2b3a      	cmp	r3, #58	; 0x3a
 80010d6:	f040 8096 	bne.w	8001206 <main+0x7ea>
			  {
 80010da:	466b      	mov	r3, sp
 80010dc:	461c      	mov	r4, r3
				  i = 0;
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <main+0x70c>)
 80010e0:	2300      	movs	r3, #0
 80010e2:	6013      	str	r3, [r2, #0]
				  while( RX_BUFFER[i]!='}'){
 80010e4:	e029      	b.n	800113a <main+0x71e>
 80010e6:	bf00      	nop
 80010e8:	200001f0 	.word	0x200001f0
 80010ec:	200006c8 	.word	0x200006c8
 80010f0:	200001f4 	.word	0x200001f4
 80010f4:	20000204 	.word	0x20000204
 80010f8:	20000004 	.word	0x20000004
 80010fc:	20000209 	.word	0x20000209
 8001100:	200002a0 	.word	0x200002a0
 8001104:	200002b0 	.word	0x200002b0
 8001108:	200002c0 	.word	0x200002c0
 800110c:	200006b8 	.word	0x200006b8
 8001110:	200004c4 	.word	0x200004c4
 8001114:	0800a938 	.word	0x0800a938
 8001118:	48000400 	.word	0x48000400
 800111c:	0800a948 	.word	0x0800a948
 8001120:	2000000c 	.word	0x2000000c
 8001124:	0800a95c 	.word	0x0800a95c
 8001128:	200006bc 	.word	0x200006bc
 800112c:	200006c0 	.word	0x200006c0
					  i++;
 8001130:	4b92      	ldr	r3, [pc, #584]	; (800137c <main+0x960>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	4b91      	ldr	r3, [pc, #580]	; (800137c <main+0x960>)
 8001138:	601a      	str	r2, [r3, #0]
				  while( RX_BUFFER[i]!='}'){
 800113a:	4b90      	ldr	r3, [pc, #576]	; (800137c <main+0x960>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b90      	ldr	r3, [pc, #576]	; (8001380 <main+0x964>)
 8001140:	5c9b      	ldrb	r3, [r3, r2]
 8001142:	2b7d      	cmp	r3, #125	; 0x7d
 8001144:	d1f4      	bne.n	8001130 <main+0x714>
				  }
				  nameSpaceCounter = i - 5;
 8001146:	4b8d      	ldr	r3, [pc, #564]	; (800137c <main+0x960>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1f5a      	subs	r2, r3, #5
 800114c:	4b8d      	ldr	r3, [pc, #564]	; (8001384 <main+0x968>)
 800114e:	601a      	str	r2, [r3, #0]
				  uint8_t nameToDelete[nameSpaceCounter + 1];  // +1 for null-terminator
 8001150:	4b8c      	ldr	r3, [pc, #560]	; (8001384 <main+0x968>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	1c59      	adds	r1, r3, #1
 8001156:	1e4b      	subs	r3, r1, #1
 8001158:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 800115c:	f102 0210 	add.w	r2, r2, #16
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	460a      	mov	r2, r1
 8001164:	2300      	movs	r3, #0
 8001166:	653a      	str	r2, [r7, #80]	; 0x50
 8001168:	657b      	str	r3, [r7, #84]	; 0x54
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	e9d7 5614 	ldrd	r5, r6, [r7, #80]	; 0x50
 8001176:	4630      	mov	r0, r6
 8001178:	00c3      	lsls	r3, r0, #3
 800117a:	4628      	mov	r0, r5
 800117c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001180:	4628      	mov	r0, r5
 8001182:	00c2      	lsls	r2, r0, #3
 8001184:	460a      	mov	r2, r1
 8001186:	2300      	movs	r3, #0
 8001188:	64ba      	str	r2, [r7, #72]	; 0x48
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9d7 5612 	ldrd	r5, r6, [r7, #72]	; 0x48
 8001198:	4630      	mov	r0, r6
 800119a:	00c3      	lsls	r3, r0, #3
 800119c:	4628      	mov	r0, r5
 800119e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011a2:	4628      	mov	r0, r5
 80011a4:	00c2      	lsls	r2, r0, #3
 80011a6:	460b      	mov	r3, r1
 80011a8:	3307      	adds	r3, #7
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	ebad 0d03 	sub.w	sp, sp, r3
 80011b2:	ab04      	add	r3, sp, #16
 80011b4:	3300      	adds	r3, #0
 80011b6:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 80011ba:	f102 020c 	add.w	r2, r2, #12
 80011be:	6013      	str	r3, [r2, #0]
				  memcpy(nameToDelete, RX_BUFFER + 5, nameSpaceCounter);
 80011c0:	4971      	ldr	r1, [pc, #452]	; (8001388 <main+0x96c>)
 80011c2:	4b70      	ldr	r3, [pc, #448]	; (8001384 <main+0x968>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 80011cc:	f103 030c 	add.w	r3, r3, #12
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	f008 f8a8 	bl	8009326 <memcpy>
				  nameToDelete[nameSpaceCounter] = '\0';  // Null-terminate the string
 80011d6:	4b6b      	ldr	r3, [pc, #428]	; (8001384 <main+0x968>)
 80011d8:	6819      	ldr	r1, [r3, #0]
 80011da:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 80011de:	f103 030c 	add.w	r3, r3, #12
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	5453      	strb	r3, [r2, r1]
				  //const uint8_t *nameToDelete = "igor";
				  deleteName(&myNames, nameToDelete);
 80011e8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80011ec:	3bb8      	subs	r3, #184	; 0xb8
 80011ee:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 80011f2:	f102 020c 	add.w	r2, r2, #12
 80011f6:	6811      	ldr	r1, [r2, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fa7d 	bl	80006f8 <deleteName>
				  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 80011fe:	4a63      	ldr	r2, [pc, #396]	; (800138c <main+0x970>)
 8001200:	2300      	movs	r3, #0
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	46a5      	mov	sp, r4
			  }

	          //SYNCHRONIZE USERS
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 's' && RX_BUFFER[2] == 'y' && RX_BUFFER[3] == 'n' && RX_BUFFER[4] == 'c' && RX_BUFFER[5] == 'U' && RX_BUFFER[6] == 's' && RX_BUFFER[7] == 'e' && RX_BUFFER[8] == 'r' && RX_BUFFER[9] == '}')
 8001206:	4b61      	ldr	r3, [pc, #388]	; (800138c <main+0x970>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	f040 80f3 	bne.w	80013f6 <main+0x9da>
 8001210:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <main+0x964>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b7b      	cmp	r3, #123	; 0x7b
 8001216:	f040 80ee 	bne.w	80013f6 <main+0x9da>
 800121a:	4b59      	ldr	r3, [pc, #356]	; (8001380 <main+0x964>)
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	2b73      	cmp	r3, #115	; 0x73
 8001220:	f040 80e9 	bne.w	80013f6 <main+0x9da>
 8001224:	4b56      	ldr	r3, [pc, #344]	; (8001380 <main+0x964>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	2b79      	cmp	r3, #121	; 0x79
 800122a:	f040 80e4 	bne.w	80013f6 <main+0x9da>
 800122e:	4b54      	ldr	r3, [pc, #336]	; (8001380 <main+0x964>)
 8001230:	78db      	ldrb	r3, [r3, #3]
 8001232:	2b6e      	cmp	r3, #110	; 0x6e
 8001234:	f040 80df 	bne.w	80013f6 <main+0x9da>
 8001238:	4b51      	ldr	r3, [pc, #324]	; (8001380 <main+0x964>)
 800123a:	791b      	ldrb	r3, [r3, #4]
 800123c:	2b63      	cmp	r3, #99	; 0x63
 800123e:	f040 80da 	bne.w	80013f6 <main+0x9da>
 8001242:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <main+0x964>)
 8001244:	795b      	ldrb	r3, [r3, #5]
 8001246:	2b55      	cmp	r3, #85	; 0x55
 8001248:	f040 80d5 	bne.w	80013f6 <main+0x9da>
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <main+0x964>)
 800124e:	799b      	ldrb	r3, [r3, #6]
 8001250:	2b73      	cmp	r3, #115	; 0x73
 8001252:	f040 80d0 	bne.w	80013f6 <main+0x9da>
 8001256:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <main+0x964>)
 8001258:	79db      	ldrb	r3, [r3, #7]
 800125a:	2b65      	cmp	r3, #101	; 0x65
 800125c:	f040 80cb 	bne.w	80013f6 <main+0x9da>
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <main+0x964>)
 8001262:	7a1b      	ldrb	r3, [r3, #8]
 8001264:	2b72      	cmp	r3, #114	; 0x72
 8001266:	f040 80c6 	bne.w	80013f6 <main+0x9da>
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <main+0x964>)
 800126c:	7a5b      	ldrb	r3, [r3, #9]
 800126e:	2b7d      	cmp	r3, #125	; 0x7d
 8001270:	f040 80c1 	bne.w	80013f6 <main+0x9da>
	          {
	        	  char buffer1[] = "usr:";
 8001274:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8001278:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 800127c:	4944      	ldr	r1, [pc, #272]	; (8001390 <main+0x974>)
 800127e:	461a      	mov	r2, r3
 8001280:	460b      	mov	r3, r1
 8001282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001286:	6010      	str	r0, [r2, #0]
 8001288:	3204      	adds	r2, #4
 800128a:	7011      	strb	r1, [r2, #0]
	        	  HAL_UART_Transmit(&huart1, (void*)buffer1, strlen(buffer1), 1000);
 800128c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001290:	3bf0      	subs	r3, #240	; 0xf0
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ffa6 	bl	80001e4 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	f507 7112 	add.w	r1, r7, #584	; 0x248
 80012a0:	39f0      	subs	r1, #240	; 0xf0
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	483b      	ldr	r0, [pc, #236]	; (8001394 <main+0x978>)
 80012a8:	f005 ffa6 	bl	80071f8 <HAL_UART_Transmit>
	        	  for(i = 0; i < myNames.count; i++){
 80012ac:	4a33      	ldr	r2, [pc, #204]	; (800137c <main+0x960>)
 80012ae:	2300      	movs	r3, #0
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e037      	b.n	8001324 <main+0x908>
	        		  HAL_UART_Transmit(&huart1, (void*)myNames.names[i], strlen(myNames.names[i]), 1000);
 80012b4:	4b31      	ldr	r3, [pc, #196]	; (800137c <main+0x960>)
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80012bc:	3ab8      	subs	r2, #184	; 0xb8
 80012be:	2332      	movs	r3, #50	; 0x32
 80012c0:	fb01 f303 	mul.w	r3, r1, r3
 80012c4:	18d4      	adds	r4, r2, r3
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <main+0x960>)
 80012c8:	6819      	ldr	r1, [r3, #0]
 80012ca:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80012ce:	3ab8      	subs	r2, #184	; 0xb8
 80012d0:	2332      	movs	r3, #50	; 0x32
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7fe ff83 	bl	80001e4 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	4621      	mov	r1, r4
 80012e8:	482a      	ldr	r0, [pc, #168]	; (8001394 <main+0x978>)
 80012ea:	f005 ff85 	bl	80071f8 <HAL_UART_Transmit>
	        		  char buffer[] = " ";
 80012ee:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 80012f2:	f6a3 22f8 	subw	r2, r3, #2808	; 0xaf8
 80012f6:	2320      	movs	r3, #32
 80012f8:	8013      	strh	r3, [r2, #0]
	        		  HAL_UART_Transmit(&huart1, (void*)buffer, strlen(buffer), 1000);
 80012fa:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80012fe:	3bf8      	subs	r3, #248	; 0xf8
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ff6f 	bl	80001e4 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	f507 7112 	add.w	r1, r7, #584	; 0x248
 800130e:	39f8      	subs	r1, #248	; 0xf8
 8001310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001314:	481f      	ldr	r0, [pc, #124]	; (8001394 <main+0x978>)
 8001316:	f005 ff6f 	bl	80071f8 <HAL_UART_Transmit>
	        	  for(i = 0; i < myNames.count; i++){
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <main+0x960>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <main+0x960>)
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8001328:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 800132c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001330:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <main+0x960>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8bb      	bhi.n	80012b4 <main+0x898>
	        	  }
				  char buffer2[] = "\n";
 800133c:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8001340:	f6a3 22f4 	subw	r2, r3, #2804	; 0xaf4
 8001344:	230a      	movs	r3, #10
 8001346:	8013      	strh	r3, [r2, #0]
				  HAL_UART_Transmit(&huart1, (void*)buffer2, strlen(buffer2), 1000);
 8001348:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800134c:	3bf4      	subs	r3, #244	; 0xf4
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ff48 	bl	80001e4 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f507 7112 	add.w	r1, r7, #584	; 0x248
 800135c:	39f4      	subs	r1, #244	; 0xf4
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <main+0x978>)
 8001364:	f005 ff48 	bl	80071f8 <HAL_UART_Transmit>



				  sendEncryptedData("UsersStart");
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <main+0x97c>)
 800136a:	f7ff fa15 	bl	8000798 <sendEncryptedData>
				  HAL_Delay(50);
 800136e:	2032      	movs	r0, #50	; 0x32
 8001370:	f002 fce0 	bl	8003d34 <HAL_Delay>
				  for(i = 0; i < myNames.count; i++){
 8001374:	4a01      	ldr	r2, [pc, #4]	; (800137c <main+0x960>)
 8001376:	2300      	movs	r3, #0
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e02a      	b.n	80013d2 <main+0x9b6>
 800137c:	200006bc 	.word	0x200006bc
 8001380:	200004c4 	.word	0x200004c4
 8001384:	200006c0 	.word	0x200006c0
 8001388:	200004c9 	.word	0x200004c9
 800138c:	200006b8 	.word	0x200006b8
 8001390:	0800aaa4 	.word	0x0800aaa4
 8001394:	20000168 	.word	0x20000168
 8001398:	0800a970 	.word	0x0800a970
					  char buffer[MAX_NAME_LENGTH + TIMESTAMP_LENGTH + 1]; // +1 for null terminator

					  // Concatenate names and timeStamps into the buffer
					  snprintf(buffer, sizeof(buffer), "u:%s ", myNames.names[i]);
 800139c:	4b90      	ldr	r3, [pc, #576]	; (80015e0 <main+0xbc4>)
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80013a4:	3ab8      	subs	r2, #184	; 0xb8
 80013a6:	2332      	movs	r3, #50	; 0x32
 80013a8:	fb01 f303 	mul.w	r3, r1, r3
 80013ac:	4413      	add	r3, r2
 80013ae:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80013b2:	38e0      	subs	r0, #224	; 0xe0
 80013b4:	4a8b      	ldr	r2, [pc, #556]	; (80015e4 <main+0xbc8>)
 80013b6:	2147      	movs	r1, #71	; 0x47
 80013b8:	f007 fd8c 	bl	8008ed4 <sniprintf>

					  // Transmit the concatenated string
					  sendEncryptedData(buffer);
 80013bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80013c0:	3be0      	subs	r3, #224	; 0xe0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f9e8 	bl	8000798 <sendEncryptedData>
				  for(i = 0; i < myNames.count; i++){
 80013c8:	4b85      	ldr	r3, [pc, #532]	; (80015e0 <main+0xbc4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	4b84      	ldr	r3, [pc, #528]	; (80015e0 <main+0xbc4>)
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 80013d6:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 80013da:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80013de:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 80013e2:	4b7f      	ldr	r3, [pc, #508]	; (80015e0 <main+0xbc4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d8d8      	bhi.n	800139c <main+0x980>
				  }
				  sendEncryptedData("UsersEnd");
 80013ea:	487f      	ldr	r0, [pc, #508]	; (80015e8 <main+0xbcc>)
 80013ec:	f7ff f9d4 	bl	8000798 <sendEncryptedData>




				  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 80013f0:	4a7e      	ldr	r2, [pc, #504]	; (80015ec <main+0xbd0>)
 80013f2:	2300      	movs	r3, #0
 80013f4:	6013      	str	r3, [r2, #0]

	          }
	          HAL_Delay(500);
 80013f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013fa:	f002 fc9b 	bl	8003d34 <HAL_Delay>

	          //TIME SYNCHRONIZATION
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 't' && RX_BUFFER[2] == 'i' && RX_BUFFER[3] == 'm' && RX_BUFFER[4] == 'e' && RX_BUFFER[5] == ':')
 80013fe:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <main+0xbd0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	f040 80c9 	bne.w	800159a <main+0xb7e>
 8001408:	4b79      	ldr	r3, [pc, #484]	; (80015f0 <main+0xbd4>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b7b      	cmp	r3, #123	; 0x7b
 800140e:	f040 80c4 	bne.w	800159a <main+0xb7e>
 8001412:	4b77      	ldr	r3, [pc, #476]	; (80015f0 <main+0xbd4>)
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	2b74      	cmp	r3, #116	; 0x74
 8001418:	f040 80bf 	bne.w	800159a <main+0xb7e>
 800141c:	4b74      	ldr	r3, [pc, #464]	; (80015f0 <main+0xbd4>)
 800141e:	789b      	ldrb	r3, [r3, #2]
 8001420:	2b69      	cmp	r3, #105	; 0x69
 8001422:	f040 80ba 	bne.w	800159a <main+0xb7e>
 8001426:	4b72      	ldr	r3, [pc, #456]	; (80015f0 <main+0xbd4>)
 8001428:	78db      	ldrb	r3, [r3, #3]
 800142a:	2b6d      	cmp	r3, #109	; 0x6d
 800142c:	f040 80b5 	bne.w	800159a <main+0xb7e>
 8001430:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <main+0xbd4>)
 8001432:	791b      	ldrb	r3, [r3, #4]
 8001434:	2b65      	cmp	r3, #101	; 0x65
 8001436:	f040 80b0 	bne.w	800159a <main+0xb7e>
 800143a:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <main+0xbd4>)
 800143c:	795b      	ldrb	r3, [r3, #5]
 800143e:	2b3a      	cmp	r3, #58	; 0x3a
 8001440:	f040 80ab 	bne.w	800159a <main+0xb7e>
			  {
	        	  RTC_TimeTypeDef new_time = {0};
 8001444:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8001448:	f6a3 330c 	subw	r3, r3, #2828	; 0xb0c
 800144c:	461a      	mov	r2, r3
 800144e:	2300      	movs	r3, #0
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	6053      	str	r3, [r2, #4]
 8001454:	6093      	str	r3, [r2, #8]
 8001456:	60d3      	str	r3, [r2, #12]
 8001458:	6113      	str	r3, [r2, #16]
	        	  testlen = (RX_BUFFER[6] - '0') * 10 + (RX_BUFFER[7] - '0');
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <main+0xbd4>)
 800145c:	799b      	ldrb	r3, [r3, #6]
 800145e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	461a      	mov	r2, r3
 800146c:	4b60      	ldr	r3, [pc, #384]	; (80015f0 <main+0xbd4>)
 800146e:	79db      	ldrb	r3, [r3, #7]
 8001470:	3b30      	subs	r3, #48	; 0x30
 8001472:	441a      	add	r2, r3
 8001474:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <main+0xbd8>)
 8001476:	601a      	str	r2, [r3, #0]
	        	  new_time.Hours = (RX_BUFFER[6] - '0') * 10 + (RX_BUFFER[7] - '0');
 8001478:	4b5d      	ldr	r3, [pc, #372]	; (80015f0 <main+0xbd4>)
 800147a:	799b      	ldrb	r3, [r3, #6]
 800147c:	461a      	mov	r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <main+0xbd4>)
 800148a:	79db      	ldrb	r3, [r3, #7]
 800148c:	4413      	add	r3, r2
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3b10      	subs	r3, #16
 8001492:	b2d9      	uxtb	r1, r3
 8001494:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8001498:	f6a3 320c 	subw	r2, r3, #2828	; 0xb0c
 800149c:	460b      	mov	r3, r1
 800149e:	7013      	strb	r3, [r2, #0]
	        	  new_time.Minutes = (RX_BUFFER[9] - '0') * 10 + (RX_BUFFER[10] - '0');
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <main+0xbd4>)
 80014a2:	7a5b      	ldrb	r3, [r3, #9]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <main+0xbd4>)
 80014b2:	7a9b      	ldrb	r3, [r3, #10]
 80014b4:	4413      	add	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	3b10      	subs	r3, #16
 80014ba:	b2d9      	uxtb	r1, r3
 80014bc:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 80014c0:	f6a3 320c 	subw	r2, r3, #2828	; 0xb0c
 80014c4:	460b      	mov	r3, r1
 80014c6:	7053      	strb	r3, [r2, #1]
	        	  new_time.Seconds = (RX_BUFFER[12] - '0') * 10 + (RX_BUFFER[13] - '0');
 80014c8:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <main+0xbd4>)
 80014ca:	7b1b      	ldrb	r3, [r3, #12]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <main+0xbd4>)
 80014da:	7b5b      	ldrb	r3, [r3, #13]
 80014dc:	4413      	add	r3, r2
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	3b10      	subs	r3, #16
 80014e2:	b2d9      	uxtb	r1, r3
 80014e4:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 80014e8:	f6a3 320c 	subw	r2, r3, #2828	; 0xb0c
 80014ec:	460b      	mov	r3, r1
 80014ee:	7093      	strb	r3, [r2, #2]
	        	  HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 80014f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80014f4:	3b0c      	subs	r3, #12
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	483f      	ldr	r0, [pc, #252]	; (80015f8 <main+0xbdc>)
 80014fc:	f004 fb38 	bl	8005b70 <HAL_RTC_SetTime>
	        	  RTC_DateTypeDef today;
	        	  today.Year = (RX_BUFFER[21] - '0') * 10 + (RX_BUFFER[22] - '0');
 8001500:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <main+0xbd4>)
 8001502:	7d5b      	ldrb	r3, [r3, #21]
 8001504:	461a      	mov	r2, r3
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <main+0xbd4>)
 8001512:	7d9b      	ldrb	r3, [r3, #22]
 8001514:	4413      	add	r3, r2
 8001516:	b2db      	uxtb	r3, r3
 8001518:	3b10      	subs	r3, #16
 800151a:	b2d9      	uxtb	r1, r3
 800151c:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8001520:	f5a3 6231 	sub.w	r2, r3, #2832	; 0xb10
 8001524:	460b      	mov	r3, r1
 8001526:	70d3      	strb	r3, [r2, #3]
	        	  today.Month = (RX_BUFFER[18] - '0') * 10 + (RX_BUFFER[19] - '0');
 8001528:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <main+0xbd4>)
 800152a:	7c9b      	ldrb	r3, [r3, #18]
 800152c:	461a      	mov	r2, r3
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <main+0xbd4>)
 800153a:	7cdb      	ldrb	r3, [r3, #19]
 800153c:	4413      	add	r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	3b10      	subs	r3, #16
 8001542:	b2d9      	uxtb	r1, r3
 8001544:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8001548:	f5a3 6231 	sub.w	r2, r3, #2832	; 0xb10
 800154c:	460b      	mov	r3, r1
 800154e:	7053      	strb	r3, [r2, #1]
	        	  today.Date = (RX_BUFFER[15] - '0') * 10 + (RX_BUFFER[16] - '0');
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <main+0xbd4>)
 8001552:	7bdb      	ldrb	r3, [r3, #15]
 8001554:	461a      	mov	r2, r3
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <main+0xbd4>)
 8001562:	7c1b      	ldrb	r3, [r3, #16]
 8001564:	4413      	add	r3, r2
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3b10      	subs	r3, #16
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8001570:	f5a3 6231 	sub.w	r2, r3, #2832	; 0xb10
 8001574:	460b      	mov	r3, r1
 8001576:	7093      	strb	r3, [r2, #2]
	        	  today.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001578:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 800157c:	f5a3 6231 	sub.w	r2, r3, #2832	; 0xb10
 8001580:	2302      	movs	r3, #2
 8001582:	7013      	strb	r3, [r2, #0]
	        	  HAL_RTC_SetDate(&hrtc, &today, RTC_FORMAT_BIN);
 8001584:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001588:	3b10      	subs	r3, #16
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	481a      	ldr	r0, [pc, #104]	; (80015f8 <main+0xbdc>)
 8001590:	f004 fbe7 	bl	8005d62 <HAL_RTC_SetDate>
	        	  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 8001594:	4a15      	ldr	r2, [pc, #84]	; (80015ec <main+0xbd0>)
 8001596:	2300      	movs	r3, #0
 8001598:	6013      	str	r3, [r2, #0]
			  }

	          //WRITING START
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'w' && RX_BUFFER[2] == 'O' && RX_BUFFER[3] == 'n' && RX_BUFFER[4] == ':')
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <main+0xbd0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d17e      	bne.n	80016a0 <main+0xc84>
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <main+0xbd4>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b7b      	cmp	r3, #123	; 0x7b
 80015a8:	d17a      	bne.n	80016a0 <main+0xc84>
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <main+0xbd4>)
 80015ac:	785b      	ldrb	r3, [r3, #1]
 80015ae:	2b77      	cmp	r3, #119	; 0x77
 80015b0:	d176      	bne.n	80016a0 <main+0xc84>
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <main+0xbd4>)
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	2b4f      	cmp	r3, #79	; 0x4f
 80015b8:	d172      	bne.n	80016a0 <main+0xc84>
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <main+0xbd4>)
 80015bc:	78db      	ldrb	r3, [r3, #3]
 80015be:	2b6e      	cmp	r3, #110	; 0x6e
 80015c0:	d16e      	bne.n	80016a0 <main+0xc84>
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <main+0xbd4>)
 80015c4:	791b      	ldrb	r3, [r3, #4]
 80015c6:	2b3a      	cmp	r3, #58	; 0x3a
 80015c8:	d16a      	bne.n	80016a0 <main+0xc84>
			  {
	        	  readFlag = 0;
 80015ca:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <main+0xbe0>)
 80015cc:	2300      	movs	r3, #0
 80015ce:	6013      	str	r3, [r2, #0]
	        	  writeFlag = 1;
 80015d0:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <main+0xbe4>)
 80015d2:	2301      	movs	r3, #1
 80015d4:	6013      	str	r3, [r2, #0]

				  i = 0;
 80015d6:	4a02      	ldr	r2, [pc, #8]	; (80015e0 <main+0xbc4>)
 80015d8:	2300      	movs	r3, #0
 80015da:	6013      	str	r3, [r2, #0]
				  while( RX_BUFFER[i]!='}'){
 80015dc:	e017      	b.n	800160e <main+0xbf2>
 80015de:	bf00      	nop
 80015e0:	200006bc 	.word	0x200006bc
 80015e4:	0800a97c 	.word	0x0800a97c
 80015e8:	0800a984 	.word	0x0800a984
 80015ec:	200006b8 	.word	0x200006b8
 80015f0:	200004c4 	.word	0x200004c4
 80015f4:	20000874 	.word	0x20000874
 80015f8:	20000094 	.word	0x20000094
 80015fc:	2000000c 	.word	0x2000000c
 8001600:	200006c8 	.word	0x200006c8
					  i++;
 8001604:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <main+0xd5c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <main+0xd5c>)
 800160c:	601a      	str	r2, [r3, #0]
				  while( RX_BUFFER[i]!='}'){
 800160e:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <main+0xd5c>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b5a      	ldr	r3, [pc, #360]	; (800177c <main+0xd60>)
 8001614:	5c9b      	ldrb	r3, [r3, r2]
 8001616:	2b7d      	cmp	r3, #125	; 0x7d
 8001618:	d1f4      	bne.n	8001604 <main+0xbe8>
				  }
				  nameSpaceCounter = i - 5;
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <main+0xd5c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	1f5a      	subs	r2, r3, #5
 8001620:	4b57      	ldr	r3, [pc, #348]	; (8001780 <main+0xd64>)
 8001622:	601a      	str	r2, [r3, #0]
				  memcpy(writeArrayDonor, RX_BUFFER + 5, MAX_NAME_LENGTH);	//copying the received buffer without beginning of packet "{wOn:"
 8001624:	4a57      	ldr	r2, [pc, #348]	; (8001784 <main+0xd68>)
 8001626:	4b58      	ldr	r3, [pc, #352]	; (8001788 <main+0xd6c>)
 8001628:	4615      	mov	r5, r2
 800162a:	461e      	mov	r6, r3
 800162c:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8001630:	4634      	mov	r4, r6
 8001632:	462b      	mov	r3, r5
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163e:	3510      	adds	r5, #16
 8001640:	3610      	adds	r6, #16
 8001642:	4565      	cmp	r5, ip
 8001644:	d1f4      	bne.n	8001630 <main+0xc14>
 8001646:	4632      	mov	r2, r6
 8001648:	462b      	mov	r3, r5
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	8013      	strh	r3, [r2, #0]
				  writeArrayDonor[nameSpaceCounter]=' ';	//getting rid of closing "}" in the packet
 800164e:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <main+0xd64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	494d      	ldr	r1, [pc, #308]	; (8001788 <main+0xd6c>)
 8001654:	2320      	movs	r3, #32
 8001656:	548b      	strb	r3, [r1, r2]
				  memcpy(writeArray1, writeArrayDonor, subArraySize);
 8001658:	4a4c      	ldr	r2, [pc, #304]	; (800178c <main+0xd70>)
 800165a:	4b4b      	ldr	r3, [pc, #300]	; (8001788 <main+0xd6c>)
 800165c:	4614      	mov	r4, r2
 800165e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001660:	c407      	stmia	r4!, {r0, r1, r2}
 8001662:	8023      	strh	r3, [r4, #0]
 8001664:	3402      	adds	r4, #2
 8001666:	0c1b      	lsrs	r3, r3, #16
 8001668:	7023      	strb	r3, [r4, #0]
				  memcpy(writeArray2, writeArrayDonor + subArraySize, subArraySize);
 800166a:	4a49      	ldr	r2, [pc, #292]	; (8001790 <main+0xd74>)
 800166c:	4b49      	ldr	r3, [pc, #292]	; (8001794 <main+0xd78>)
 800166e:	461c      	mov	r4, r3
 8001670:	4613      	mov	r3, r2
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	c407      	stmia	r4!, {r0, r1, r2}
 800167a:	899a      	ldrh	r2, [r3, #12]
 800167c:	7b9b      	ldrb	r3, [r3, #14]
 800167e:	8022      	strh	r2, [r4, #0]
 8001680:	70a3      	strb	r3, [r4, #2]
				  memcpy(writeArray3, writeArrayDonor + 2 * subArraySize, subArraySize);
 8001682:	4a45      	ldr	r2, [pc, #276]	; (8001798 <main+0xd7c>)
 8001684:	4b45      	ldr	r3, [pc, #276]	; (800179c <main+0xd80>)
 8001686:	461c      	mov	r4, r3
 8001688:	4613      	mov	r3, r2
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	c407      	stmia	r4!, {r0, r1, r2}
 8001692:	899a      	ldrh	r2, [r3, #12]
 8001694:	7b9b      	ldrb	r3, [r3, #14]
 8001696:	8022      	strh	r2, [r4, #0]
 8001698:	70a3      	strb	r3, [r4, #2]
				  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 800169a:	4a41      	ldr	r2, [pc, #260]	; (80017a0 <main+0xd84>)
 800169c:	2300      	movs	r3, #0
 800169e:	6013      	str	r3, [r2, #0]
			  }

	          //WRITING STOP
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'w' && RX_BUFFER[2] == 'r' && RX_BUFFER[3] == 'i' && RX_BUFFER[4] == 't' && RX_BUFFER[5] == 'e' && RX_BUFFER[6] == 'O' && RX_BUFFER[7] == 'f' && RX_BUFFER[8] == 'f' && RX_BUFFER[9] == '}')
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <main+0xd84>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d12d      	bne.n	8001704 <main+0xce8>
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <main+0xd60>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b7b      	cmp	r3, #123	; 0x7b
 80016ae:	d129      	bne.n	8001704 <main+0xce8>
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <main+0xd60>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	2b77      	cmp	r3, #119	; 0x77
 80016b6:	d125      	bne.n	8001704 <main+0xce8>
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <main+0xd60>)
 80016ba:	789b      	ldrb	r3, [r3, #2]
 80016bc:	2b72      	cmp	r3, #114	; 0x72
 80016be:	d121      	bne.n	8001704 <main+0xce8>
 80016c0:	4b2e      	ldr	r3, [pc, #184]	; (800177c <main+0xd60>)
 80016c2:	78db      	ldrb	r3, [r3, #3]
 80016c4:	2b69      	cmp	r3, #105	; 0x69
 80016c6:	d11d      	bne.n	8001704 <main+0xce8>
 80016c8:	4b2c      	ldr	r3, [pc, #176]	; (800177c <main+0xd60>)
 80016ca:	791b      	ldrb	r3, [r3, #4]
 80016cc:	2b74      	cmp	r3, #116	; 0x74
 80016ce:	d119      	bne.n	8001704 <main+0xce8>
 80016d0:	4b2a      	ldr	r3, [pc, #168]	; (800177c <main+0xd60>)
 80016d2:	795b      	ldrb	r3, [r3, #5]
 80016d4:	2b65      	cmp	r3, #101	; 0x65
 80016d6:	d115      	bne.n	8001704 <main+0xce8>
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <main+0xd60>)
 80016da:	799b      	ldrb	r3, [r3, #6]
 80016dc:	2b4f      	cmp	r3, #79	; 0x4f
 80016de:	d111      	bne.n	8001704 <main+0xce8>
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <main+0xd60>)
 80016e2:	79db      	ldrb	r3, [r3, #7]
 80016e4:	2b66      	cmp	r3, #102	; 0x66
 80016e6:	d10d      	bne.n	8001704 <main+0xce8>
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <main+0xd60>)
 80016ea:	7a1b      	ldrb	r3, [r3, #8]
 80016ec:	2b66      	cmp	r3, #102	; 0x66
 80016ee:	d109      	bne.n	8001704 <main+0xce8>
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <main+0xd60>)
 80016f2:	7a5b      	ldrb	r3, [r3, #9]
 80016f4:	2b7d      	cmp	r3, #125	; 0x7d
 80016f6:	d105      	bne.n	8001704 <main+0xce8>
	          {
	        	  writeFlag = 0;
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <main+0xd88>)
 80016fa:	2300      	movs	r3, #0
 80016fc:	6013      	str	r3, [r2, #0]
	        	  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 80016fe:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <main+0xd84>)
 8001700:	2300      	movs	r3, #0
 8001702:	6013      	str	r3, [r2, #0]
	          }

	          //HISTORY OUTPUT
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'h' && RX_BUFFER[2] == 'i' && RX_BUFFER[3] == 's' && RX_BUFFER[4] == 't' && RX_BUFFER[5] == 'o' && RX_BUFFER[6] == 'r' && RX_BUFFER[7] == 'y' && RX_BUFFER[8] == '}')
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <main+0xd84>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	f040 8096 	bne.w	800183a <main+0xe1e>
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <main+0xd60>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b7b      	cmp	r3, #123	; 0x7b
 8001714:	f040 8091 	bne.w	800183a <main+0xe1e>
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <main+0xd60>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	2b68      	cmp	r3, #104	; 0x68
 800171e:	f040 808c 	bne.w	800183a <main+0xe1e>
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <main+0xd60>)
 8001724:	789b      	ldrb	r3, [r3, #2]
 8001726:	2b69      	cmp	r3, #105	; 0x69
 8001728:	f040 8087 	bne.w	800183a <main+0xe1e>
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <main+0xd60>)
 800172e:	78db      	ldrb	r3, [r3, #3]
 8001730:	2b73      	cmp	r3, #115	; 0x73
 8001732:	f040 8082 	bne.w	800183a <main+0xe1e>
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <main+0xd60>)
 8001738:	791b      	ldrb	r3, [r3, #4]
 800173a:	2b74      	cmp	r3, #116	; 0x74
 800173c:	d17d      	bne.n	800183a <main+0xe1e>
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <main+0xd60>)
 8001740:	795b      	ldrb	r3, [r3, #5]
 8001742:	2b6f      	cmp	r3, #111	; 0x6f
 8001744:	d179      	bne.n	800183a <main+0xe1e>
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <main+0xd60>)
 8001748:	799b      	ldrb	r3, [r3, #6]
 800174a:	2b72      	cmp	r3, #114	; 0x72
 800174c:	d175      	bne.n	800183a <main+0xe1e>
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <main+0xd60>)
 8001750:	79db      	ldrb	r3, [r3, #7]
 8001752:	2b79      	cmp	r3, #121	; 0x79
 8001754:	d171      	bne.n	800183a <main+0xe1e>
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <main+0xd60>)
 8001758:	7a1b      	ldrb	r3, [r3, #8]
 800175a:	2b7d      	cmp	r3, #125	; 0x7d
 800175c:	d16d      	bne.n	800183a <main+0xe1e>
	        	  */


	        	  //sendEncryptedData("HistoryStart");

	        	  sendEncryptedData("HistoryStart");
 800175e:	4812      	ldr	r0, [pc, #72]	; (80017a8 <main+0xd8c>)
 8001760:	f7ff f81a 	bl	8000798 <sendEncryptedData>
	        	  HAL_Delay(50);
 8001764:	2032      	movs	r0, #50	; 0x32
 8001766:	f002 fae5 	bl	8003d34 <HAL_Delay>
	        	  for (int v = 0; v < historyEntranceCounter; v++) {
 800176a:	2300      	movs	r3, #0
 800176c:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001770:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e051      	b.n	800181c <main+0xe00>
 8001778:	200006bc 	.word	0x200006bc
 800177c:	200004c4 	.word	0x200004c4
 8001780:	200006c0 	.word	0x200006c0
 8001784:	200004c9 	.word	0x200004c9
 8001788:	2000026c 	.word	0x2000026c
 800178c:	200002a0 	.word	0x200002a0
 8001790:	2000027b 	.word	0x2000027b
 8001794:	200002b0 	.word	0x200002b0
 8001798:	2000028a 	.word	0x2000028a
 800179c:	200002c0 	.word	0x200002c0
 80017a0:	200006b8 	.word	0x200006b8
 80017a4:	200006c8 	.word	0x200006c8
 80017a8:	0800a990 	.word	0x0800a990
	        	      char buffer[MAX_NAME_LENGTH + TIMESTAMP_LENGTH + 1]; // +1 for null terminator

	        	      // Concatenate names and timeStamps into the buffer
	        	      snprintf(buffer, sizeof(buffer), "h:%s%s", myHistory[v].names, myHistory[v].timeStamps);
 80017ac:	f507 41c6 	add.w	r1, r7, #25344	; 0x6300
 80017b0:	f101 0148 	add.w	r1, r1, #72	; 0x48
 80017b4:	390c      	subs	r1, #12
 80017b6:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 80017ba:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2346      	movs	r3, #70	; 0x46
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	18cc      	adds	r4, r1, r3
 80017c8:	f507 41c6 	add.w	r1, r7, #25344	; 0x6300
 80017cc:	f101 0148 	add.w	r1, r1, #72	; 0x48
 80017d0:	390c      	subs	r1, #12
 80017d2:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 80017d6:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2346      	movs	r3, #70	; 0x46
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	3330      	adds	r3, #48	; 0x30
 80017e4:	440b      	add	r3, r1
 80017e6:	3302      	adds	r3, #2
 80017e8:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80017ec:	38e0      	subs	r0, #224	; 0xe0
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4623      	mov	r3, r4
 80017f2:	4aa3      	ldr	r2, [pc, #652]	; (8001a80 <main+0x1064>)
 80017f4:	2147      	movs	r1, #71	; 0x47
 80017f6:	f007 fb6d 	bl	8008ed4 <sniprintf>

	        	      // Transmit the concatenated string
	        	      sendEncryptedData(buffer);
 80017fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80017fe:	3be0      	subs	r3, #224	; 0xe0
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe ffc9 	bl	8000798 <sendEncryptedData>
	        	  for (int v = 0; v < historyEntranceCounter; v++) {
 8001806:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 800180a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001816:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b99      	ldr	r3, [pc, #612]	; (8001a84 <main+0x1068>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001824:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4293      	cmp	r3, r2
 800182c:	dbbe      	blt.n	80017ac <main+0xd90>
	        	  }
	        	  sendEncryptedData("HistoryEnd");
 800182e:	4896      	ldr	r0, [pc, #600]	; (8001a88 <main+0x106c>)
 8001830:	f7fe ffb2 	bl	8000798 <sendEncryptedData>





				  	  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 8001834:	4a95      	ldr	r2, [pc, #596]	; (8001a8c <main+0x1070>)
 8001836:	2300      	movs	r3, #0
 8001838:	6013      	str	r3, [r2, #0]
			  }

	          //PASSWORD CHECKING
              //BUT NOT ONLY WE RECEIVE THE PUBLIC KEY, WE ALSO SEND BACK OUT STM PUBLIC KEY, WE EXCHANGE
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'p' && RX_BUFFER[2] == 'a' && RX_BUFFER[3] == 's' && RX_BUFFER[4] == 's' && RX_BUFFER[5] == 'w' && RX_BUFFER[6] == 'o' && RX_BUFFER[7] == 'r' && RX_BUFFER[8] == 'd' && RX_BUFFER[9] == ':')
 800183a:	4b94      	ldr	r3, [pc, #592]	; (8001a8c <main+0x1070>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d16b      	bne.n	800191a <main+0xefe>
 8001842:	4b93      	ldr	r3, [pc, #588]	; (8001a90 <main+0x1074>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b7b      	cmp	r3, #123	; 0x7b
 8001848:	d167      	bne.n	800191a <main+0xefe>
 800184a:	4b91      	ldr	r3, [pc, #580]	; (8001a90 <main+0x1074>)
 800184c:	785b      	ldrb	r3, [r3, #1]
 800184e:	2b70      	cmp	r3, #112	; 0x70
 8001850:	d163      	bne.n	800191a <main+0xefe>
 8001852:	4b8f      	ldr	r3, [pc, #572]	; (8001a90 <main+0x1074>)
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	2b61      	cmp	r3, #97	; 0x61
 8001858:	d15f      	bne.n	800191a <main+0xefe>
 800185a:	4b8d      	ldr	r3, [pc, #564]	; (8001a90 <main+0x1074>)
 800185c:	78db      	ldrb	r3, [r3, #3]
 800185e:	2b73      	cmp	r3, #115	; 0x73
 8001860:	d15b      	bne.n	800191a <main+0xefe>
 8001862:	4b8b      	ldr	r3, [pc, #556]	; (8001a90 <main+0x1074>)
 8001864:	791b      	ldrb	r3, [r3, #4]
 8001866:	2b73      	cmp	r3, #115	; 0x73
 8001868:	d157      	bne.n	800191a <main+0xefe>
 800186a:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <main+0x1074>)
 800186c:	795b      	ldrb	r3, [r3, #5]
 800186e:	2b77      	cmp	r3, #119	; 0x77
 8001870:	d153      	bne.n	800191a <main+0xefe>
 8001872:	4b87      	ldr	r3, [pc, #540]	; (8001a90 <main+0x1074>)
 8001874:	799b      	ldrb	r3, [r3, #6]
 8001876:	2b6f      	cmp	r3, #111	; 0x6f
 8001878:	d14f      	bne.n	800191a <main+0xefe>
 800187a:	4b85      	ldr	r3, [pc, #532]	; (8001a90 <main+0x1074>)
 800187c:	79db      	ldrb	r3, [r3, #7]
 800187e:	2b72      	cmp	r3, #114	; 0x72
 8001880:	d14b      	bne.n	800191a <main+0xefe>
 8001882:	4b83      	ldr	r3, [pc, #524]	; (8001a90 <main+0x1074>)
 8001884:	7a1b      	ldrb	r3, [r3, #8]
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d147      	bne.n	800191a <main+0xefe>
 800188a:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <main+0x1074>)
 800188c:	7a5b      	ldrb	r3, [r3, #9]
 800188e:	2b3a      	cmp	r3, #58	; 0x3a
 8001890:	d143      	bne.n	800191a <main+0xefe>
	          {
	        	  if(RX_BUFFER[10] == '1' && RX_BUFFER[11] == '1' && RX_BUFFER[12] == '1'){
 8001892:	4b7f      	ldr	r3, [pc, #508]	; (8001a90 <main+0x1074>)
 8001894:	7a9b      	ldrb	r3, [r3, #10]
 8001896:	2b31      	cmp	r3, #49	; 0x31
 8001898:	d122      	bne.n	80018e0 <main+0xec4>
 800189a:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <main+0x1074>)
 800189c:	7adb      	ldrb	r3, [r3, #11]
 800189e:	2b31      	cmp	r3, #49	; 0x31
 80018a0:	d11e      	bne.n	80018e0 <main+0xec4>
 80018a2:	4b7b      	ldr	r3, [pc, #492]	; (8001a90 <main+0x1074>)
 80018a4:	7b1b      	ldrb	r3, [r3, #12]
 80018a6:	2b31      	cmp	r3, #49	; 0x31
 80018a8:	d11a      	bne.n	80018e0 <main+0xec4>
	        		  char buffer2[50];
	        		  sprintf(buffer2, "pass_correct,read:%d,write:%d\n",readFlag,writeFlag);
 80018aa:	4b7a      	ldr	r3, [pc, #488]	; (8001a94 <main+0x1078>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <main+0x107c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80018b6:	38e0      	subs	r0, #224	; 0xe0
 80018b8:	4978      	ldr	r1, [pc, #480]	; (8001a9c <main+0x1080>)
 80018ba:	f007 fb3f 	bl	8008f3c <siprintf>
	        		  HAL_UART_Transmit(&huart1, (void*)buffer2, strlen(buffer2), 1000);
 80018be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018c2:	3be0      	subs	r3, #224	; 0xe0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fc8d 	bl	80001e4 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80018d2:	39e0      	subs	r1, #224	; 0xe0
 80018d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d8:	4871      	ldr	r0, [pc, #452]	; (8001aa0 <main+0x1084>)
 80018da:	f005 fc8d 	bl	80071f8 <HAL_UART_Transmit>
	        	  if(RX_BUFFER[10] == '1' && RX_BUFFER[11] == '1' && RX_BUFFER[12] == '1'){
 80018de:	e019      	b.n	8001914 <main+0xef8>
	        	  }else{
	        		  char buffer2[] = "pass_incorrect\n";
 80018e0:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 80018e4:	f5a3 6332 	sub.w	r3, r3, #2848	; 0xb20
 80018e8:	4a6e      	ldr	r2, [pc, #440]	; (8001aa4 <main+0x1088>)
 80018ea:	461c      	mov	r4, r3
 80018ec:	4613      	mov	r3, r2
 80018ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        		  HAL_UART_Transmit(&huart1, (void*)buffer2, strlen(buffer2), 1000);
 80018f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018f8:	3b20      	subs	r3, #32
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fc72 	bl	80001e4 <strlen>
 8001900:	4603      	mov	r3, r0
 8001902:	b29a      	uxth	r2, r3
 8001904:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001908:	3920      	subs	r1, #32
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	4864      	ldr	r0, [pc, #400]	; (8001aa0 <main+0x1084>)
 8001910:	f005 fc72 	bl	80071f8 <HAL_UART_Transmit>
	        	  }
	        	  newMessageFlag = 0;		//ensures that the code executed by bluetooth message is executed only once
 8001914:	4a5d      	ldr	r2, [pc, #372]	; (8001a8c <main+0x1070>)
 8001916:	2300      	movs	r3, #0
 8001918:	6013      	str	r3, [r2, #0]
	          }

	          //THIS if handles recieved message with the components of a public key received from android application - modulus and exponent
	          if(newMessageFlag == 1 && RX_BUFFER[0] == '{' && RX_BUFFER[1] == 'e' && RX_BUFFER[2] == '1' && RX_BUFFER[3] == ':')
 800191a:	4b5c      	ldr	r3, [pc, #368]	; (8001a8c <main+0x1070>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	f040 8237 	bne.w	8001d92 <main+0x1376>
 8001924:	4b5a      	ldr	r3, [pc, #360]	; (8001a90 <main+0x1074>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b7b      	cmp	r3, #123	; 0x7b
 800192a:	f040 8232 	bne.w	8001d92 <main+0x1376>
 800192e:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <main+0x1074>)
 8001930:	785b      	ldrb	r3, [r3, #1]
 8001932:	2b65      	cmp	r3, #101	; 0x65
 8001934:	f040 822d 	bne.w	8001d92 <main+0x1376>
 8001938:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <main+0x1074>)
 800193a:	789b      	ldrb	r3, [r3, #2]
 800193c:	2b31      	cmp	r3, #49	; 0x31
 800193e:	f040 8228 	bne.w	8001d92 <main+0x1376>
 8001942:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <main+0x1074>)
 8001944:	78db      	ldrb	r3, [r3, #3]
 8001946:	2b3a      	cmp	r3, #58	; 0x3a
 8001948:	f040 8223 	bne.w	8001d92 <main+0x1376>
	          {
	              char *endptr;

	              // Extract e1 and e2
	              char e1_str[20], e2_str[20];	//we need to devide the number into two because it is often far larger then max capacity of long int so there are errors, so we devide them during transition and combine again here
	              int i = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001952:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001956:	6013      	str	r3, [r2, #0]
	              while (RX_BUFFER[i] != 'e') {
 8001958:	e00a      	b.n	8001970 <main+0xf54>
	                  i++;
 800195a:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 800195e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 800196a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800196e:	6013      	str	r3, [r2, #0]
	              while (RX_BUFFER[i] != 'e') {
 8001970:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <main+0x1074>)
 8001972:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001976:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b65      	cmp	r3, #101	; 0x65
 8001982:	d1ea      	bne.n	800195a <main+0xf3e>
	              }
	              sscanf(RX_BUFFER + i, "e1:%[^e]e2:%[^m]", e1_str, e2_str);	//writing our two parts of exponent into two variables
 8001984:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001988:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <main+0x1074>)
 8001990:	18d0      	adds	r0, r2, r3
 8001992:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001996:	3b4c      	subs	r3, #76	; 0x4c
 8001998:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800199c:	3a38      	subs	r2, #56	; 0x38
 800199e:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <main+0x108c>)
 80019a0:	f007 faec 	bl	8008f7c <siscanf>
	              // Calculate multiplier for e2 only if it's not empty
				  long long multiplier_e2 = 1;
 80019a4:	f04f 0201 	mov.w	r2, #1
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 80019b0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80019b4:	e9c1 2300 	strd	r2, r3, [r1]

				  for (int k = 0; k < strlen(e2_str); k++) {	//computing by how much to multiply second number for it to be right after first one
 80019b8:	2300      	movs	r3, #0
 80019ba:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 80019be:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e02e      	b.n	8001a24 <main+0x1008>
					  multiplier_e2 *= 10;
 80019c6:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 80019ca:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80019ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019d2:	4622      	mov	r2, r4
 80019d4:	462b      	mov	r3, r5
 80019d6:	f04f 0000 	mov.w	r0, #0
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	0099      	lsls	r1, r3, #2
 80019e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019e4:	0090      	lsls	r0, r2, #2
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	eb12 0804 	adds.w	r8, r2, r4
 80019ee:	eb43 0905 	adc.w	r9, r3, r5
 80019f2:	eb18 0308 	adds.w	r3, r8, r8
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	eb49 0309 	adc.w	r3, r9, r9
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a02:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001a06:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001a0a:	e9c3 8900 	strd	r8, r9, [r3]
				  for (int k = 0; k < strlen(e2_str); k++) {	//computing by how much to multiply second number for it to be right after first one
 8001a0e:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001a12:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001a1e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001a28:	3b4c      	subs	r3, #76	; 0x4c
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fbda 	bl	80001e4 <strlen>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001a36:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8c2      	bhi.n	80019c6 <main+0xfaa>
				  }
				  if(strlen(e2_str) > 6){	//if second number is absent than we just print the first one alone
 8001a40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001a44:	3b4c      	subs	r3, #76	; 0x4c
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fbcc 	bl	80001e4 <strlen>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d930      	bls.n	8001ab4 <main+0x1098>
					  pubAPP->exponent = numberpe = strtoll(e1_str, &endptr, 10);	//writing only the first part of exponent into our public key structure if there is only one part
 8001a52:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001a56:	3924      	subs	r1, #36	; 0x24
 8001a58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001a5c:	3b38      	subs	r3, #56	; 0x38
 8001a5e:	220a      	movs	r2, #10
 8001a60:	4618      	mov	r0, r3
 8001a62:	f007 f891 	bl	8008b88 <strtoll>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4910      	ldr	r1, [pc, #64]	; (8001aac <main+0x1090>)
 8001a6c:	e9c1 2300 	strd	r2, r3, [r1]
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <main+0x1090>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	490e      	ldr	r1, [pc, #56]	; (8001ab0 <main+0x1094>)
 8001a78:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001a7c:	e062      	b.n	8001b44 <main+0x1128>
 8001a7e:	bf00      	nop
 8001a80:	0800a9a0 	.word	0x0800a9a0
 8001a84:	200006c4 	.word	0x200006c4
 8001a88:	0800a9a8 	.word	0x0800a9a8
 8001a8c:	200006b8 	.word	0x200006b8
 8001a90:	200004c4 	.word	0x200004c4
 8001a94:	2000000c 	.word	0x2000000c
 8001a98:	200006c8 	.word	0x200006c8
 8001a9c:	0800a9b4 	.word	0x0800a9b4
 8001aa0:	20000168 	.word	0x20000168
 8001aa4:	0800aaac 	.word	0x0800aaac
 8001aa8:	0800a9d4 	.word	0x0800a9d4
 8001aac:	20000a48 	.word	0x20000a48
 8001ab0:	20000a38 	.word	0x20000a38
				  }else{
					  pubAPP->exponent = numberpe = strtoll(e1_str, &endptr, 10) * multiplier_e2 + strtoll(e2_str, &endptr, 10);	//writing into that structures both parts if second one exists
 8001ab4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001ab8:	3924      	subs	r1, #36	; 0x24
 8001aba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001abe:	3b38      	subs	r3, #56	; 0x38
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f007 f860 	bl	8008b88 <strtoll>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 8001ad0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8001ad4:	6809      	ldr	r1, [r1, #0]
 8001ad6:	fb03 f001 	mul.w	r0, r3, r1
 8001ada:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 8001ade:	f101 0134 	add.w	r1, r1, #52	; 0x34
 8001ae2:	6809      	ldr	r1, [r1, #0]
 8001ae4:	fb02 f101 	mul.w	r1, r2, r1
 8001ae8:	4408      	add	r0, r1
 8001aea:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 8001aee:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8001af2:	6809      	ldr	r1, [r1, #0]
 8001af4:	fba1 2302 	umull	r2, r3, r1, r2
 8001af8:	667b      	str	r3, [r7, #100]	; 0x64
 8001afa:	4613      	mov	r3, r2
 8001afc:	663b      	str	r3, [r7, #96]	; 0x60
 8001afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b00:	18c3      	adds	r3, r0, r3
 8001b02:	667b      	str	r3, [r7, #100]	; 0x64
 8001b04:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001b08:	3924      	subs	r1, #36	; 0x24
 8001b0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b0e:	3b4c      	subs	r3, #76	; 0x4c
 8001b10:	220a      	movs	r2, #10
 8001b12:	4618      	mov	r0, r3
 8001b14:	f007 f838 	bl	8008b88 <strtoll>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b20:	4621      	mov	r1, r4
 8001b22:	1889      	adds	r1, r1, r2
 8001b24:	6439      	str	r1, [r7, #64]	; 0x40
 8001b26:	4629      	mov	r1, r5
 8001b28:	eb41 0303 	adc.w	r3, r1, r3
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b2e:	4ba3      	ldr	r3, [pc, #652]	; (8001dbc <main+0x13a0>)
 8001b30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001b34:	e9c3 1200 	strd	r1, r2, [r3]
 8001b38:	4ba0      	ldr	r3, [pc, #640]	; (8001dbc <main+0x13a0>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	49a0      	ldr	r1, [pc, #640]	; (8001dc0 <main+0x13a4>)
 8001b40:	e9c1 2302 	strd	r2, r3, [r1, #8]
				  }


	              // Extract m1 and m2
	              char m1_str[20], m2_str[20];
	              i = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001b4a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001b4e:	6013      	str	r3, [r2, #0]
	              while (RX_BUFFER[i] != 'm') {
 8001b50:	e00a      	b.n	8001b68 <main+0x114c>
	                  i++;
 8001b52:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001b56:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001b62:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001b66:	6013      	str	r3, [r2, #0]
	              while (RX_BUFFER[i] != 'm') {
 8001b68:	4a96      	ldr	r2, [pc, #600]	; (8001dc4 <main+0x13a8>)
 8001b6a:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001b6e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b6d      	cmp	r3, #109	; 0x6d
 8001b7a:	d1ea      	bne.n	8001b52 <main+0x1136>
	              }
	              sscanf(RX_BUFFER + i, "m1:%[^m]m2:%[^}]", m1_str, m2_str);
 8001b7c:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001b80:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b8f      	ldr	r3, [pc, #572]	; (8001dc4 <main+0x13a8>)
 8001b88:	18d0      	adds	r0, r2, r3
 8001b8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b8e:	3b74      	subs	r3, #116	; 0x74
 8001b90:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001b94:	3a60      	subs	r2, #96	; 0x60
 8001b96:	498c      	ldr	r1, [pc, #560]	; (8001dc8 <main+0x13ac>)
 8001b98:	f007 f9f0 	bl	8008f7c <siscanf>

	              // Calculate multiplier for m2
	              long long multiplier_m2 = 1;
 8001b9c:	f04f 0201 	mov.w	r2, #1
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 8001ba8:	f101 0120 	add.w	r1, r1, #32
 8001bac:	e9c1 2300 	strd	r2, r3, [r1]
	              for (int j = 0; j < strlen(m2_str); j++) {
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001bb6:	f102 021c 	add.w	r2, r2, #28
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e02e      	b.n	8001c1c <main+0x1200>
	                  multiplier_m2 *= 10;
 8001bbe:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001bc2:	f103 0320 	add.w	r3, r3, #32
 8001bc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001bca:	4622      	mov	r2, r4
 8001bcc:	462b      	mov	r3, r5
 8001bce:	f04f 0000 	mov.w	r0, #0
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	0099      	lsls	r1, r3, #2
 8001bd8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001bdc:	0090      	lsls	r0, r2, #2
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	eb12 0a04 	adds.w	sl, r2, r4
 8001be6:	eb43 0b05 	adc.w	fp, r3, r5
 8001bea:	eb1a 030a 	adds.w	r3, sl, sl
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	eb4b 030b 	adc.w	r3, fp, fp
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001bfa:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001bfe:	f103 0320 	add.w	r3, r3, #32
 8001c02:	e9c3 ab00 	strd	sl, fp, [r3]
	              for (int j = 0; j < strlen(m2_str); j++) {
 8001c06:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001c0a:	f103 031c 	add.w	r3, r3, #28
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001c16:	f102 021c 	add.w	r2, r2, #28
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001c20:	3b74      	subs	r3, #116	; 0x74
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fade 	bl	80001e4 <strlen>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001c2e:	f103 031c 	add.w	r3, r3, #28
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8c2      	bhi.n	8001bbe <main+0x11a2>
	              }
	              if(strlen(m2_str) > 6){
 8001c38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001c3c:	3b74      	subs	r3, #116	; 0x74
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fad0 	bl	80001e4 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d90f      	bls.n	8001c6a <main+0x124e>
	            	  pubAPP->modulus = strtoll(m1_str, &endptr, 10);
 8001c4a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001c4e:	3924      	subs	r1, #36	; 0x24
 8001c50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001c54:	3b60      	subs	r3, #96	; 0x60
 8001c56:	220a      	movs	r2, #10
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f006 ff95 	bl	8008b88 <strtoll>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4957      	ldr	r1, [pc, #348]	; (8001dc0 <main+0x13a4>)
 8001c64:	e9c1 2300 	strd	r2, r3, [r1]
 8001c68:	e041      	b.n	8001cee <main+0x12d2>
	              }else{
	            	  pubAPP->modulus = strtoll(m1_str, &endptr, 10) * multiplier_m2 + strtoll(m2_str, &endptr, 10);
 8001c6a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001c6e:	3924      	subs	r1, #36	; 0x24
 8001c70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001c74:	3b60      	subs	r3, #96	; 0x60
 8001c76:	220a      	movs	r2, #10
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 ff85 	bl	8008b88 <strtoll>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 8001c86:	f101 0120 	add.w	r1, r1, #32
 8001c8a:	6809      	ldr	r1, [r1, #0]
 8001c8c:	fb03 f001 	mul.w	r0, r3, r1
 8001c90:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 8001c94:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8001c98:	6809      	ldr	r1, [r1, #0]
 8001c9a:	fb02 f101 	mul.w	r1, r2, r1
 8001c9e:	4408      	add	r0, r1
 8001ca0:	f507 416c 	add.w	r1, r7, #60416	; 0xec00
 8001ca4:	f101 0120 	add.w	r1, r1, #32
 8001ca8:	6809      	ldr	r1, [r1, #0]
 8001caa:	fba1 2302 	umull	r2, r3, r1, r2
 8001cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb6:	18c3      	adds	r3, r0, r3
 8001cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cba:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001cbe:	3924      	subs	r1, #36	; 0x24
 8001cc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001cc4:	3b74      	subs	r3, #116	; 0x74
 8001cc6:	220a      	movs	r2, #10
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 ff5d 	bl	8008b88 <strtoll>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	1889      	adds	r1, r1, r2
 8001cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cdc:	4629      	mov	r1, r5
 8001cde:	eb41 0303 	adc.w	r3, r1, r3
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <main+0x13a4>)
 8001ce6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001cea:	e9c3 1200 	strd	r1, r2, [r3]
	              }

	              HAL_Delay(100);
 8001cee:	2064      	movs	r0, #100	; 0x64
 8001cf0:	f002 f820 	bl	8003d34 <HAL_Delay>

	              //BUT NOT ONLY WE RECEIVE THE PUBLIC KEY, WE ALSO SEND BACK OUT STM PUBLIC KEY, WE EXCHANGE
				strcpy(bufferForOutput, "key{e:");
 8001cf4:	4a35      	ldr	r2, [pc, #212]	; (8001dcc <main+0x13b0>)
 8001cf6:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <main+0x13b4>)
 8001cf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cfc:	6010      	str	r0, [r2, #0]
 8001cfe:	3204      	adds	r2, #4
 8001d00:	8011      	strh	r1, [r2, #0]
 8001d02:	3202      	adds	r2, #2
 8001d04:	0c0b      	lsrs	r3, r1, #16
 8001d06:	7013      	strb	r3, [r2, #0]
				HAL_UART_Transmit(&huart1, (void*)bufferForOutput, strlen(bufferForOutput), 1000);
 8001d08:	4830      	ldr	r0, [pc, #192]	; (8001dcc <main+0x13b0>)
 8001d0a:	f7fe fa6b 	bl	80001e4 <strlen>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d16:	492d      	ldr	r1, [pc, #180]	; (8001dcc <main+0x13b0>)
 8001d18:	482e      	ldr	r0, [pc, #184]	; (8001dd4 <main+0x13b8>)
 8001d1a:	f005 fa6d 	bl	80071f8 <HAL_UART_Transmit>
				sprintf(bufferForOutput, "%lu", pubSTM->exponent);
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <main+0x13bc>)
 8001d20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d24:	492d      	ldr	r1, [pc, #180]	; (8001ddc <main+0x13c0>)
 8001d26:	4829      	ldr	r0, [pc, #164]	; (8001dcc <main+0x13b0>)
 8001d28:	f007 f908 	bl	8008f3c <siprintf>
				HAL_UART_Transmit(&huart1, (void*)bufferForOutput, strlen(bufferForOutput), 1000);
 8001d2c:	4827      	ldr	r0, [pc, #156]	; (8001dcc <main+0x13b0>)
 8001d2e:	f7fe fa59 	bl	80001e4 <strlen>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3a:	4924      	ldr	r1, [pc, #144]	; (8001dcc <main+0x13b0>)
 8001d3c:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <main+0x13b8>)
 8001d3e:	f005 fa5b 	bl	80071f8 <HAL_UART_Transmit>
				strcpy(bufferForOutput, "m:");
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <main+0x13b0>)
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <main+0x13c4>)
 8001d46:	6819      	ldr	r1, [r3, #0]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	8013      	strh	r3, [r2, #0]
 8001d4c:	3202      	adds	r2, #2
 8001d4e:	0c0b      	lsrs	r3, r1, #16
 8001d50:	7013      	strb	r3, [r2, #0]
				HAL_UART_Transmit(&huart1, (void*)bufferForOutput, strlen(bufferForOutput), 1000);
 8001d52:	481e      	ldr	r0, [pc, #120]	; (8001dcc <main+0x13b0>)
 8001d54:	f7fe fa46 	bl	80001e4 <strlen>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d60:	491a      	ldr	r1, [pc, #104]	; (8001dcc <main+0x13b0>)
 8001d62:	481c      	ldr	r0, [pc, #112]	; (8001dd4 <main+0x13b8>)
 8001d64:	f005 fa48 	bl	80071f8 <HAL_UART_Transmit>
				sprintf(bufferForOutput, "%lu}\n", pubSTM->modulus);
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <main+0x13bc>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	491d      	ldr	r1, [pc, #116]	; (8001de4 <main+0x13c8>)
 8001d70:	4816      	ldr	r0, [pc, #88]	; (8001dcc <main+0x13b0>)
 8001d72:	f007 f8e3 	bl	8008f3c <siprintf>
				HAL_UART_Transmit(&huart1, (void*)bufferForOutput, strlen(bufferForOutput), 1000);
 8001d76:	4815      	ldr	r0, [pc, #84]	; (8001dcc <main+0x13b0>)
 8001d78:	f7fe fa34 	bl	80001e4 <strlen>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d84:	4911      	ldr	r1, [pc, #68]	; (8001dcc <main+0x13b0>)
 8001d86:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <main+0x13b8>)
 8001d88:	f005 fa36 	bl	80071f8 <HAL_UART_Transmit>




	              newMessageFlag = 0;
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <main+0x13cc>)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	6013      	str	r3, [r2, #0]
	          }

	          //THIS if handles all incoming encrypted messages and decrypts them
	          if(newMessageFlag == 1 && RX_BUFFER[0] == 'm' && RX_BUFFER[1] == ':')
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <main+0x13cc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	f47e aef9 	bne.w	8000b8e <main+0x172>
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <main+0x13a8>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b6d      	cmp	r3, #109	; 0x6d
 8001da2:	f47e aef4 	bne.w	8000b8e <main+0x172>
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <main+0x13a8>)
 8001da8:	785b      	ldrb	r3, [r3, #1]
 8001daa:	2b3a      	cmp	r3, #58	; 0x3a
 8001dac:	f47e aeef 	bne.w	8000b8e <main+0x172>
	          {
 8001db0:	466b      	mov	r3, sp
 8001db2:	607b      	str	r3, [r7, #4]

	        	  i = 0;
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <main+0x13d0>)
 8001db6:	2300      	movs	r3, #0
 8001db8:	6013      	str	r3, [r2, #0]
				  while( RX_BUFFER[i]!='}'){
 8001dba:	e01e      	b.n	8001dfa <main+0x13de>
 8001dbc:	20000a48 	.word	0x20000a48
 8001dc0:	20000a38 	.word	0x20000a38
 8001dc4:	200004c4 	.word	0x200004c4
 8001dc8:	0800a9e8 	.word	0x0800a9e8
 8001dcc:	200006cc 	.word	0x200006cc
 8001dd0:	0800a9fc 	.word	0x0800a9fc
 8001dd4:	20000168 	.word	0x20000168
 8001dd8:	20000a18 	.word	0x20000a18
 8001ddc:	0800aa04 	.word	0x0800aa04
 8001de0:	0800a8b0 	.word	0x0800a8b0
 8001de4:	0800aa08 	.word	0x0800aa08
 8001de8:	200006b8 	.word	0x200006b8
 8001dec:	200006bc 	.word	0x200006bc
					  i++;
 8001df0:	4bbe      	ldr	r3, [pc, #760]	; (80020ec <main+0x16d0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	4bbd      	ldr	r3, [pc, #756]	; (80020ec <main+0x16d0>)
 8001df8:	601a      	str	r2, [r3, #0]
				  while( RX_BUFFER[i]!='}'){
 8001dfa:	4bbc      	ldr	r3, [pc, #752]	; (80020ec <main+0x16d0>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4bbc      	ldr	r3, [pc, #752]	; (80020f0 <main+0x16d4>)
 8001e00:	5c9b      	ldrb	r3, [r3, r2]
 8001e02:	2b7d      	cmp	r3, #125	; 0x7d
 8001e04:	d1f4      	bne.n	8001df0 <main+0x13d4>
				  }
				  nameSpaceCounter = i - 2;
 8001e06:	4bb9      	ldr	r3, [pc, #740]	; (80020ec <main+0x16d0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	1e9a      	subs	r2, r3, #2
 8001e0c:	4bb9      	ldr	r3, [pc, #740]	; (80020f4 <main+0x16d8>)
 8001e0e:	601a      	str	r2, [r3, #0]

				  uint8_t encodedMessageBuffer[nameSpaceCounter]; //here i write incoming encoded messages
 8001e10:	4bb8      	ldr	r3, [pc, #736]	; (80020f4 <main+0x16d8>)
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	1e4b      	subs	r3, r1, #1
 8001e16:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001e1a:	f102 0208 	add.w	r2, r2, #8
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	460a      	mov	r2, r1
 8001e22:	2300      	movs	r3, #0
 8001e24:	633a      	str	r2, [r7, #48]	; 0x30
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e34:	4628      	mov	r0, r5
 8001e36:	00c3      	lsls	r3, r0, #3
 8001e38:	4620      	mov	r0, r4
 8001e3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e3e:	4620      	mov	r0, r4
 8001e40:	00c2      	lsls	r2, r0, #3
 8001e42:	460a      	mov	r2, r1
 8001e44:	2300      	movs	r3, #0
 8001e46:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001e56:	4628      	mov	r0, r5
 8001e58:	00c3      	lsls	r3, r0, #3
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e60:	4620      	mov	r0, r4
 8001e62:	00c2      	lsls	r2, r0, #3
 8001e64:	460b      	mov	r3, r1
 8001e66:	3307      	adds	r3, #7
 8001e68:	08db      	lsrs	r3, r3, #3
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	ebad 0d03 	sub.w	sp, sp, r3
 8001e70:	ab04      	add	r3, sp, #16
 8001e72:	3300      	adds	r3, #0
 8001e74:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001e78:	f102 0204 	add.w	r2, r2, #4
 8001e7c:	6013      	str	r3, [r2, #0]
				  memcpy(encodedMessageBuffer, RX_BUFFER + 2, nameSpaceCounter);	//copying the received buffer without beginning of packet "{wOn:"
 8001e7e:	499e      	ldr	r1, [pc, #632]	; (80020f8 <main+0x16dc>)
 8001e80:	4b9c      	ldr	r3, [pc, #624]	; (80020f4 <main+0x16d8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001e8a:	f103 0304 	add.w	r3, r3, #4
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f007 fa49 	bl	8009326 <memcpy>
				  //encodedMessageBuffer[nameSpaceCounter]=' ';	//getting rid of closing "}" in the packet


				  size_t arraySize = strlen(encodedMessageBuffer) / 10;
 8001e94:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001e98:	f103 0304 	add.w	r3, r3, #4
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	f7fe f9a1 	bl	80001e4 <strlen>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b95      	ldr	r3, [pc, #596]	; (80020fc <main+0x16e0>)
 8001ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eaa:	08db      	lsrs	r3, r3, #3
 8001eac:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001eb0:	6013      	str	r3, [r2, #0]


				  size_t numElements;
				  long long *encryptedMessage = extractNumbers(RX_BUFFER, &numElements);
 8001eb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001eb6:	3b78      	subs	r3, #120	; 0x78
 8001eb8:	4619      	mov	r1, r3
 8001eba:	488d      	ldr	r0, [pc, #564]	; (80020f0 <main+0x16d4>)
 8001ebc:	f7fe fd18 	bl	80008f0 <extractNumbers>
 8001ec0:	f507 436b 	add.w	r3, r7, #60160	; 0xeb00
 8001ec4:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 8001ec8:	6018      	str	r0, [r3, #0]

				  decryptedMessage = rsa_decrypt(encryptedMessage, 24*sizeof(encryptedMessage), privSTM);
 8001eca:	4a8d      	ldr	r2, [pc, #564]	; (8002100 <main+0x16e4>)
 8001ecc:	2160      	movs	r1, #96	; 0x60
 8001ece:	f507 436b 	add.w	r3, r7, #60160	; 0xeb00
 8001ed2:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	f001 f832 	bl	8002f40 <rsa_decrypt>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <main+0x16e8>)
 8001ee0:	601a      	str	r2, [r3, #0]

				  for(int i=0; i<20; i++){
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001ee8:	f102 0218 	add.w	r2, r2, #24
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01c      	b.n	8001f2a <main+0x150e>
					  testBigBuffer[i]=decryptedMessage[i];
 8001ef0:	4b84      	ldr	r3, [pc, #528]	; (8002104 <main+0x16e8>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001ef8:	f103 0318 	add.w	r3, r3, #24
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	7819      	ldrb	r1, [r3, #0]
 8001f02:	4a81      	ldr	r2, [pc, #516]	; (8002108 <main+0x16ec>)
 8001f04:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001f08:	f103 0318 	add.w	r3, r3, #24
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	441a      	add	r2, r3
 8001f10:	460b      	mov	r3, r1
 8001f12:	7013      	strb	r3, [r2, #0]
				  for(int i=0; i<20; i++){
 8001f14:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001f18:	f103 0318 	add.w	r3, r3, #24
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8001f24:	f102 0218 	add.w	r2, r2, #24
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8001f2e:	f103 0318 	add.w	r3, r3, #24
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b13      	cmp	r3, #19
 8001f36:	dddb      	ble.n	8001ef0 <main+0x14d4>
				  }


				  testlen = strncmp("readOn", decryptedMessage, 6);
 8001f38:	4b72      	ldr	r3, [pc, #456]	; (8002104 <main+0x16e8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2206      	movs	r2, #6
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4872      	ldr	r0, [pc, #456]	; (800210c <main+0x16f0>)
 8001f42:	f007 f929 	bl	8009198 <strncmp>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b71      	ldr	r3, [pc, #452]	; (8002110 <main+0x16f4>)
 8001f4a:	601a      	str	r2, [r3, #0]
				  if(strncmp("openDoor", decryptedMessage, 8) == 0){
 8001f4c:	4b6d      	ldr	r3, [pc, #436]	; (8002104 <main+0x16e8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2208      	movs	r2, #8
 8001f52:	4619      	mov	r1, r3
 8001f54:	486f      	ldr	r0, [pc, #444]	; (8002114 <main+0x16f8>)
 8001f56:	f007 f91f 	bl	8009198 <strncmp>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d111      	bne.n	8001f84 <main+0x1568>
					  sendEncryptedData("opening door");
 8001f60:	486d      	ldr	r0, [pc, #436]	; (8002118 <main+0x16fc>)
 8001f62:	f7fe fc19 	bl	8000798 <sendEncryptedData>
					  HAL_GPIO_WritePin(GPIOB, Bluetooth_LED_Pin, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	2110      	movs	r1, #16
 8001f6a:	486c      	ldr	r0, [pc, #432]	; (800211c <main+0x1700>)
 8001f6c:	f002 fa40 	bl	80043f0 <HAL_GPIO_WritePin>
					  HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f74:	f001 fede 	bl	8003d34 <HAL_Delay>
					  HAL_GPIO_WritePin(GPIOB, Bluetooth_LED_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	4867      	ldr	r0, [pc, #412]	; (800211c <main+0x1700>)
 8001f7e:	f002 fa37 	bl	80043f0 <HAL_GPIO_WritePin>
 8001f82:	e2e7      	b.n	8002554 <main+0x1b38>
				  }else if(strncmp("readOn", decryptedMessage, 6) == 0){
 8001f84:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <main+0x16e8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2206      	movs	r2, #6
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	485f      	ldr	r0, [pc, #380]	; (800210c <main+0x16f0>)
 8001f8e:	f007 f903 	bl	8009198 <strncmp>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d109      	bne.n	8001fac <main+0x1590>
					  sendEncryptedData("starting reading");
 8001f98:	4861      	ldr	r0, [pc, #388]	; (8002120 <main+0x1704>)
 8001f9a:	f7fe fbfd 	bl	8000798 <sendEncryptedData>
					  readFlag = 1;
 8001f9e:	4a61      	ldr	r2, [pc, #388]	; (8002124 <main+0x1708>)
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]
					  writeFlag = 0;
 8001fa4:	4a60      	ldr	r2, [pc, #384]	; (8002128 <main+0x170c>)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e2d3      	b.n	8002554 <main+0x1b38>
				  }else if(strncmp("readOff", decryptedMessage, 7) == 0){
 8001fac:	4b55      	ldr	r3, [pc, #340]	; (8002104 <main+0x16e8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	485d      	ldr	r0, [pc, #372]	; (800212c <main+0x1710>)
 8001fb6:	f007 f8ef 	bl	8009198 <strncmp>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <main+0x15b2>
					  sendEncryptedData("stopping reading");
 8001fc0:	485b      	ldr	r0, [pc, #364]	; (8002130 <main+0x1714>)
 8001fc2:	f7fe fbe9 	bl	8000798 <sendEncryptedData>
					  readFlag = 0;
 8001fc6:	4a57      	ldr	r2, [pc, #348]	; (8002124 <main+0x1708>)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e2c2      	b.n	8002554 <main+0x1b38>
				  }else if(strncmp("syncUser", decryptedMessage, 8) == 0){
 8001fce:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <main+0x16e8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4857      	ldr	r0, [pc, #348]	; (8002134 <main+0x1718>)
 8001fd8:	f007 f8de 	bl	8009198 <strncmp>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 80de 	bne.w	80021a0 <main+0x1784>
					  char buffer1[] = "usr:";
 8001fe4:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8001fe8:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
 8001fec:	4952      	ldr	r1, [pc, #328]	; (8002138 <main+0x171c>)
 8001fee:	461a      	mov	r2, r3
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ff6:	6010      	str	r0, [r2, #0]
 8001ff8:	3204      	adds	r2, #4
 8001ffa:	7011      	strb	r1, [r2, #0]
					  HAL_UART_Transmit(&huart1, (void*)buffer1, strlen(buffer1), 1000);
 8001ffc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002000:	3b80      	subs	r3, #128	; 0x80
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe f8ee 	bl	80001e4 <strlen>
 8002008:	4603      	mov	r3, r0
 800200a:	b29a      	uxth	r2, r3
 800200c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8002010:	3980      	subs	r1, #128	; 0x80
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	4849      	ldr	r0, [pc, #292]	; (800213c <main+0x1720>)
 8002018:	f005 f8ee 	bl	80071f8 <HAL_UART_Transmit>
					  for(i = 0; i < myNames.count; i++){
 800201c:	4a33      	ldr	r2, [pc, #204]	; (80020ec <main+0x16d0>)
 800201e:	2300      	movs	r3, #0
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e037      	b.n	8002094 <main+0x1678>
						  HAL_UART_Transmit(&huart1, (void*)myNames.names[i], strlen(myNames.names[i]), 1000);
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <main+0x16d0>)
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800202c:	3ab8      	subs	r2, #184	; 0xb8
 800202e:	2332      	movs	r3, #50	; 0x32
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	18d4      	adds	r4, r2, r3
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <main+0x16d0>)
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800203e:	3ab8      	subs	r2, #184	; 0xb8
 8002040:	2332      	movs	r3, #50	; 0x32
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f8cb 	bl	80001e4 <strlen>
 800204e:	4603      	mov	r3, r0
 8002050:	b29a      	uxth	r2, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	4621      	mov	r1, r4
 8002058:	4838      	ldr	r0, [pc, #224]	; (800213c <main+0x1720>)
 800205a:	f005 f8cd 	bl	80071f8 <HAL_UART_Transmit>
						  char buffer[] = " ";
 800205e:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8002062:	f6a3 3288 	subw	r2, r3, #2952	; 0xb88
 8002066:	2320      	movs	r3, #32
 8002068:	8013      	strh	r3, [r2, #0]
						  HAL_UART_Transmit(&huart1, (void*)buffer, strlen(buffer), 1000);
 800206a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800206e:	3b88      	subs	r3, #136	; 0x88
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe f8b7 	bl	80001e4 <strlen>
 8002076:	4603      	mov	r3, r0
 8002078:	b29a      	uxth	r2, r3
 800207a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800207e:	3988      	subs	r1, #136	; 0x88
 8002080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002084:	482d      	ldr	r0, [pc, #180]	; (800213c <main+0x1720>)
 8002086:	f005 f8b7 	bl	80071f8 <HAL_UART_Transmit>
					  for(i = 0; i < myNames.count; i++){
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <main+0x16d0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <main+0x16d0>)
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8002098:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 800209c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80020a0:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <main+0x16d0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8bb      	bhi.n	8002024 <main+0x1608>
					  }
					  char buffer2[] = "\n";
 80020ac:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 80020b0:	f6a3 3284 	subw	r2, r3, #2948	; 0xb84
 80020b4:	230a      	movs	r3, #10
 80020b6:	8013      	strh	r3, [r2, #0]
					  HAL_UART_Transmit(&huart1, (void*)buffer2, strlen(buffer2), 1000);
 80020b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020bc:	3b84      	subs	r3, #132	; 0x84
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f890 	bl	80001e4 <strlen>
 80020c4:	4603      	mov	r3, r0
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80020cc:	3984      	subs	r1, #132	; 0x84
 80020ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d2:	481a      	ldr	r0, [pc, #104]	; (800213c <main+0x1720>)
 80020d4:	f005 f890 	bl	80071f8 <HAL_UART_Transmit>



					  sendEncryptedData("UsersStart");
 80020d8:	4819      	ldr	r0, [pc, #100]	; (8002140 <main+0x1724>)
 80020da:	f7fe fb5d 	bl	8000798 <sendEncryptedData>
					  HAL_Delay(50);
 80020de:	2032      	movs	r0, #50	; 0x32
 80020e0:	f001 fe28 	bl	8003d34 <HAL_Delay>
					  for(i = 0; i < myNames.count; i++){
 80020e4:	4a01      	ldr	r2, [pc, #4]	; (80020ec <main+0x16d0>)
 80020e6:	2300      	movs	r3, #0
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e046      	b.n	800217a <main+0x175e>
 80020ec:	200006bc 	.word	0x200006bc
 80020f0:	200004c4 	.word	0x200004c4
 80020f4:	200006c0 	.word	0x200006c0
 80020f8:	200004c6 	.word	0x200004c6
 80020fc:	cccccccd 	.word	0xcccccccd
 8002100:	20000a28 	.word	0x20000a28
 8002104:	20000a10 	.word	0x20000a10
 8002108:	20000880 	.word	0x20000880
 800210c:	0800aa10 	.word	0x0800aa10
 8002110:	20000874 	.word	0x20000874
 8002114:	0800aa18 	.word	0x0800aa18
 8002118:	0800a938 	.word	0x0800a938
 800211c:	48000400 	.word	0x48000400
 8002120:	0800a948 	.word	0x0800a948
 8002124:	2000000c 	.word	0x2000000c
 8002128:	200006c8 	.word	0x200006c8
 800212c:	0800aa24 	.word	0x0800aa24
 8002130:	0800a95c 	.word	0x0800a95c
 8002134:	0800aa2c 	.word	0x0800aa2c
 8002138:	0800aaa4 	.word	0x0800aaa4
 800213c:	20000168 	.word	0x20000168
 8002140:	0800a970 	.word	0x0800a970
						  char buffer[MAX_NAME_LENGTH + TIMESTAMP_LENGTH + 1]; // +1 for null terminator

						  // Concatenate names and timeStamps into the buffer
						  snprintf(buffer, sizeof(buffer), "u:%s ", myNames.names[i]);
 8002144:	4bab      	ldr	r3, [pc, #684]	; (80023f4 <main+0x19d8>)
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800214c:	3ab8      	subs	r2, #184	; 0xb8
 800214e:	2332      	movs	r3, #50	; 0x32
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800215a:	38e0      	subs	r0, #224	; 0xe0
 800215c:	4aa6      	ldr	r2, [pc, #664]	; (80023f8 <main+0x19dc>)
 800215e:	2147      	movs	r1, #71	; 0x47
 8002160:	f006 feb8 	bl	8008ed4 <sniprintf>

						  // Transmit the concatenated string
						  sendEncryptedData(buffer);
 8002164:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002168:	3be0      	subs	r3, #224	; 0xe0
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fb14 	bl	8000798 <sendEncryptedData>
					  for(i = 0; i < myNames.count; i++){
 8002170:	4ba0      	ldr	r3, [pc, #640]	; (80023f4 <main+0x19d8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	4b9f      	ldr	r3, [pc, #636]	; (80023f4 <main+0x19d8>)
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 800217e:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 8002182:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8002186:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800218a:	4b9a      	ldr	r3, [pc, #616]	; (80023f4 <main+0x19d8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d8d8      	bhi.n	8002144 <main+0x1728>
					  }
					  HAL_Delay(50);
 8002192:	2032      	movs	r0, #50	; 0x32
 8002194:	f001 fdce 	bl	8003d34 <HAL_Delay>
					  sendEncryptedData("UsersEnd");
 8002198:	4898      	ldr	r0, [pc, #608]	; (80023fc <main+0x19e0>)
 800219a:	f7fe fafd 	bl	8000798 <sendEncryptedData>
 800219e:	e1d9      	b.n	8002554 <main+0x1b38>
				  }else if(strncmp("history", decryptedMessage, 7) == 0){
 80021a0:	4b97      	ldr	r3, [pc, #604]	; (8002400 <main+0x19e4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2207      	movs	r2, #7
 80021a6:	4619      	mov	r1, r3
 80021a8:	4896      	ldr	r0, [pc, #600]	; (8002404 <main+0x19e8>)
 80021aa:	f006 fff5 	bl	8009198 <strncmp>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d154      	bne.n	800225e <main+0x1842>
					  sendEncryptedData("HistoryStart");
 80021b4:	4894      	ldr	r0, [pc, #592]	; (8002408 <main+0x19ec>)
 80021b6:	f7fe faef 	bl	8000798 <sendEncryptedData>
					  HAL_Delay(50);
 80021ba:	2032      	movs	r0, #50	; 0x32
 80021bc:	f001 fdba 	bl	8003d34 <HAL_Delay>
					  for (int v = 0; v < historyEntranceCounter; v++) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 80021c6:	f102 0214 	add.w	r2, r2, #20
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	e037      	b.n	800223e <main+0x1822>
						  char buffer[MAX_NAME_LENGTH + TIMESTAMP_LENGTH + 1]; // +1 for null terminator

						  // Concatenate names and timeStamps into the buffer
						  snprintf(buffer, sizeof(buffer), "h:%s%s", myHistory[v].names, myHistory[v].timeStamps);
 80021ce:	f507 41c6 	add.w	r1, r7, #25344	; 0x6300
 80021d2:	f101 0148 	add.w	r1, r1, #72	; 0x48
 80021d6:	390c      	subs	r1, #12
 80021d8:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 80021dc:	f103 0314 	add.w	r3, r3, #20
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2346      	movs	r3, #70	; 0x46
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	18cc      	adds	r4, r1, r3
 80021ea:	f507 41c6 	add.w	r1, r7, #25344	; 0x6300
 80021ee:	f101 0148 	add.w	r1, r1, #72	; 0x48
 80021f2:	390c      	subs	r1, #12
 80021f4:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 80021f8:	f103 0314 	add.w	r3, r3, #20
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2346      	movs	r3, #70	; 0x46
 8002200:	fb02 f303 	mul.w	r3, r2, r3
 8002204:	3330      	adds	r3, #48	; 0x30
 8002206:	440b      	add	r3, r1
 8002208:	3302      	adds	r3, #2
 800220a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800220e:	38e0      	subs	r0, #224	; 0xe0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	4623      	mov	r3, r4
 8002214:	4a7d      	ldr	r2, [pc, #500]	; (800240c <main+0x19f0>)
 8002216:	2147      	movs	r1, #71	; 0x47
 8002218:	f006 fe5c 	bl	8008ed4 <sniprintf>

						  // Transmit the concatenated string
						  sendEncryptedData(buffer);
 800221c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002220:	3be0      	subs	r3, #224	; 0xe0
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fab8 	bl	8000798 <sendEncryptedData>
					  for (int v = 0; v < historyEntranceCounter; v++) {
 8002228:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 800222c:	f103 0314 	add.w	r3, r3, #20
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	f507 426c 	add.w	r2, r7, #60416	; 0xec00
 8002238:	f102 0214 	add.w	r2, r2, #20
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b74      	ldr	r3, [pc, #464]	; (8002410 <main+0x19f4>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f507 436c 	add.w	r3, r7, #60416	; 0xec00
 8002246:	f103 0314 	add.w	r3, r3, #20
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4293      	cmp	r3, r2
 800224e:	dbbe      	blt.n	80021ce <main+0x17b2>
					  }
					  HAL_Delay(50);
 8002250:	2032      	movs	r0, #50	; 0x32
 8002252:	f001 fd6f 	bl	8003d34 <HAL_Delay>
					  sendEncryptedData("HistoryEnd");
 8002256:	486f      	ldr	r0, [pc, #444]	; (8002414 <main+0x19f8>)
 8002258:	f7fe fa9e 	bl	8000798 <sendEncryptedData>
 800225c:	e17a      	b.n	8002554 <main+0x1b38>
				  }else if(strncmp("add:", decryptedMessage, 4) == 0){
 800225e:	4b68      	ldr	r3, [pc, #416]	; (8002400 <main+0x19e4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2204      	movs	r2, #4
 8002264:	4619      	mov	r1, r3
 8002266:	486c      	ldr	r0, [pc, #432]	; (8002418 <main+0x19fc>)
 8002268:	f006 ff96 	bl	8009198 <strncmp>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d120      	bne.n	80022b4 <main+0x1898>

					  i = 0;
 8002272:	4a60      	ldr	r2, [pc, #384]	; (80023f4 <main+0x19d8>)
 8002274:	2300      	movs	r3, #0
 8002276:	6013      	str	r3, [r2, #0]
					  while( decryptedMessage[i]!='}'){
 8002278:	e004      	b.n	8002284 <main+0x1868>
						  i++;
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <main+0x19d8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <main+0x19d8>)
 8002282:	601a      	str	r2, [r3, #0]
					  while( decryptedMessage[i]!='}'){
 8002284:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <main+0x19e4>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <main+0x19d8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4413      	add	r3, r2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b7d      	cmp	r3, #125	; 0x7d
 8002292:	d1f2      	bne.n	800227a <main+0x185e>
					  }
					  nameSpaceCounter = i - 4;
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <main+0x19d8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	1f1a      	subs	r2, r3, #4
 800229a:	4b60      	ldr	r3, [pc, #384]	; (800241c <main+0x1a00>)
 800229c:	601a      	str	r2, [r3, #0]
					  addName(&myNames, decryptedMessage, 4, nameSpaceCounter);	//nameSpaceCounter is length of the name and 5 is index where the name starts in buffer
 800229e:	4b58      	ldr	r3, [pc, #352]	; (8002400 <main+0x19e4>)
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	4b5e      	ldr	r3, [pc, #376]	; (800241c <main+0x1a00>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f507 7012 	add.w	r0, r7, #584	; 0x248
 80022aa:	38b8      	subs	r0, #184	; 0xb8
 80022ac:	2204      	movs	r2, #4
 80022ae:	f7fe f9e3 	bl	8000678 <addName>
 80022b2:	e14f      	b.n	8002554 <main+0x1b38>

				  }else if(strncmp("Dlt:", decryptedMessage, 4) == 0){
 80022b4:	4b52      	ldr	r3, [pc, #328]	; (8002400 <main+0x19e4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2204      	movs	r2, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4858      	ldr	r0, [pc, #352]	; (8002420 <main+0x1a04>)
 80022be:	f006 ff6b 	bl	8009198 <strncmp>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d172      	bne.n	80023ae <main+0x1992>
 80022c8:	466b      	mov	r3, sp
 80022ca:	461c      	mov	r4, r3
					  i = 0;
 80022cc:	4a49      	ldr	r2, [pc, #292]	; (80023f4 <main+0x19d8>)
 80022ce:	2300      	movs	r3, #0
 80022d0:	6013      	str	r3, [r2, #0]
					  while( decryptedMessage[i]!='}'){
 80022d2:	e004      	b.n	80022de <main+0x18c2>
						  i++;
 80022d4:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <main+0x19d8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <main+0x19d8>)
 80022dc:	601a      	str	r2, [r3, #0]
					  while( decryptedMessage[i]!='}'){
 80022de:	4b48      	ldr	r3, [pc, #288]	; (8002400 <main+0x19e4>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <main+0x19d8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b7d      	cmp	r3, #125	; 0x7d
 80022ec:	d1f2      	bne.n	80022d4 <main+0x18b8>
					  }
					  nameSpaceCounter = i - 4;
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <main+0x19d8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	1f1a      	subs	r2, r3, #4
 80022f4:	4b49      	ldr	r3, [pc, #292]	; (800241c <main+0x1a00>)
 80022f6:	601a      	str	r2, [r3, #0]
					  uint8_t nameToDelete[nameSpaceCounter + 1];  // +1 for null-terminator
 80022f8:	4b48      	ldr	r3, [pc, #288]	; (800241c <main+0x1a00>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c59      	adds	r1, r3, #1
 80022fe:	1e4b      	subs	r3, r1, #1
 8002300:	f507 426b 	add.w	r2, r7, #60160	; 0xeb00
 8002304:	f102 02f8 	add.w	r2, r2, #248	; 0xf8
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	460a      	mov	r2, r1
 800230c:	2300      	movs	r3, #0
 800230e:	623a      	str	r2, [r7, #32]
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800231e:	4630      	mov	r0, r6
 8002320:	00c3      	lsls	r3, r0, #3
 8002322:	4628      	mov	r0, r5
 8002324:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002328:	4628      	mov	r0, r5
 800232a:	00c2      	lsls	r2, r0, #3
 800232c:	460a      	mov	r2, r1
 800232e:	2300      	movs	r3, #0
 8002330:	61ba      	str	r2, [r7, #24]
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8002340:	4630      	mov	r0, r6
 8002342:	00c3      	lsls	r3, r0, #3
 8002344:	4628      	mov	r0, r5
 8002346:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800234a:	4628      	mov	r0, r5
 800234c:	00c2      	lsls	r2, r0, #3
 800234e:	460b      	mov	r3, r1
 8002350:	3307      	adds	r3, #7
 8002352:	08db      	lsrs	r3, r3, #3
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	ebad 0d03 	sub.w	sp, sp, r3
 800235a:	ab04      	add	r3, sp, #16
 800235c:	3300      	adds	r3, #0
 800235e:	f507 426b 	add.w	r2, r7, #60160	; 0xeb00
 8002362:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 8002366:	6013      	str	r3, [r2, #0]
					  memcpy(nameToDelete, decryptedMessage + 4, nameSpaceCounter);
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <main+0x19e4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1d19      	adds	r1, r3, #4
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <main+0x1a00>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	f507 436b 	add.w	r3, r7, #60160	; 0xeb00
 8002378:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f006 ffd2 	bl	8009326 <memcpy>
					  nameToDelete[nameSpaceCounter] = '\0';  // Null-terminate the string
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <main+0x1a00>)
 8002384:	6819      	ldr	r1, [r3, #0]
 8002386:	f507 436b 	add.w	r3, r7, #60160	; 0xeb00
 800238a:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2300      	movs	r3, #0
 8002392:	5453      	strb	r3, [r2, r1]
					  deleteName(&myNames, nameToDelete);
 8002394:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002398:	3bb8      	subs	r3, #184	; 0xb8
 800239a:	f507 426b 	add.w	r2, r7, #60160	; 0xeb00
 800239e:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 80023a2:	6811      	ldr	r1, [r2, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f9a7 	bl	80006f8 <deleteName>
 80023aa:	46a5      	mov	sp, r4
 80023ac:	e0d2      	b.n	8002554 <main+0x1b38>
				  }else if(strncmp("writeOff", decryptedMessage, 8) == 0){
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <main+0x19e4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2208      	movs	r2, #8
 80023b4:	4619      	mov	r1, r3
 80023b6:	481b      	ldr	r0, [pc, #108]	; (8002424 <main+0x1a08>)
 80023b8:	f006 feee 	bl	8009198 <strncmp>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d103      	bne.n	80023ca <main+0x19ae>
					  writeFlag = 0;
 80023c2:	4a19      	ldr	r2, [pc, #100]	; (8002428 <main+0x1a0c>)
 80023c4:	2300      	movs	r3, #0
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e0c4      	b.n	8002554 <main+0x1b38>
				  }else if(strncmp("wOn:", decryptedMessage, 4) == 0){
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <main+0x19e4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2204      	movs	r2, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4816      	ldr	r0, [pc, #88]	; (800242c <main+0x1a10>)
 80023d4:	f006 fee0 	bl	8009198 <strncmp>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d17a      	bne.n	80024d4 <main+0x1ab8>
					  readFlag = 0;
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <main+0x1a14>)
 80023e0:	2300      	movs	r3, #0
 80023e2:	6013      	str	r3, [r2, #0]
					  writeFlag = 1;
 80023e4:	4a10      	ldr	r2, [pc, #64]	; (8002428 <main+0x1a0c>)
 80023e6:	2301      	movs	r3, #1
 80023e8:	6013      	str	r3, [r2, #0]

					  i = 0;
 80023ea:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <main+0x19d8>)
 80023ec:	2300      	movs	r3, #0
 80023ee:	6013      	str	r3, [r2, #0]
					  while( decryptedMessage[i]!='}'){
 80023f0:	e025      	b.n	800243e <main+0x1a22>
 80023f2:	bf00      	nop
 80023f4:	200006bc 	.word	0x200006bc
 80023f8:	0800a97c 	.word	0x0800a97c
 80023fc:	0800a984 	.word	0x0800a984
 8002400:	20000a10 	.word	0x20000a10
 8002404:	0800aa38 	.word	0x0800aa38
 8002408:	0800a990 	.word	0x0800a990
 800240c:	0800a9a0 	.word	0x0800a9a0
 8002410:	200006c4 	.word	0x200006c4
 8002414:	0800a9a8 	.word	0x0800a9a8
 8002418:	0800aa40 	.word	0x0800aa40
 800241c:	200006c0 	.word	0x200006c0
 8002420:	0800aa48 	.word	0x0800aa48
 8002424:	0800aa50 	.word	0x0800aa50
 8002428:	200006c8 	.word	0x200006c8
 800242c:	0800aa5c 	.word	0x0800aa5c
 8002430:	2000000c 	.word	0x2000000c
						  i++;
 8002434:	4b51      	ldr	r3, [pc, #324]	; (800257c <main+0x1b60>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	4b50      	ldr	r3, [pc, #320]	; (800257c <main+0x1b60>)
 800243c:	601a      	str	r2, [r3, #0]
					  while( decryptedMessage[i]!='}'){
 800243e:	4b50      	ldr	r3, [pc, #320]	; (8002580 <main+0x1b64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b4e      	ldr	r3, [pc, #312]	; (800257c <main+0x1b60>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b7d      	cmp	r3, #125	; 0x7d
 800244c:	d1f2      	bne.n	8002434 <main+0x1a18>
					  }
					  nameSpaceCounter = i - 4;
 800244e:	4b4b      	ldr	r3, [pc, #300]	; (800257c <main+0x1b60>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1f1a      	subs	r2, r3, #4
 8002454:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <main+0x1b68>)
 8002456:	601a      	str	r2, [r3, #0]
					  memcpy(writeArrayDonor, decryptedMessage + 4, MAX_NAME_LENGTH);	//copying the received buffer without beginning of packet "{wOn:"
 8002458:	4b49      	ldr	r3, [pc, #292]	; (8002580 <main+0x1b64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3304      	adds	r3, #4
 800245e:	4a4a      	ldr	r2, [pc, #296]	; (8002588 <main+0x1b6c>)
 8002460:	461d      	mov	r5, r3
 8002462:	4616      	mov	r6, r2
 8002464:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8002468:	4634      	mov	r4, r6
 800246a:	462b      	mov	r3, r5
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002476:	3510      	adds	r5, #16
 8002478:	3610      	adds	r6, #16
 800247a:	4565      	cmp	r5, ip
 800247c:	d1f4      	bne.n	8002468 <main+0x1a4c>
 800247e:	4632      	mov	r2, r6
 8002480:	462b      	mov	r3, r5
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	8013      	strh	r3, [r2, #0]
					  writeArrayDonor[nameSpaceCounter]=' ';	//getting rid of closing "}" in the packet
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <main+0x1b68>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	493f      	ldr	r1, [pc, #252]	; (8002588 <main+0x1b6c>)
 800248c:	2320      	movs	r3, #32
 800248e:	548b      	strb	r3, [r1, r2]
					  memcpy(writeArray1, writeArrayDonor, subArraySize);
 8002490:	4a3e      	ldr	r2, [pc, #248]	; (800258c <main+0x1b70>)
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <main+0x1b6c>)
 8002494:	4614      	mov	r4, r2
 8002496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002498:	c407      	stmia	r4!, {r0, r1, r2}
 800249a:	8023      	strh	r3, [r4, #0]
 800249c:	3402      	adds	r4, #2
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	7023      	strb	r3, [r4, #0]
					  memcpy(writeArray2, writeArrayDonor + subArraySize, subArraySize);
 80024a2:	4a3b      	ldr	r2, [pc, #236]	; (8002590 <main+0x1b74>)
 80024a4:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <main+0x1b78>)
 80024a6:	461c      	mov	r4, r3
 80024a8:	4613      	mov	r3, r2
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	c407      	stmia	r4!, {r0, r1, r2}
 80024b2:	899a      	ldrh	r2, [r3, #12]
 80024b4:	7b9b      	ldrb	r3, [r3, #14]
 80024b6:	8022      	strh	r2, [r4, #0]
 80024b8:	70a3      	strb	r3, [r4, #2]
					  memcpy(writeArray3, writeArrayDonor + 2 * subArraySize, subArraySize);
 80024ba:	4a37      	ldr	r2, [pc, #220]	; (8002598 <main+0x1b7c>)
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <main+0x1b80>)
 80024be:	461c      	mov	r4, r3
 80024c0:	4613      	mov	r3, r2
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	c407      	stmia	r4!, {r0, r1, r2}
 80024ca:	899a      	ldrh	r2, [r3, #12]
 80024cc:	7b9b      	ldrb	r3, [r3, #14]
 80024ce:	8022      	strh	r2, [r4, #0]
 80024d0:	70a3      	strb	r3, [r4, #2]
 80024d2:	e03f      	b.n	8002554 <main+0x1b38>
				  }else if(strncmp("pass:", decryptedMessage, 5) == 0){
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <main+0x1b64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2205      	movs	r2, #5
 80024da:	4619      	mov	r1, r3
 80024dc:	4830      	ldr	r0, [pc, #192]	; (80025a0 <main+0x1b84>)
 80024de:	f006 fe5b 	bl	8009198 <strncmp>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d135      	bne.n	8002554 <main+0x1b38>
					  if(decryptedMessage[5] == '1' && decryptedMessage[6] == '1' && decryptedMessage[7] == '1'){
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <main+0x1b64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3305      	adds	r3, #5
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b31      	cmp	r3, #49	; 0x31
 80024f2:	d11c      	bne.n	800252e <main+0x1b12>
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <main+0x1b64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3306      	adds	r3, #6
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b31      	cmp	r3, #49	; 0x31
 80024fe:	d116      	bne.n	800252e <main+0x1b12>
 8002500:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <main+0x1b64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3307      	adds	r3, #7
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b31      	cmp	r3, #49	; 0x31
 800250a:	d110      	bne.n	800252e <main+0x1b12>
						  char buffer2[50];
						  sprintf(buffer2, "pass_correct,read:%d,write:%d",readFlag,writeFlag);
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <main+0x1b88>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <main+0x1b8c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8002518:	38e0      	subs	r0, #224	; 0xe0
 800251a:	4924      	ldr	r1, [pc, #144]	; (80025ac <main+0x1b90>)
 800251c:	f006 fd0e 	bl	8008f3c <siprintf>
						  sendEncryptedData(buffer2);
 8002520:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002524:	3be0      	subs	r3, #224	; 0xe0
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f936 	bl	8000798 <sendEncryptedData>
					  if(decryptedMessage[5] == '1' && decryptedMessage[6] == '1' && decryptedMessage[7] == '1'){
 800252c:	e012      	b.n	8002554 <main+0x1b38>
					  }else{
						  char buffer2[] = "pass_incorrect";
 800252e:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8002532:	f6a3 3398 	subw	r3, r3, #2968	; 0xb98
 8002536:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <main+0x1b94>)
 8002538:	461c      	mov	r4, r3
 800253a:	4613      	mov	r3, r2
 800253c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800253e:	c407      	stmia	r4!, {r0, r1, r2}
 8002540:	8023      	strh	r3, [r4, #0]
 8002542:	3402      	adds	r4, #2
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	7023      	strb	r3, [r4, #0]
						  sendEncryptedData(buffer2);
 8002548:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800254c:	3b98      	subs	r3, #152	; 0x98
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f922 	bl	8000798 <sendEncryptedData>





				  free(encryptedMessage);
 8002554:	f507 436b 	add.w	r3, r7, #60160	; 0xeb00
 8002558:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	f006 f9cd 	bl	80088fc <free>
				  free(decryptedMessage);
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <main+0x1b64>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f006 f9c8 	bl	80088fc <free>



	        	  newMessageFlag = 0;
 800256c:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <main+0x1b98>)
 800256e:	2300      	movs	r3, #0
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002576:	f7fe bb0a 	b.w	8000b8e <main+0x172>
 800257a:	bf00      	nop
 800257c:	200006bc 	.word	0x200006bc
 8002580:	20000a10 	.word	0x20000a10
 8002584:	200006c0 	.word	0x200006c0
 8002588:	2000026c 	.word	0x2000026c
 800258c:	200002a0 	.word	0x200002a0
 8002590:	2000027b 	.word	0x2000027b
 8002594:	200002b0 	.word	0x200002b0
 8002598:	2000028a 	.word	0x2000028a
 800259c:	200002c0 	.word	0x200002c0
 80025a0:	0800aa64 	.word	0x0800aa64
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	200006c8 	.word	0x200006c8
 80025ac:	0800aa6c 	.word	0x0800aa6c
 80025b0:	0800aabc 	.word	0x0800aabc
 80025b4:	200006b8 	.word	0x200006b8

080025b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b096      	sub	sp, #88	; 0x58
 80025bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	2244      	movs	r2, #68	; 0x44
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f006 fdde 	bl	8009188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025cc:	463b      	mov	r3, r7
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80025da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025de:	f001 ff2d 	bl	800443c <HAL_PWREx_ControlVoltageScaling>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80025e8:	f000 f9d0 	bl	800298c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80025ec:	230a      	movs	r3, #10
 80025ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025f6:	2310      	movs	r3, #16
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025fa:	2301      	movs	r3, #1
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025fe:	2302      	movs	r3, #2
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002602:	2302      	movs	r3, #2
 8002604:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800260a:	230a      	movs	r3, #10
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800260e:	2307      	movs	r3, #7
 8002610:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002612:	2302      	movs	r3, #2
 8002614:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002616:	2302      	movs	r3, #2
 8002618:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4618      	mov	r0, r3
 8002620:	f001 ff62 	bl	80044e8 <HAL_RCC_OscConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800262a:	f000 f9af 	bl	800298c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262e:	230f      	movs	r3, #15
 8002630:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002632:	2303      	movs	r3, #3
 8002634:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002642:	463b      	mov	r3, r7
 8002644:	2104      	movs	r1, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fb2a 	bl	8004ca0 <HAL_RCC_ClockConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002652:	f000 f99b 	bl	800298c <Error_Handler>
  }
}
 8002656:	bf00      	nop
 8002658:	3758      	adds	r7, #88	; 0x58
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002674:	2300      	movs	r3, #0
 8002676:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <MX_RTC_Init+0xb0>)
 800267a:	4a26      	ldr	r2, [pc, #152]	; (8002714 <MX_RTC_Init+0xb4>)
 800267c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <MX_RTC_Init+0xb0>)
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <MX_RTC_Init+0xb0>)
 8002686:	227f      	movs	r2, #127	; 0x7f
 8002688:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <MX_RTC_Init+0xb0>)
 800268c:	22ff      	movs	r2, #255	; 0xff
 800268e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_RTC_Init+0xb0>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_RTC_Init+0xb0>)
 8002698:	2200      	movs	r2, #0
 800269a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_RTC_Init+0xb0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <MX_RTC_Init+0xb0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026a8:	4819      	ldr	r0, [pc, #100]	; (8002710 <MX_RTC_Init+0xb0>)
 80026aa:	f003 f9d9 	bl	8005a60 <HAL_RTC_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80026b4:	f000 f96a 	bl	800298c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 80026b8:	2303      	movs	r3, #3
 80026ba:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x23;
 80026bc:	2323      	movs	r3, #35	; 0x23
 80026be:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 80026c0:	2330      	movs	r3, #48	; 0x30
 80026c2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	2201      	movs	r2, #1
 80026d0:	4619      	mov	r1, r3
 80026d2:	480f      	ldr	r0, [pc, #60]	; (8002710 <MX_RTC_Init+0xb0>)
 80026d4:	f003 fa4c 	bl	8005b70 <HAL_RTC_SetTime>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80026de:	f000 f955 	bl	800298c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80026e2:	2301      	movs	r3, #1
 80026e4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 80026e6:	2310      	movs	r3, #16
 80026e8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x9;
 80026ea:	2309      	movs	r3, #9
 80026ec:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	2201      	movs	r2, #1
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_RTC_Init+0xb0>)
 80026fa:	f003 fb32 	bl	8005d62 <HAL_RTC_SetDate>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002704:	f000 f942 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000094 	.word	0x20000094
 8002714:	40002800 	.word	0x40002800

08002718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_SPI1_Init+0x74>)
 800271e:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <MX_SPI1_Init+0x78>)
 8002720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <MX_SPI1_Init+0x74>)
 8002724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_SPI1_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <MX_SPI1_Init+0x74>)
 8002732:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <MX_SPI1_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <MX_SPI1_Init+0x74>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <MX_SPI1_Init+0x74>)
 8002746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800274a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <MX_SPI1_Init+0x74>)
 800274e:	2210      	movs	r2, #16
 8002750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <MX_SPI1_Init+0x74>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <MX_SPI1_Init+0x74>)
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <MX_SPI1_Init+0x74>)
 8002760:	2200      	movs	r2, #0
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <MX_SPI1_Init+0x74>)
 8002766:	2207      	movs	r2, #7
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <MX_SPI1_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <MX_SPI1_Init+0x74>)
 8002772:	2208      	movs	r2, #8
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_SPI1_Init+0x74>)
 8002778:	f003 fc98 	bl	80060ac <HAL_SPI_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002782:	f000 f903 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200000b8 	.word	0x200000b8
 8002790:	40013000 	.word	0x40013000

08002794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279a:	f107 0310 	add.w	r3, r7, #16
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <MX_TIM2_Init+0x98>)
 80027b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <MX_TIM2_Init+0x98>)
 80027bc:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80027c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <MX_TIM2_Init+0x98>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <MX_TIM2_Init+0x98>)
 80027ca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80027ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <MX_TIM2_Init+0x98>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <MX_TIM2_Init+0x98>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027dc:	4813      	ldr	r0, [pc, #76]	; (800282c <MX_TIM2_Init+0x98>)
 80027de:	f004 f88f 	bl	8006900 <HAL_TIM_Base_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80027e8:	f000 f8d0 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	4619      	mov	r1, r3
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <MX_TIM2_Init+0x98>)
 80027fa:	f004 f9da 	bl	8006bb2 <HAL_TIM_ConfigClockSource>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002804:	f000 f8c2 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_TIM2_Init+0x98>)
 8002816:	f004 fbfb 	bl	8007010 <HAL_TIMEx_MasterConfigSynchronization>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002820:	f000 f8b4 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	2000011c 	.word	0x2000011c

08002830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <MX_USART1_UART_Init+0x58>)
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <MX_USART1_UART_Init+0x5c>)
 8002838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <MX_USART1_UART_Init+0x58>)
 800283c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_USART1_UART_Init+0x58>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <MX_USART1_UART_Init+0x58>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_USART1_UART_Init+0x58>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_USART1_UART_Init+0x58>)
 8002856:	220c      	movs	r2, #12
 8002858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <MX_USART1_UART_Init+0x58>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_USART1_UART_Init+0x58>)
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <MX_USART1_UART_Init+0x58>)
 8002868:	2200      	movs	r2, #0
 800286a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_USART1_UART_Init+0x58>)
 800286e:	2200      	movs	r2, #0
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_USART1_UART_Init+0x58>)
 8002874:	f004 fc72 	bl	800715c <HAL_UART_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800287e:	f000 f885 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000168 	.word	0x20000168
 800288c:	40013800 	.word	0x40013800

08002890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	4a35      	ldr	r2, [pc, #212]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b2:	4b33      	ldr	r3, [pc, #204]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	4a2f      	ldr	r2, [pc, #188]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	4a29      	ldr	r2, [pc, #164]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e2:	4b27      	ldr	r3, [pc, #156]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	4a23      	ldr	r2, [pc, #140]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fa:	4b21      	ldr	r3, [pc, #132]	; (8002980 <MX_GPIO_Init+0xf0>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	2110      	movs	r1, #16
 800290a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290e:	f001 fd6f 	bl	80043f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|RFID_WRITE_LED_Pin|Bluetooth_LED_Pin|RFID_LED_Pin, GPIO_PIN_RESET);
 8002912:	2200      	movs	r2, #0
 8002914:	f240 4131 	movw	r1, #1073	; 0x431
 8002918:	481a      	ldr	r0, [pc, #104]	; (8002984 <MX_GPIO_Init+0xf4>)
 800291a:	f001 fd69 	bl	80043f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800291e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002924:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4814      	ldr	r0, [pc, #80]	; (8002988 <MX_GPIO_Init+0xf8>)
 8002936:	f001 fbb1 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800293a:	2310      	movs	r3, #16
 800293c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293e:	2301      	movs	r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002954:	f001 fba2 	bl	800409c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 RFID_WRITE_LED_Pin Bluetooth_LED_Pin RFID_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|RFID_WRITE_LED_Pin|Bluetooth_LED_Pin|RFID_LED_Pin;
 8002958:	f240 4331 	movw	r3, #1073	; 0x431
 800295c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	4804      	ldr	r0, [pc, #16]	; (8002984 <MX_GPIO_Init+0xf4>)
 8002972:	f001 fb93 	bl	800409c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002976:	bf00      	nop
 8002978:	3728      	adds	r7, #40	; 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	48000400 	.word	0x48000400
 8002988:	48000800 	.word	0x48000800

0800298c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002990:	b672      	cpsid	i
}
 8002992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002994:	e7fe      	b.n	8002994 <Error_Handler+0x8>

08002996 <ExtEuclid>:
  return b;
}


long long ExtEuclid(long long a, long long b)
{
 8002996:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800299a:	b098      	sub	sp, #96	; 0x60
 800299c:	af00      	add	r7, sp, #0
 800299e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80029a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 long long x = 0, y = 1, u = 1, v = 0, gcd = b, m, n, q, r;
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80029b2:	f04f 0201 	mov.w	r2, #1
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80029be:	f04f 0201 	mov.w	r2, #1
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80029d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 while (a!=0) {
 80029de:	e05b      	b.n	8002a98 <ExtEuclid+0x102>
   q = gcd/a; r = gcd % a;
 80029e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029e8:	f7fd fc5a 	bl	80002a0 <__aeabi_ldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80029f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029fc:	f7fd fc50 	bl	80002a0 <__aeabi_ldivmod>
 8002a00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   m = x-u*q; n = y-v*q;
 8002a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a08:	fb03 f202 	mul.w	r2, r3, r2
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1a:	fba1 4502 	umull	r4, r5, r1, r2
 8002a1e:	442b      	add	r3, r5
 8002a20:	461d      	mov	r5, r3
 8002a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a26:	ebb2 0a04 	subs.w	sl, r2, r4
 8002a2a:	eb63 0b05 	sbc.w	fp, r3, r5
 8002a2e:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8002a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a36:	fb03 f202 	mul.w	r2, r3, r2
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a48:	fba1 8902 	umull	r8, r9, r1, r2
 8002a4c:	444b      	add	r3, r9
 8002a4e:	4699      	mov	r9, r3
 8002a50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a54:	ebb2 0108 	subs.w	r1, r2, r8
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	eb63 0309 	sbc.w	r3, r3, r9
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a64:	e9c7 2306 	strd	r2, r3, [r7, #24]
   gcd = a; a = r; x = u; y = v; u = m; v = n;
 8002a68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a74:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a7c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002a80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a84:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8002a88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a8c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8002a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a94:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 while (a!=0) {
 8002a98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	d19f      	bne.n	80029e0 <ExtEuclid+0x4a>
   }
   return y;
 8002aa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
}
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	3760      	adds	r7, #96	; 0x60
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ab0 <modmult>:
static inline long long modmult(long long a,long long b,long long mod)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b096      	sub	sp, #88	; 0x58
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8002abc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   // this is necessary since we will be dividing by a
   if (a == 0 ){
 8002ac0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	d104      	bne.n	8002ad2 <modmult+0x22>
         return 0;
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e0d6      	b.n	8002c80 <modmult+0x1d0>
   }
   register long long product = a * b;
 8002ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	fb03 f102 	mul.w	r1, r3, r2
 8002ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	4419      	add	r1, r3
 8002ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	fba2 4503 	umull	r4, r5, r2, r3
 8002aec:	194b      	adds	r3, r1, r5
 8002aee:	461d      	mov	r5, r3
    //if multiplication does not overflow, we can use it
   if (product / a == b){
 8002af0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002af4:	4620      	mov	r0, r4
 8002af6:	4629      	mov	r1, r5
 8002af8:	f7fd fbd2 	bl	80002a0 <__aeabi_ldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	bf08      	it	eq
 8002b0c:	4282      	cmpeq	r2, r0
 8002b0e:	d106      	bne.n	8002b1e <modmult+0x6e>
          return product % mod;
 8002b10:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b14:	4620      	mov	r0, r4
 8002b16:	4629      	mov	r1, r5
 8002b18:	f7fd fbc2 	bl	80002a0 <__aeabi_ldivmod>
 8002b1c:	e0b0      	b.n	8002c80 <modmult+0x1d0>
   }
   // if a % 2 == 1 i. e. a >> 1 is not a / 2
   if ( a & 1 ) {
 8002b1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b22:	f002 0801 	and.w	r8, r2, #1
 8002b26:	f04f 0900 	mov.w	r9, #0
 8002b2a:	ea58 0309 	orrs.w	r3, r8, r9
 8002b2e:	d039      	beq.n	8002ba4 <modmult+0xf4>
         product = modmult((a>>1), b, mod);
 8002b30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b34:	f04f 0000 	mov.w	r0, #0
 8002b38:	f04f 0100 	mov.w	r1, #0
 8002b3c:	0850      	lsrs	r0, r2, #1
 8002b3e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8002b42:	1059      	asrs	r1, r3, #1
 8002b44:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b48:	e9cd 2300 	strd	r2, r3, [sp]
 8002b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b50:	f7ff ffae 	bl	8002ab0 <modmult>
 8002b54:	4604      	mov	r4, r0
 8002b56:	460d      	mov	r5, r1
         if ((product << 1) > product ){
 8002b58:	1923      	adds	r3, r4, r4
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	eb45 0305 	adc.w	r3, r5, r5
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
 8002b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b66:	4294      	cmp	r4, r2
 8002b68:	eb75 0303 	sbcs.w	r3, r5, r3
 8002b6c:	da1a      	bge.n	8002ba4 <modmult+0xf4>
         return ((( product << 1 ) % mod ) + b) % mod;
 8002b6e:	1923      	adds	r3, r4, r4
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	eb45 0305 	adc.w	r3, r5, r5
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b7c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b80:	f7fd fb8e 	bl	80002a0 <__aeabi_ldivmod>
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b8c:	1884      	adds	r4, r0, r2
 8002b8e:	633c      	str	r4, [r7, #48]	; 0x30
 8002b90:	eb41 0303 	adc.w	r3, r1, r3
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
 8002b96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b9e:	f7fd fb7f 	bl	80002a0 <__aeabi_ldivmod>
 8002ba2:	e06d      	b.n	8002c80 <modmult+0x1d0>
      }
   }
   //implicit else
   product = modmult((a >> 1), b, mod);
 8002ba4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ba8:	f04f 0000 	mov.w	r0, #0
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	0850      	lsrs	r0, r2, #1
 8002bb2:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8002bb6:	1059      	asrs	r1, r3, #1
 8002bb8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bbc:	e9cd 2300 	strd	r2, r3, [sp]
 8002bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bc4:	f7ff ff74 	bl	8002ab0 <modmult>
 8002bc8:	4604      	mov	r4, r0
 8002bca:	460d      	mov	r5, r1
   if ((product << 1) > product){
 8002bcc:	1923      	adds	r3, r4, r4
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	eb45 0305 	adc.w	r3, r5, r5
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bda:	4294      	cmp	r4, r2
 8002bdc:	eb75 0303 	sbcs.w	r3, r5, r3
 8002be0:	da0b      	bge.n	8002bfa <modmult+0x14a>
         return (product << 1) % mod ;
 8002be2:	1923      	adds	r3, r4, r4
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	eb45 0305 	adc.w	r3, r5, r5
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bf0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bf4:	f7fd fb54 	bl	80002a0 <__aeabi_ldivmod>
 8002bf8:	e042      	b.n	8002c80 <modmult+0x1d0>
         }
   //implicit else: this is about 10x slower than the code above, but it will not overflow
    long long sum;
    sum = 0;
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    while(b>0)
 8002c06:	e033      	b.n	8002c70 <modmult+0x1c0>
    {
        if(b&1)
 8002c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c0c:	f002 0a01 	and.w	sl, r2, #1
 8002c10:	f04f 0b00 	mov.w	fp, #0
 8002c14:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c18:	d010      	beq.n	8002c3c <modmult+0x18c>
            sum = (sum + a) % mod;
 8002c1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002c1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c22:	1884      	adds	r4, r0, r2
 8002c24:	62bc      	str	r4, [r7, #40]	; 0x28
 8002c26:	eb41 0303 	adc.w	r3, r1, r3
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c34:	f7fd fb34 	bl	80002a0 <__aeabi_ldivmod>
 8002c38:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        a = (2*a) % mod;
 8002c3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c40:	1891      	adds	r1, r2, r2
 8002c42:	6039      	str	r1, [r7, #0]
 8002c44:	415b      	adcs	r3, r3
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c4c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c50:	f7fd fb26 	bl	80002a0 <__aeabi_ldivmod>
 8002c54:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        b>>=1;
 8002c58:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	0842      	lsrs	r2, r0, #1
 8002c66:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002c6a:	104b      	asrs	r3, r1, #1
 8002c6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    while(b>0)
 8002c70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c74:	2a01      	cmp	r2, #1
 8002c76:	f173 0300 	sbcs.w	r3, r3, #0
 8002c7a:	dac5      	bge.n	8002c08 <modmult+0x158>
    }
    return sum;
 8002c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
}
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	3750      	adds	r7, #80	; 0x50
 8002c86:	46bd      	mov	sp, r7
 8002c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c8c <rsa_modExp>:
long long rsa_modExp(long long b, long long e, long long m)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002c96:	e9c7 2300 	strd	r2, r3, [r7]
      long long product;
      product = 1;
 8002c9a:	f04f 0201 	mov.w	r2, #1
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (b < 0 || e < 0 || m <= 0){
 8002ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db09      	blt.n	8002cc2 <rsa_modExp+0x36>
 8002cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db05      	blt.n	8002cc2 <rsa_modExp+0x36>
 8002cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cba:	2a01      	cmp	r2, #1
 8002cbc:	f173 0300 	sbcs.w	r3, r3, #0
 8002cc0:	da04      	bge.n	8002ccc <rsa_modExp+0x40>
            return -1;
 8002cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cca:	e03c      	b.n	8002d46 <rsa_modExp+0xba>
      }
      b = b % m;
 8002ccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cd4:	f7fd fae4 	bl	80002a0 <__aeabi_ldivmod>
 8002cd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      while ( e > 0){
 8002cdc:	e02b      	b.n	8002d36 <rsa_modExp+0xaa>
            if (e & 1){
 8002cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ce2:	f002 0401 	and.w	r4, r2, #1
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	ea54 0305 	orrs.w	r3, r4, r5
 8002cec:	d00b      	beq.n	8002d06 <rsa_modExp+0x7a>
                  product = modmult(product, b, m);
 8002cee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cf2:	e9cd 2300 	strd	r2, r3, [sp]
 8002cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cfe:	f7ff fed7 	bl	8002ab0 <modmult>
 8002d02:	e9c7 0104 	strd	r0, r1, [r7, #16]
            }
            b = modmult(b, b, m);
 8002d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d0a:	e9cd 2300 	strd	r2, r3, [sp]
 8002d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d16:	f7ff fecb 	bl	8002ab0 <modmult>
 8002d1a:	e9c7 0102 	strd	r0, r1, [r7, #8]
            e >>= 1;
 8002d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	0842      	lsrs	r2, r0, #1
 8002d2c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002d30:	104b      	asrs	r3, r1, #1
 8002d32:	e9c7 2300 	strd	r2, r3, [r7]
      while ( e > 0){
 8002d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d3a:	2a01      	cmp	r2, #1
 8002d3c:	f173 0300 	sbcs.w	r3, r3, #0
 8002d40:	dacd      	bge.n	8002cde <rsa_modExp+0x52>
      }
      return product;
 8002d42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bdb0      	pop	{r4, r5, r7, pc}

08002d50 <rsa_gen_keys>:
// Calling this function will generate a public and private key and store them in the pointers
// it is given.
void rsa_gen_keys(struct public_key_class *pub, struct private_key_class *priv)
{
 8002d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d54:	b091      	sub	sp, #68	; 0x44
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]

  // choose random primes from the list, store them as p,q
  // p=88799 q=45161
  long long p = 45161;
 8002d5c:	f24b 0069 	movw	r0, #45161	; 0xb069
 8002d60:	f04f 0100 	mov.w	r1, #0
 8002d64:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
  long long q = 88799;
 8002d68:	483d      	ldr	r0, [pc, #244]	; (8002e60 <rsa_gen_keys+0x110>)
 8002d6a:	f04f 0100 	mov.w	r1, #0
 8002d6e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

//values of e should be sufficiently large to protect against naive attacks
  long long e = (2 << 16) +1;
 8002d72:	483c      	ldr	r0, [pc, #240]	; (8002e64 <rsa_gen_keys+0x114>)
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	e9c7 0108 	strd	r0, r1, [r7, #32]
  long long d = 0;
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
  long long max = 0;
 8002d88:	f04f 0000 	mov.w	r0, #0
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	e9c7 0106 	strd	r0, r1, [r7, #24]
  long long phi_max = 0;
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	e9c7 0104 	strd	r0, r1, [r7, #16]

  //srand(time(NULL));
  max = p*q;
 8002da0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da4:	fb01 f000 	mul.w	r0, r1, r0
 8002da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002daa:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002dac:	fb06 f101 	mul.w	r1, r6, r1
 8002db0:	4401      	add	r1, r0
 8002db2:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db6:	fba6 4500 	umull	r4, r5, r6, r0
 8002dba:	4429      	add	r1, r5
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8002dc2:	e9c7 4506 	strd	r4, r5, [r7, #24]
  phi_max = (p-1)*(q-1);
 8002dc6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002dca:	f110 3aff 	adds.w	sl, r0, #4294967295	; 0xffffffff
 8002dce:	f141 3bff 	adc.w	fp, r1, #4294967295	; 0xffffffff
 8002dd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dd6:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
 8002dda:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
 8002dde:	fb08 f00b 	mul.w	r0, r8, fp
 8002de2:	fb0a f109 	mul.w	r1, sl, r9
 8002de6:	4401      	add	r1, r0
 8002de8:	fbaa 2308 	umull	r2, r3, sl, r8
 8002dec:	4419      	add	r1, r3
 8002dee:	460b      	mov	r3, r1
 8002df0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002df4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  //while(!(p && q) || (p == q) || (gcd(phi_max, e) != 1));
  // Next, we need to choose a,b, so that a*max+b*e = gcd(max,e). We actually only need b
  // here, and in keeping with the usual notation of RSA we'll call it d. We'd also like
  // to make sure we get a representation of d as positive, hence the while loop.
  d = ExtEuclid(phi_max,e);
 8002df8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e00:	f7ff fdc9 	bl	8002996 <ExtEuclid>
 8002e04:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
  while(d < 0){
 8002e08:	e00c      	b.n	8002e24 <rsa_gen_keys+0xd4>
    d = d+phi_max;
 8002e0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e12:	1884      	adds	r4, r0, r2
 8002e14:	603c      	str	r4, [r7, #0]
 8002e16:	eb41 0303 	adc.w	r3, r1, r3
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e20:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  while(d < 0){
 8002e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	dbee      	blt.n	8002e0a <rsa_gen_keys+0xba>

  }

  //printf("primes are %lld and %lld\n",(long long)p, (long long )q);
  // We now store the public / private keys in the appropriate structs
  pub->modulus = max;
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e32:	e9c1 2300 	strd	r2, r3, [r1]
  pub->exponent = e;
 8002e36:	68f9      	ldr	r1, [r7, #12]
 8002e38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e3c:	e9c1 2302 	strd	r2, r3, [r1, #8]

  priv->modulus = max;
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e46:	e9c1 2300 	strd	r2, r3, [r1]
  priv->exponent = d;
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e50:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002e54:	bf00      	nop
 8002e56:	3744      	adds	r7, #68	; 0x44
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5e:	bf00      	nop
 8002e60:	00015adf 	.word	0x00015adf
 8002e64:	00020001 	.word	0x00020001

08002e68 <rsa_encrypt>:


long long *rsa_encrypt(const char *message, const unsigned long message_size,
                     const struct public_key_class *pub)
{
 8002e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e6c:	b08b      	sub	sp, #44	; 0x2c
 8002e6e:	af02      	add	r7, sp, #8
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  long long *encrypted = malloc(sizeof(long long)*message_size);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f005 fd36 	bl	80088ec <malloc>
 8002e80:	4603      	mov	r3, r0
 8002e82:	617b      	str	r3, [r7, #20]
  if(encrypted == NULL){
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <rsa_encrypt+0x36>
    fprintf(stderr,
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <rsa_encrypt+0xd0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	221f      	movs	r2, #31
 8002e92:	2101      	movs	r1, #1
 8002e94:	4829      	ldr	r0, [pc, #164]	; (8002f3c <rsa_encrypt+0xd4>)
 8002e96:	f005 ffa1 	bl	8008ddc <fwrite>
     "Error: Heap allocation failed.\n");
    return NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e046      	b.n	8002f2c <rsa_encrypt+0xc4>
  }
  long long i = 0;
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for(i=0; i < message_size; i++){
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002eb6:	e02f      	b.n	8002f18 <rsa_encrypt+0xb0>
    if ((encrypted[i] = rsa_modExp(message[i], pub->exponent, pub->modulus)) == -1)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	469a      	mov	sl, r3
 8002ec6:	4693      	mov	fp, r2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	ed93 7b00 	vldr	d7, [r3]
 8002ed4:	69be      	ldr	r6, [r7, #24]
 8002ed6:	00f6      	lsls	r6, r6, #3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	441e      	add	r6, r3
 8002edc:	ed8d 7b00 	vstr	d7, [sp]
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4650      	mov	r0, sl
 8002ee6:	4659      	mov	r1, fp
 8002ee8:	f7ff fed0 	bl	8002c8c <rsa_modExp>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	e9c6 2300 	strd	r2, r3, [r6]
 8002ef4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002efc:	bf08      	it	eq
 8002efe:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8002f02:	d101      	bne.n	8002f08 <rsa_encrypt+0xa0>
    return NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e011      	b.n	8002f2c <rsa_encrypt+0xc4>
  for(i=0; i < message_size; i++){
 8002f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f0c:	f112 0801 	adds.w	r8, r2, #1
 8002f10:	f143 0900 	adc.w	r9, r3, #0
 8002f14:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	461c      	mov	r4, r3
 8002f1e:	4615      	mov	r5, r2
 8002f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f24:	42a2      	cmp	r2, r4
 8002f26:	41ab      	sbcs	r3, r5
 8002f28:	dbc6      	blt.n	8002eb8 <rsa_encrypt+0x50>
  }
  return encrypted;
 8002f2a:	697b      	ldr	r3, [r7, #20]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3724      	adds	r7, #36	; 0x24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f36:	bf00      	nop
 8002f38:	20000074 	.word	0x20000074
 8002f3c:	0800aacc 	.word	0x0800aacc

08002f40 <rsa_decrypt>:


char *rsa_decrypt(const long long *message,
                  const unsigned long message_size,
                  const struct private_key_class *priv)
{
 8002f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f44:	b08e      	sub	sp, #56	; 0x38
 8002f46:	af02      	add	r7, sp, #8
 8002f48:	61f8      	str	r0, [r7, #28]
 8002f4a:	61b9      	str	r1, [r7, #24]
 8002f4c:	617a      	str	r2, [r7, #20]
  if(message_size % sizeof(long long) != 0){
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <rsa_decrypt+0x2c>
    fprintf(stderr,
 8002f58:	4b45      	ldr	r3, [pc, #276]	; (8003070 <rsa_decrypt+0x130>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	4944      	ldr	r1, [pc, #272]	; (8003074 <rsa_decrypt+0x134>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f005 febe 	bl	8008ce4 <fiprintf>
     "Error: message_size is not divisible by %d, so cannot be output of rsa_encrypt\n", (int)sizeof(long long));
     return NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e07c      	b.n	8003066 <rsa_decrypt+0x126>
  }
  // We allocate space to do the decryption (temp) and space for the output as a char array
  // (decrypted)
  char *decrypted = malloc(message_size/sizeof(long long));
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	08db      	lsrs	r3, r3, #3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f005 fcbb 	bl	80088ec <malloc>
 8002f76:	4603      	mov	r3, r0
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  char *temp = malloc(message_size);
 8002f7a:	69b8      	ldr	r0, [r7, #24]
 8002f7c:	f005 fcb6 	bl	80088ec <malloc>
 8002f80:	4603      	mov	r3, r0
 8002f82:	623b      	str	r3, [r7, #32]
  if((decrypted == NULL) || (temp == NULL)){
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <rsa_decrypt+0x50>
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <rsa_decrypt+0x64>
    fprintf(stderr,
 8002f90:	4b37      	ldr	r3, [pc, #220]	; (8003070 <rsa_decrypt+0x130>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	221f      	movs	r2, #31
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4837      	ldr	r0, [pc, #220]	; (8003078 <rsa_decrypt+0x138>)
 8002f9c:	f005 ff1e 	bl	8008ddc <fwrite>
     "Error: Heap allocation failed.\n");
    return NULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e060      	b.n	8003066 <rsa_decrypt+0x126>
  }
  // Now we go through each 8-byte chunk and decrypt it.
  long long i = 0;
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  for(i=0; i < message_size/8; i++){
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002fbc:	e023      	b.n	8003006 <rsa_decrypt+0xc6>
    if ((temp[i] = rsa_modExp(message[i], priv->exponent, priv->modulus)) == -1){
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fd0:	e9c7 2300 	strd	r2, r3, [r7]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	e9cd 2300 	strd	r2, r3, [sp]
 8002fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe2:	f7ff fe53 	bl	8002c8c <rsa_modExp>
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	4413      	add	r3, r2
 8002fec:	b2c2      	uxtb	r2, r0
 8002fee:	701a      	strb	r2, [r3, #0]
  for(i=0; i < message_size/8; i++){
 8002ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ff4:	1c51      	adds	r1, r2, #1
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	f143 0300 	adc.w	r3, r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003002:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	08db      	lsrs	r3, r3, #3
 800300a:	2200      	movs	r2, #0
 800300c:	4698      	mov	r8, r3
 800300e:	4691      	mov	r9, r2
 8003010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003014:	4542      	cmp	r2, r8
 8003016:	eb73 0309 	sbcs.w	r3, r3, r9
 800301a:	dbd0      	blt.n	8002fbe <rsa_decrypt+0x7e>
          return NULL;
      }
  }
  // The result should be a number in the char range, which gives back the original byte.
  // We put that into decrypted, then return.
  for(i=0; i < message_size/8; i++){
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003028:	e00f      	b.n	800304a <rsa_decrypt+0x10a>
    decrypted[i] = temp[i];
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	6a3a      	ldr	r2, [r7, #32]
 800302e:	441a      	add	r2, r3
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003034:	440b      	add	r3, r1
 8003036:	7812      	ldrb	r2, [r2, #0]
 8003038:	701a      	strb	r2, [r3, #0]
  for(i=0; i < message_size/8; i++){
 800303a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800303e:	f112 0a01 	adds.w	sl, r2, #1
 8003042:	f143 0b00 	adc.w	fp, r3, #0
 8003046:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	2200      	movs	r2, #0
 8003050:	461c      	mov	r4, r3
 8003052:	4615      	mov	r5, r2
 8003054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003058:	42a2      	cmp	r2, r4
 800305a:	41ab      	sbcs	r3, r5
 800305c:	dbe5      	blt.n	800302a <rsa_decrypt+0xea>
  }
  free(temp);
 800305e:	6a38      	ldr	r0, [r7, #32]
 8003060:	f005 fc4c 	bl	80088fc <free>
  return decrypted;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003066:	4618      	mov	r0, r3
 8003068:	3730      	adds	r7, #48	; 0x30
 800306a:	46bd      	mov	sp, r7
 800306c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003070:	20000074 	.word	0x20000074
 8003074:	0800aaec 	.word	0x0800aaec
 8003078:	0800aacc 	.word	0x0800aacc

0800307c <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af02      	add	r7, sp, #8
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 8003086:	f107 020f 	add.w	r2, r7, #15
 800308a:	1df9      	adds	r1, r7, #7
 800308c:	2364      	movs	r3, #100	; 0x64
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2301      	movs	r3, #1
 8003092:	4804      	ldr	r0, [pc, #16]	; (80030a4 <RC522_SPI_Transfer+0x28>)
 8003094:	f003 f8ad 	bl	80061f2 <HAL_SPI_TransmitReceive>
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200000b8 	.word	0x200000b8

080030a8 <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	460a      	mov	r2, r1
 80030b2:	71fb      	strb	r3, [r7, #7]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80030b8:	2200      	movs	r2, #0
 80030ba:	2110      	movs	r1, #16
 80030bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c0:	f001 f996 	bl	80043f0 <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ffd3 	bl	800307c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80030d6:	79bb      	ldrb	r3, [r7, #6]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ffcf 	bl	800307c <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80030de:	2201      	movs	r2, #1
 80030e0:	2110      	movs	r1, #16
 80030e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e6:	f001 f983 	bl	80043f0 <HAL_GPIO_WritePin>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80030fc:	2200      	movs	r2, #0
 80030fe:	2110      	movs	r1, #16
 8003100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003104:	f001 f974 	bl	80043f0 <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	b25b      	sxtb	r3, r3
 800310e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003112:	b25b      	sxtb	r3, r3
 8003114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003118:	b25b      	sxtb	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ffad 	bl	800307c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8003122:	2000      	movs	r0, #0
 8003124:	f7ff ffaa 	bl	800307c <RC522_SPI_Transfer>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	2110      	movs	r1, #16
 8003130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003134:	f001 f95c 	bl	80043f0 <HAL_GPIO_WritePin>
	return val;	
 8003138:	7bfb      	ldrb	r3, [r7, #15]
	
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	460a      	mov	r2, r1
 800314c:	71fb      	strb	r3, [r7, #7]
 800314e:	4613      	mov	r3, r2
 8003150:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ffcc 	bl	80030f2 <Read_MFRC522>
 800315a:	4603      	mov	r3, r0
 800315c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	79bb      	ldrb	r3, [r7, #6]
 8003162:	4313      	orrs	r3, r2
 8003164:	b2da      	uxtb	r2, r3
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff9c 	bl	80030a8 <Write_MFRC522>
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	460a      	mov	r2, r1
 8003182:	71fb      	strb	r3, [r7, #7]
 8003184:	4613      	mov	r3, r2
 8003186:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ffb1 	bl	80030f2 <Read_MFRC522>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8003194:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003198:	43db      	mvns	r3, r3
 800319a:	b25a      	sxtb	r2, r3
 800319c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff7c 	bl	80030a8 <Write_MFRC522>
} 
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 80031bc:	2014      	movs	r0, #20
 80031be:	f7ff ff98 	bl	80030f2 <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 80031c2:	2103      	movs	r1, #3
 80031c4:	2014      	movs	r0, #20
 80031c6:	f7ff ffbc 	bl	8003142 <SetBitMask>
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}

080031ce <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80031d2:	210f      	movs	r1, #15
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7ff ff67 	bl	80030a8 <Write_MFRC522>
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80031e4:	2201      	movs	r2, #1
 80031e6:	2110      	movs	r1, #16
 80031e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ec:	f001 f900 	bl	80043f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80031f0:	2201      	movs	r2, #1
 80031f2:	2101      	movs	r1, #1
 80031f4:	4810      	ldr	r0, [pc, #64]	; (8003238 <MFRC522_Init+0x58>)
 80031f6:	f001 f8fb 	bl	80043f0 <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();
	
	MFRC522_Reset();
 80031fa:	f7ff ffe8 	bl	80031ce <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 80031fe:	218d      	movs	r1, #141	; 0x8d
 8003200:	202a      	movs	r0, #42	; 0x2a
 8003202:	f7ff ff51 	bl	80030a8 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8003206:	213e      	movs	r1, #62	; 0x3e
 8003208:	202b      	movs	r0, #43	; 0x2b
 800320a:	f7ff ff4d 	bl	80030a8 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 800320e:	211e      	movs	r1, #30
 8003210:	202d      	movs	r0, #45	; 0x2d
 8003212:	f7ff ff49 	bl	80030a8 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8003216:	2100      	movs	r1, #0
 8003218:	202c      	movs	r0, #44	; 0x2c
 800321a:	f7ff ff45 	bl	80030a8 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 800321e:	2140      	movs	r1, #64	; 0x40
 8003220:	2015      	movs	r0, #21
 8003222:	f7ff ff41 	bl	80030a8 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 8003226:	213d      	movs	r1, #61	; 0x3d
 8003228:	2011      	movs	r0, #17
 800322a:	f7ff ff3d 	bl	80030a8 <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 800322e:	f7ff ffc3 	bl	80031b8 <AntennaOn>
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	48000400 	.word	0x48000400

0800323c <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	4603      	mov	r3, r0
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	4613      	mov	r3, r2
 800324c:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 800324e:	2302      	movs	r3, #2
 8003250:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8003252:	2300      	movs	r3, #0
 8003254:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 8003256:	2300      	movs	r3, #0
 8003258:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	d006      	beq.n	800326e <MFRC522_ToCard+0x32>
 8003260:	2b0e      	cmp	r3, #14
 8003262:	d109      	bne.n	8003278 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 8003264:	2312      	movs	r3, #18
 8003266:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8003268:	2310      	movs	r3, #16
 800326a:	777b      	strb	r3, [r7, #29]
			break;
 800326c:	e005      	b.n	800327a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 800326e:	2377      	movs	r3, #119	; 0x77
 8003270:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8003272:	2330      	movs	r3, #48	; 0x30
 8003274:	777b      	strb	r3, [r7, #29]
			break;
 8003276:	e000      	b.n	800327a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003278:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 800327a:	7fbb      	ldrb	r3, [r7, #30]
 800327c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003280:	b2db      	uxtb	r3, r3
 8003282:	4619      	mov	r1, r3
 8003284:	2002      	movs	r0, #2
 8003286:	f7ff ff0f 	bl	80030a8 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	2004      	movs	r0, #4
 800328e:	f7ff ff73 	bl	8003178 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	200a      	movs	r0, #10
 8003296:	f7ff ff54 	bl	8003142 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 800329a:	2100      	movs	r1, #0
 800329c:	2001      	movs	r0, #1
 800329e:	f7ff ff03 	bl	80030a8 <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	e00a      	b.n	80032be <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4413      	add	r3, r2
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	2009      	movs	r0, #9
 80032b4:	f7ff fef8 	bl	80030a8 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	3301      	adds	r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	7bbb      	ldrb	r3, [r7, #14]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3f0      	bcc.n	80032a8 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	4619      	mov	r1, r3
 80032ca:	2001      	movs	r0, #1
 80032cc:	f7ff feec 	bl	80030a8 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	d103      	bne.n	80032de <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	200d      	movs	r0, #13
 80032da:	f7ff ff32 	bl	8003142 <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 80032de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80032e2:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80032e4:	2004      	movs	r0, #4
 80032e6:	f7ff ff04 	bl	80030f2 <Read_MFRC522>
 80032ea:	4603      	mov	r3, r0
 80032ec:	773b      	strb	r3, [r7, #28]
        i--;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <MFRC522_ToCard+0xd4>
 80032fa:	7f3b      	ldrb	r3, [r7, #28]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <MFRC522_ToCard+0xd4>
 8003304:	7f3a      	ldrb	r2, [r7, #28]
 8003306:	7f7b      	ldrb	r3, [r7, #29]
 8003308:	4013      	ands	r3, r2
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0e9      	beq.n	80032e4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	200d      	movs	r0, #13
 8003314:	f7ff ff30 	bl	8003178 <ClearBitMask>
	
    if (i != 0)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d052      	beq.n	80033c4 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800331e:	2006      	movs	r0, #6
 8003320:	f7ff fee7 	bl	80030f2 <Read_MFRC522>
 8003324:	4603      	mov	r3, r0
 8003326:	f003 031b 	and.w	r3, r3, #27
 800332a:	2b00      	cmp	r3, #0
 800332c:	d148      	bne.n	80033c0 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8003332:	7f3a      	ldrb	r2, [r7, #28]
 8003334:	7fbb      	ldrb	r3, [r7, #30]
 8003336:	4013      	ands	r3, r2
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;			//??   
 8003342:	2301      	movs	r3, #1
 8003344:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d13b      	bne.n	80033c4 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800334c:	200a      	movs	r0, #10
 800334e:	f7ff fed0 	bl	80030f2 <Read_MFRC522>
 8003352:	4603      	mov	r3, r0
 8003354:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8003356:	200c      	movs	r0, #12
 8003358:	f7ff fecb 	bl	80030f2 <Read_MFRC522>
 800335c:	4603      	mov	r3, r0
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 800336a:	7f3b      	ldrb	r3, [r7, #28]
 800336c:	3b01      	subs	r3, #1
 800336e:	00da      	lsls	r2, r3, #3
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	4413      	add	r3, r2
 8003374:	461a      	mov	r2, r3
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e004      	b.n	8003386 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 800337c:	7f3b      	ldrb	r3, [r7, #28]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	461a      	mov	r2, r3
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8003386:	7f3b      	ldrb	r3, [r7, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 800338c:	2301      	movs	r3, #1
 800338e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8003390:	7f3b      	ldrb	r3, [r7, #28]
 8003392:	2b10      	cmp	r3, #16
 8003394:	d901      	bls.n	800339a <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8003396:	2310      	movs	r3, #16
 8003398:	773b      	strb	r3, [r7, #28]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	e00a      	b.n	80033b6 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	18d4      	adds	r4, r2, r3
 80033a6:	2009      	movs	r0, #9
 80033a8:	f7ff fea3 	bl	80030f2 <Read_MFRC522>
 80033ac:	4603      	mov	r3, r0
 80033ae:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	3301      	adds	r3, #1
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	7f3b      	ldrb	r3, [r7, #28]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d3f0      	bcc.n	80033a0 <MFRC522_ToCard+0x164>
 80033be:	e001      	b.n	80033c4 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 80033c0:	2302      	movs	r3, #2
 80033c2:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 80033c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}

080033ce <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af02      	add	r7, sp, #8
 80033d4:	4603      	mov	r3, r0
 80033d6:	6039      	str	r1, [r7, #0]
 80033d8:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 80033da:	2107      	movs	r1, #7
 80033dc:	200d      	movs	r0, #13
 80033de:	f7ff fe63 	bl	80030a8 <Write_MFRC522>
	
	TagType[0] = reqMode;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	79fa      	ldrb	r2, [r7, #7]
 80033e6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80033e8:	f107 0308 	add.w	r3, r7, #8
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	200c      	movs	r0, #12
 80033f6:	f7ff ff21 	bl	800323c <MFRC522_ToCard>
 80033fa:	4603      	mov	r3, r0
 80033fc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <MFRC522_Request+0x3c>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b10      	cmp	r3, #16
 8003408:	d001      	beq.n	800340e <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 800340a:	2302      	movs	r3, #2
 800340c:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8003420:	2300      	movs	r3, #0
 8003422:	737b      	strb	r3, [r7, #13]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8003424:	2100      	movs	r1, #0
 8003426:	200d      	movs	r0, #13
 8003428:	f7ff fe3e 	bl	80030a8 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2293      	movs	r2, #147	; 0x93
 8003430:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3301      	adds	r3, #1
 8003436:	2220      	movs	r2, #32
 8003438:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800343a:	f107 0308 	add.w	r3, r7, #8
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	200c      	movs	r0, #12
 8003448:	f7ff fef8 	bl	800323c <MFRC522_ToCard>
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 8003456:	2300      	movs	r3, #0
 8003458:	73bb      	strb	r3, [r7, #14]
 800345a:	e009      	b.n	8003470 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 800345c:	7bbb      	ldrb	r3, [r7, #14]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	781a      	ldrb	r2, [r3, #0]
 8003464:	7b7b      	ldrb	r3, [r7, #13]
 8003466:	4053      	eors	r3, r2
 8003468:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800346a:	7bbb      	ldrb	r3, [r7, #14]
 800346c:	3301      	adds	r3, #1
 800346e:	73bb      	strb	r3, [r7, #14]
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d9f2      	bls.n	800345c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8003476:	7bbb      	ldrb	r3, [r7, #14]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	7b7a      	ldrb	r2, [r7, #13]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8003484:	2302      	movs	r3, #2
 8003486:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
} 
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <CalulateCRC>:
 * MFRC522 is a formula of RC522
 * Input: pIndata - Data CRC into calculator, wool - Data data, pOutData - CRC calculation
 * Check: No
 */
void CalulateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 8003492:	b590      	push	{r4, r7, lr}
 8003494:	b087      	sub	sp, #28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	460b      	mov	r3, r1
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	72fb      	strb	r3, [r7, #11]
    uint8_t i, n;

    ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 80034a0:	2104      	movs	r1, #4
 80034a2:	2005      	movs	r0, #5
 80034a4:	f7ff fe68 	bl	8003178 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//Con tro FIFO
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	200a      	movs	r0, #10
 80034ac:	f7ff fe49 	bl	8003142 <SetBitMask>
    //Write_MFRC522(CommandReg, PCD_IDLE);

	//Record in FIFO
    for (i=0; i<len; i++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]
 80034b4:	e00a      	b.n	80034cc <CalulateCRC+0x3a>
    {   
		Write_MFRC522(FIFODataReg, *(pIndata+i));   
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	2009      	movs	r0, #9
 80034c2:	f7ff fdf1 	bl	80030a8 <Write_MFRC522>
    for (i=0; i<len; i++)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	3301      	adds	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
 80034cc:	7dfa      	ldrb	r2, [r7, #23]
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d3f0      	bcc.n	80034b6 <CalulateCRC+0x24>
	}
    Write_MFRC522(CommandReg, PCD_CALCCRC);
 80034d4:	2103      	movs	r1, #3
 80034d6:	2001      	movs	r0, #1
 80034d8:	f7ff fde6 	bl	80030a8 <Write_MFRC522>

	// Let the CRC computer complete
    i = 0xFF;
 80034dc:	23ff      	movs	r3, #255	; 0xff
 80034de:	75fb      	strb	r3, [r7, #23]
    do 
    {
        n = Read_MFRC522(DivIrqReg);
 80034e0:	2005      	movs	r0, #5
 80034e2:	f7ff fe06 	bl	80030f2 <Read_MFRC522>
 80034e6:	4603      	mov	r3, r0
 80034e8:	75bb      	strb	r3, [r7, #22]
        i--;
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <CalulateCRC+0x6e>
 80034f6:	7dbb      	ldrb	r3, [r7, #22]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ef      	beq.n	80034e0 <CalulateCRC+0x4e>

	//Doc results in CRC calculation
    pOutData[0] = Read_MFRC522(CRCResultRegL);
 8003500:	2022      	movs	r0, #34	; 0x22
 8003502:	f7ff fdf6 	bl	80030f2 <Read_MFRC522>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_MFRC522(CRCResultRegM);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	1c5c      	adds	r4, r3, #1
 8003512:	2021      	movs	r0, #33	; 0x21
 8003514:	f7ff fded 	bl	80030f2 <Read_MFRC522>
 8003518:	4603      	mov	r3, r0
 800351a:	7023      	strb	r3, [r4, #0]
}
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd90      	pop	{r4, r7, pc}

08003524 <MFRC522_SelectTag>:
 * read the right way
 * Input:serNum--So serial the
 * Check: Use the same amount of inspection
 */
uint8_t MFRC522_SelectTag(uint8_t *serNum)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uint8_t buffer[9]; 

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

    buffer[0] = PICC_SElECTTAG;
 800352c:	2393      	movs	r3, #147	; 0x93
 800352e:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x70;
 8003530:	2370      	movs	r3, #112	; 0x70
 8003532:	737b      	strb	r3, [r7, #13]
    for (i=0; i<5; i++)
 8003534:	2300      	movs	r3, #0
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e00c      	b.n	8003554 <MFRC522_SelectTag+0x30>
    {
    	buffer[i+2] = *(serNum+i);
 800353a:	7ffb      	ldrb	r3, [r7, #31]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	441a      	add	r2, r3
 8003540:	7ffb      	ldrb	r3, [r7, #31]
 8003542:	3302      	adds	r3, #2
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	3320      	adds	r3, #32
 8003548:	443b      	add	r3, r7
 800354a:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<5; i++)
 800354e:	7ffb      	ldrb	r3, [r7, #31]
 8003550:	3301      	adds	r3, #1
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	7ffb      	ldrb	r3, [r7, #31]
 8003556:	2b04      	cmp	r3, #4
 8003558:	d9ef      	bls.n	800353a <MFRC522_SelectTag+0x16>
    }
	CalulateCRC(buffer, 7, &buffer[7]);		//??
 800355a:	f107 030c 	add.w	r3, r7, #12
 800355e:	1dda      	adds	r2, r3, #7
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	2107      	movs	r1, #7
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ff93 	bl	8003492 <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 800356c:	f107 020c 	add.w	r2, r7, #12
 8003570:	f107 010c 	add.w	r1, r7, #12
 8003574:	f107 0318 	add.w	r3, r7, #24
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	2209      	movs	r2, #9
 800357e:	200c      	movs	r0, #12
 8003580:	f7ff fe5c 	bl	800323c <MFRC522_ToCard>
 8003584:	4603      	mov	r3, r0
 8003586:	777b      	strb	r3, [r7, #29]
    
    if ((status == MI_OK) && (recvBits == 0x18))
 8003588:	7f7b      	ldrb	r3, [r7, #29]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d105      	bne.n	800359a <MFRC522_SelectTag+0x76>
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b18      	cmp	r3, #24
 8003592:	d102      	bne.n	800359a <MFRC522_SelectTag+0x76>
    {   
		size = buffer[0]; 
 8003594:	7b3b      	ldrb	r3, [r7, #12]
 8003596:	77bb      	strb	r3, [r7, #30]
 8003598:	e001      	b.n	800359e <MFRC522_SelectTag+0x7a>
	}
    else
    {   
		size = 0;    
 800359a:	2300      	movs	r3, #0
 800359c:	77bb      	strb	r3, [r7, #30]
	}

    return size;
 800359e:	7fbb      	ldrb	r3, [r7, #30]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <MFRC522_Auth>:
             Sectorkey - The shadow area
             serNum - So serial the, 4 bytes
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t *Sectorkey, uint8_t *serNum)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	; 0x30
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60ba      	str	r2, [r7, #8]
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	4603      	mov	r3, r0
 80035b4:	73fb      	strb	r3, [r7, #15]
 80035b6:	460b      	mov	r3, r1
 80035b8:	73bb      	strb	r3, [r7, #14]
    uint recvBits;
    uint8_t i;
	uint8_t buff[12]; 

	//Confirmation + Address + password + quick number
    buff[0] = authMode;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	753b      	strb	r3, [r7, #20]
    buff[1] = BlockAddr;
 80035be:	7bbb      	ldrb	r3, [r7, #14]
 80035c0:	757b      	strb	r3, [r7, #21]
    for (i=0; i<6; i++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80035c8:	e010      	b.n	80035ec <MFRC522_Auth+0x44>
    {    
		buff[i+2] = *(Sectorkey+i);   
 80035ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	441a      	add	r2, r3
 80035d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035d6:	3302      	adds	r3, #2
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	3328      	adds	r3, #40	; 0x28
 80035dc:	443b      	add	r3, r7
 80035de:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<6; i++)
 80035e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035e6:	3301      	adds	r3, #1
 80035e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80035ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d9ea      	bls.n	80035ca <MFRC522_Auth+0x22>
	}
    for (i=0; i<4; i++)
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80035fa:	e010      	b.n	800361e <MFRC522_Auth+0x76>
    {    
		buff[i+8] = *(serNum+i);   
 80035fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	441a      	add	r2, r3
 8003604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003608:	3308      	adds	r3, #8
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	3328      	adds	r3, #40	; 0x28
 800360e:	443b      	add	r3, r7
 8003610:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<4; i++)
 8003614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003618:	3301      	adds	r3, #1
 800361a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800361e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003622:	2b03      	cmp	r3, #3
 8003624:	d9ea      	bls.n	80035fc <MFRC522_Auth+0x54>
	}
    status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8003626:	f107 0214 	add.w	r2, r7, #20
 800362a:	f107 0114 	add.w	r1, r7, #20
 800362e:	f107 0320 	add.w	r3, r7, #32
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	220c      	movs	r2, #12
 8003638:	200e      	movs	r0, #14
 800363a:	f7ff fdff 	bl	800323c <MFRC522_ToCard>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 8003644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003648:	2b00      	cmp	r3, #0
 800364a:	d107      	bne.n	800365c <MFRC522_Auth+0xb4>
 800364c:	2008      	movs	r0, #8
 800364e:	f7ff fd50 	bl	80030f2 <Read_MFRC522>
 8003652:	4603      	mov	r3, r0
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <MFRC522_Auth+0xba>
    {   
		status = MI_ERR;   
 800365c:	2302      	movs	r3, #2
 800365e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    
    return status;
 8003662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003666:	4618      	mov	r0, r3
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <MFRC522_Read>:
 * Doc with data
 * Input: blockAddr - Address location; recvData - Retrieve document output
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t *recvData)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af02      	add	r7, sp, #8
 8003674:	4603      	mov	r3, r0
 8003676:	6039      	str	r1, [r7, #0]
 8003678:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint unLen;

    recvData[0] = PICC_READ;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2230      	movs	r2, #48	; 0x30
 800367e:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	79fa      	ldrb	r2, [r7, #7]
 8003686:	701a      	strb	r2, [r3, #0]
    CalulateCRC(recvData,2, &recvData[2]);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	3302      	adds	r3, #2
 800368c:	461a      	mov	r2, r3
 800368e:	2102      	movs	r1, #2
 8003690:	6838      	ldr	r0, [r7, #0]
 8003692:	f7ff fefe 	bl	8003492 <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8003696:	f107 0308 	add.w	r3, r7, #8
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2204      	movs	r2, #4
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	200c      	movs	r0, #12
 80036a4:	f7ff fdca 	bl	800323c <MFRC522_ToCard>
 80036a8:	4603      	mov	r3, r0
 80036aa:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (unLen != 0x90))
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <MFRC522_Read+0x4a>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b90      	cmp	r3, #144	; 0x90
 80036b6:	d001      	beq.n	80036bc <MFRC522_Read+0x4e>
    {
        status = MI_ERR;
 80036b8:	2302      	movs	r3, #2
 80036ba:	73fb      	strb	r3, [r7, #15]
    }
    
    return status;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <MFRC522_Write>:
 * wait repeats data
 * Input: blockAddr - locations; writeData - write data
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Write(uint8_t blockAddr, uint8_t *writeData)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b08c      	sub	sp, #48	; 0x30
 80036ca:	af02      	add	r7, sp, #8
 80036cc:	4603      	mov	r3, r0
 80036ce:	6039      	str	r1, [r7, #0]
 80036d0:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint recvBits;
    uint8_t i;
	uint8_t buff[18]; 
    
    buff[0] = PICC_WRITE;
 80036d2:	23a0      	movs	r3, #160	; 0xa0
 80036d4:	733b      	strb	r3, [r7, #12]
    buff[1] = blockAddr;
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	737b      	strb	r3, [r7, #13]
    CalulateCRC(buff, 2, &buff[2]);
 80036da:	f107 030c 	add.w	r3, r7, #12
 80036de:	1c9a      	adds	r2, r3, #2
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	2102      	movs	r1, #2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fed3 	bl	8003492 <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 80036ec:	f107 020c 	add.w	r2, r7, #12
 80036f0:	f107 010c 	add.w	r1, r7, #12
 80036f4:	f107 0320 	add.w	r3, r7, #32
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	2204      	movs	r2, #4
 80036fe:	200c      	movs	r0, #12
 8003700:	f7ff fd9c 	bl	800323c <MFRC522_ToCard>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 800370a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800370e:	2b00      	cmp	r3, #0
 8003710:	d107      	bne.n	8003722 <MFRC522_Write+0x5c>
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d104      	bne.n	8003722 <MFRC522_Write+0x5c>
 8003718:	7b3b      	ldrb	r3, [r7, #12]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	2b0a      	cmp	r3, #10
 8003720:	d002      	beq.n	8003728 <MFRC522_Write+0x62>
    {   
		status = MI_ERR;   
 8003722:	2302      	movs	r3, #2
 8003724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
        
    if (status == MI_OK)
 8003728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800372c:	2b00      	cmp	r3, #0
 800372e:	d13f      	bne.n	80037b0 <MFRC522_Write+0xea>
    {
        for (i=0; i<16; i++)		//16 FIFO bytes recorded
 8003730:	2300      	movs	r3, #0
 8003732:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003736:	e00f      	b.n	8003758 <MFRC522_Write+0x92>
        {    
        	buff[i] = *(writeData+i);   
 8003738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	441a      	add	r2, r3
 8003740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	3328      	adds	r3, #40	; 0x28
 8003748:	443b      	add	r3, r7
 800374a:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i=0; i<16; i++)		//16 FIFO bytes recorded
 800374e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003752:	3301      	adds	r3, #1
 8003754:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d9eb      	bls.n	8003738 <MFRC522_Write+0x72>
        }
        CalulateCRC(buff, 16, &buff[16]);
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	f103 0210 	add.w	r2, r3, #16
 8003768:	f107 030c 	add.w	r3, r7, #12
 800376c:	2110      	movs	r1, #16
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fe8f 	bl	8003492 <CalulateCRC>
        status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
 8003774:	f107 020c 	add.w	r2, r7, #12
 8003778:	f107 010c 	add.w	r1, r7, #12
 800377c:	f107 0320 	add.w	r3, r7, #32
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	2212      	movs	r2, #18
 8003786:	200c      	movs	r0, #12
 8003788:	f7ff fd58 	bl	800323c <MFRC522_ToCard>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 8003792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <MFRC522_Write+0xe4>
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d104      	bne.n	80037aa <MFRC522_Write+0xe4>
 80037a0:	7b3b      	ldrb	r3, [r7, #12]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	2b0a      	cmp	r3, #10
 80037a8:	d002      	beq.n	80037b0 <MFRC522_Write+0xea>
        {   
			status = MI_ERR;   
 80037aa:	2302      	movs	r3, #2
 80037ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
    }
    
    return status;
 80037b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3728      	adds	r7, #40	; 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <HAL_MspInit+0x44>)
 80037c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c6:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <HAL_MspInit+0x44>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6613      	str	r3, [r2, #96]	; 0x60
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_MspInit+0x44>)
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_MspInit+0x44>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	4a08      	ldr	r2, [pc, #32]	; (8003800 <HAL_MspInit+0x44>)
 80037e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e4:	6593      	str	r3, [r2, #88]	; 0x58
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_MspInit+0x44>)
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000

08003804 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b0a4      	sub	sp, #144	; 0x90
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800380c:	f107 0308 	add.w	r3, r7, #8
 8003810:	2288      	movs	r2, #136	; 0x88
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f005 fcb7 	bl	8009188 <memset>
  if(hrtc->Instance==RTC)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a10      	ldr	r2, [pc, #64]	; (8003860 <HAL_RTC_MspInit+0x5c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d118      	bne.n	8003856 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003828:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800382a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800382e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003832:	f107 0308 	add.w	r3, r7, #8
 8003836:	4618      	mov	r0, r3
 8003838:	f001 fc56 	bl	80050e8 <HAL_RCCEx_PeriphCLKConfig>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003842:	f7ff f8a3 	bl	800298c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <HAL_RTC_MspInit+0x60>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	4a05      	ldr	r2, [pc, #20]	; (8003864 <HAL_RTC_MspInit+0x60>)
 800384e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003856:	bf00      	nop
 8003858:	3790      	adds	r7, #144	; 0x90
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40002800 	.word	0x40002800
 8003864:	40021000 	.word	0x40021000

08003868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <HAL_SPI_MspInit+0x7c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d128      	bne.n	80038dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800388a:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <HAL_SPI_MspInit+0x80>)
 800388c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <HAL_SPI_MspInit+0x80>)
 8003890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003894:	6613      	str	r3, [r2, #96]	; 0x60
 8003896:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_SPI_MspInit+0x80>)
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_SPI_MspInit+0x80>)
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <HAL_SPI_MspInit+0x80>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HAL_SPI_MspInit+0x80>)
 80038b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038ba:	23e0      	movs	r3, #224	; 0xe0
 80038bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c6:	2303      	movs	r3, #3
 80038c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038ca:	2305      	movs	r3, #5
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	4619      	mov	r1, r3
 80038d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d8:	f000 fbe0 	bl	800409c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038dc:	bf00      	nop
 80038de:	3728      	adds	r7, #40	; 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40013000 	.word	0x40013000
 80038e8:	40021000 	.word	0x40021000

080038ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d113      	bne.n	8003926 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <HAL_TIM_Base_MspInit+0x44>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <HAL_TIM_Base_MspInit+0x44>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6593      	str	r3, [r2, #88]	; 0x58
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_TIM_Base_MspInit+0x44>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003916:	2200      	movs	r2, #0
 8003918:	2100      	movs	r1, #0
 800391a:	201c      	movs	r0, #28
 800391c:	f000 fb09 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003920:	201c      	movs	r0, #28
 8003922:	f000 fb22 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000

08003934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b0ac      	sub	sp, #176	; 0xb0
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	2288      	movs	r2, #136	; 0x88
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f005 fc17 	bl	8009188 <memset>
  if(huart->Instance==USART1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <HAL_UART_MspInit+0xc4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d144      	bne.n	80039ee <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003968:	2300      	movs	r3, #0
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	4618      	mov	r0, r3
 8003972:	f001 fbb9 	bl	80050e8 <HAL_RCCEx_PeriphCLKConfig>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800397c:	f7ff f806 	bl	800298c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_UART_MspInit+0xc8>)
 8003982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003984:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <HAL_UART_MspInit+0xc8>)
 8003986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800398a:	6613      	str	r3, [r2, #96]	; 0x60
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_UART_MspInit+0xc8>)
 800398e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003998:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_UART_MspInit+0xc8>)
 800399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399c:	4a17      	ldr	r2, [pc, #92]	; (80039fc <HAL_UART_MspInit+0xc8>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039a4:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_UART_MspInit+0xc8>)
 80039a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c4:	2303      	movs	r3, #3
 80039c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039ca:	2307      	movs	r3, #7
 80039cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039d4:	4619      	mov	r1, r3
 80039d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039da:	f000 fb5f 	bl	800409c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	2025      	movs	r0, #37	; 0x25
 80039e4:	f000 faa5 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039e8:	2025      	movs	r0, #37	; 0x25
 80039ea:	f000 fabe 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039ee:	bf00      	nop
 80039f0:	37b0      	adds	r7, #176	; 0xb0
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40013800 	.word	0x40013800
 80039fc:	40021000 	.word	0x40021000

08003a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <NMI_Handler+0x4>

08003a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a0a:	e7fe      	b.n	8003a0a <HardFault_Handler+0x4>

08003a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a10:	e7fe      	b.n	8003a10 <MemManage_Handler+0x4>

08003a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a16:	e7fe      	b.n	8003a16 <BusFault_Handler+0x4>

08003a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <UsageFault_Handler+0x4>

08003a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a4c:	f000 f952 	bl	8003cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <TIM2_IRQHandler+0x10>)
 8003a5a:	f002 ffa8 	bl	80069ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000011c 	.word	0x2000011c

08003a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <USART1_IRQHandler+0x10>)
 8003a6e:	f003 fc99 	bl	80073a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000168 	.word	0x20000168

08003a7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	e00a      	b.n	8003aa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a8e:	f3af 8000 	nop.w
 8003a92:	4601      	mov	r1, r0
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	60ba      	str	r2, [r7, #8]
 8003a9a:	b2ca      	uxtb	r2, r1
 8003a9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	dbf0      	blt.n	8003a8e <_read+0x12>
  }

  return len;
 8003aac:	687b      	ldr	r3, [r7, #4]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e009      	b.n	8003adc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	60ba      	str	r2, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	dbf1      	blt.n	8003ac8 <_write+0x12>
  }
  return len;
 8003ae4:	687b      	ldr	r3, [r7, #4]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_close>:

int _close(int file)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b16:	605a      	str	r2, [r3, #4]
  return 0;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <_isatty>:

int _isatty(int file)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <_sbrk+0x5c>)
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <_sbrk+0x60>)
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b6c:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <_sbrk+0x64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <_sbrk+0x64>)
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <_sbrk+0x68>)
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <_sbrk+0x64>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d207      	bcs.n	8003b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b88:	f005 fb98 	bl	80092bc <__errno>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	220c      	movs	r2, #12
 8003b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b96:	e009      	b.n	8003bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <_sbrk+0x64>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a05      	ldr	r2, [pc, #20]	; (8003bbc <_sbrk+0x64>)
 8003ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20018000 	.word	0x20018000
 8003bb8:	00000400 	.word	0x00000400
 8003bbc:	20000a50 	.word	0x20000a50
 8003bc0:	20000ba8 	.word	0x20000ba8

08003bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <SystemInit+0x20>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <SystemInit+0x20>)
 8003bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003bec:	f7ff ffea 	bl	8003bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bf0:	480c      	ldr	r0, [pc, #48]	; (8003c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8003bf2:	490d      	ldr	r1, [pc, #52]	; (8003c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003bf4:	4a0d      	ldr	r2, [pc, #52]	; (8003c2c <LoopForever+0xe>)
  movs r3, #0
 8003bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf8:	e002      	b.n	8003c00 <LoopCopyDataInit>

08003bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfe:	3304      	adds	r3, #4

08003c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c04:	d3f9      	bcc.n	8003bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c08:	4c0a      	ldr	r4, [pc, #40]	; (8003c34 <LoopForever+0x16>)
  movs r3, #0
 8003c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c0c:	e001      	b.n	8003c12 <LoopFillZerobss>

08003c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c10:	3204      	adds	r2, #4

08003c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c14:	d3fb      	bcc.n	8003c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c16:	f005 fb57 	bl	80092c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c1a:	f7fc feff 	bl	8000a1c <main>

08003c1e <LoopForever>:

LoopForever:
    b LoopForever
 8003c1e:	e7fe      	b.n	8003c1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003c2c:	0800acf0 	.word	0x0800acf0
  ldr r2, =_sbss
 8003c30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003c34:	20000ba4 	.word	0x20000ba4

08003c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c38:	e7fe      	b.n	8003c38 <ADC1_2_IRQHandler>
	...

08003c3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <HAL_Init+0x3c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <HAL_Init+0x3c>)
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c52:	2003      	movs	r0, #3
 8003c54:	f000 f962 	bl	8003f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c58:	2000      	movs	r0, #0
 8003c5a:	f000 f80f 	bl	8003c7c <HAL_InitTick>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	71fb      	strb	r3, [r7, #7]
 8003c68:	e001      	b.n	8003c6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c6a:	f7ff fda7 	bl	80037bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40022000 	.word	0x40022000

08003c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003c88:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <HAL_InitTick+0x6c>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d023      	beq.n	8003cd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_InitTick+0x70>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_InitTick+0x6c>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f96d 	bl	8003f86 <HAL_SYSTICK_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10f      	bne.n	8003cd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	d809      	bhi.n	8003ccc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc0:	f000 f937 	bl	8003f32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cc4:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <HAL_InitTick+0x74>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e007      	b.n	8003cdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e004      	b.n	8003cdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	e001      	b.n	8003cdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000018 	.word	0x20000018
 8003cec:	20000010 	.word	0x20000010
 8003cf0:	20000014 	.word	0x20000014

08003cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_IncTick+0x20>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_IncTick+0x24>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <HAL_IncTick+0x24>)
 8003d06:	6013      	str	r3, [r2, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000018 	.word	0x20000018
 8003d18:	20000a54 	.word	0x20000a54

08003d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_GetTick+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000a54 	.word	0x20000a54

08003d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7ff ffee 	bl	8003d1c <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4c:	d005      	beq.n	8003d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_Delay+0x44>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d5a:	bf00      	nop
 8003d5c:	f7ff ffde 	bl	8003d1c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d8f7      	bhi.n	8003d5c <HAL_Delay+0x28>
  {
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000018 	.word	0x20000018

08003d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dae:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	60d3      	str	r3, [r2, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <__NVIC_GetPriorityGrouping+0x18>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	f003 0307 	and.w	r3, r3, #7
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	db0b      	blt.n	8003e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	f003 021f 	and.w	r2, r3, #31
 8003df8:	4907      	ldr	r1, [pc, #28]	; (8003e18 <__NVIC_EnableIRQ+0x38>)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2001      	movs	r0, #1
 8003e02:	fa00 f202 	lsl.w	r2, r0, r2
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db0a      	blt.n	8003e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	490c      	ldr	r1, [pc, #48]	; (8003e68 <__NVIC_SetPriority+0x4c>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e44:	e00a      	b.n	8003e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4908      	ldr	r1, [pc, #32]	; (8003e6c <__NVIC_SetPriority+0x50>)
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3b04      	subs	r3, #4
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	440b      	add	r3, r1
 8003e5a:	761a      	strb	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f1c3 0307 	rsb	r3, r3, #7
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	bf28      	it	cs
 8003e8e:	2304      	movcs	r3, #4
 8003e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d902      	bls.n	8003ea0 <NVIC_EncodePriority+0x30>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3b03      	subs	r3, #3
 8003e9e:	e000      	b.n	8003ea2 <NVIC_EncodePriority+0x32>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43d9      	mvns	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	4313      	orrs	r3, r2
         );
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	; 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee8:	d301      	bcc.n	8003eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00f      	b.n	8003f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <SysTick_Config+0x40>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003efc:	f7ff ff8e 	bl	8003e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <SysTick_Config+0x40>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <SysTick_Config+0x40>)
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	e000e010 	.word	0xe000e010

08003f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff29 	bl	8003d7c <__NVIC_SetPriorityGrouping>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff3e 	bl	8003dc4 <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff8e 	bl	8003e70 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5d 	bl	8003e1c <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff31 	bl	8003de0 <__NVIC_EnableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffa2 	bl	8003ed8 <SysTick_Config>
 8003f94:	4603      	mov	r3, r0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d008      	beq.n	8003fc8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e022      	b.n	800400e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 020e 	bic.w	r2, r2, #14
 8003fd6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fec:	f003 021c 	and.w	r2, r3, #28
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d005      	beq.n	800403e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2204      	movs	r2, #4
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e029      	b.n	8004092 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 020e 	bic.w	r2, r2, #14
 800404c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f003 021c 	and.w	r2, r3, #28
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f202 	lsl.w	r2, r1, r2
 8004070:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
    }
  }
  return status;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040aa:	e17f      	b.n	80043ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	2101      	movs	r1, #1
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8171 	beq.w	80043a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d005      	beq.n	80040dc <HAL_GPIO_Init+0x40>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d130      	bne.n	800413e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2203      	movs	r2, #3
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004112:	2201      	movs	r2, #1
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	f003 0201 	and.w	r2, r3, #1
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b03      	cmp	r3, #3
 8004148:	d118      	bne.n	800417c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004150:	2201      	movs	r2, #1
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	f003 0201 	and.w	r2, r3, #1
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b03      	cmp	r3, #3
 8004186:	d017      	beq.n	80041b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d123      	bne.n	800420c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	08da      	lsrs	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3208      	adds	r2, #8
 80041cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	220f      	movs	r2, #15
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4013      	ands	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	08da      	lsrs	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3208      	adds	r2, #8
 8004206:	6939      	ldr	r1, [r7, #16]
 8004208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0203 	and.w	r2, r3, #3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80ac 	beq.w	80043a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424e:	4b5f      	ldr	r3, [pc, #380]	; (80043cc <HAL_GPIO_Init+0x330>)
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	4a5e      	ldr	r2, [pc, #376]	; (80043cc <HAL_GPIO_Init+0x330>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6613      	str	r3, [r2, #96]	; 0x60
 800425a:	4b5c      	ldr	r3, [pc, #368]	; (80043cc <HAL_GPIO_Init+0x330>)
 800425c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004266:	4a5a      	ldr	r2, [pc, #360]	; (80043d0 <HAL_GPIO_Init+0x334>)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	3302      	adds	r3, #2
 800426e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004272:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	220f      	movs	r2, #15
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4013      	ands	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004290:	d025      	beq.n	80042de <HAL_GPIO_Init+0x242>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4f      	ldr	r2, [pc, #316]	; (80043d4 <HAL_GPIO_Init+0x338>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01f      	beq.n	80042da <HAL_GPIO_Init+0x23e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4e      	ldr	r2, [pc, #312]	; (80043d8 <HAL_GPIO_Init+0x33c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d019      	beq.n	80042d6 <HAL_GPIO_Init+0x23a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4d      	ldr	r2, [pc, #308]	; (80043dc <HAL_GPIO_Init+0x340>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_GPIO_Init+0x236>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4c      	ldr	r2, [pc, #304]	; (80043e0 <HAL_GPIO_Init+0x344>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00d      	beq.n	80042ce <HAL_GPIO_Init+0x232>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4b      	ldr	r2, [pc, #300]	; (80043e4 <HAL_GPIO_Init+0x348>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <HAL_GPIO_Init+0x22e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4a      	ldr	r2, [pc, #296]	; (80043e8 <HAL_GPIO_Init+0x34c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_GPIO_Init+0x22a>
 80042c2:	2306      	movs	r3, #6
 80042c4:	e00c      	b.n	80042e0 <HAL_GPIO_Init+0x244>
 80042c6:	2307      	movs	r3, #7
 80042c8:	e00a      	b.n	80042e0 <HAL_GPIO_Init+0x244>
 80042ca:	2305      	movs	r3, #5
 80042cc:	e008      	b.n	80042e0 <HAL_GPIO_Init+0x244>
 80042ce:	2304      	movs	r3, #4
 80042d0:	e006      	b.n	80042e0 <HAL_GPIO_Init+0x244>
 80042d2:	2303      	movs	r3, #3
 80042d4:	e004      	b.n	80042e0 <HAL_GPIO_Init+0x244>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e002      	b.n	80042e0 <HAL_GPIO_Init+0x244>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <HAL_GPIO_Init+0x244>
 80042de:	2300      	movs	r3, #0
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	f002 0203 	and.w	r2, r2, #3
 80042e6:	0092      	lsls	r2, r2, #2
 80042e8:	4093      	lsls	r3, r2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042f0:	4937      	ldr	r1, [pc, #220]	; (80043d0 <HAL_GPIO_Init+0x334>)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	3302      	adds	r3, #2
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042fe:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <HAL_GPIO_Init+0x350>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	43db      	mvns	r3, r3
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004322:	4a32      	ldr	r2, [pc, #200]	; (80043ec <HAL_GPIO_Init+0x350>)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004328:	4b30      	ldr	r3, [pc, #192]	; (80043ec <HAL_GPIO_Init+0x350>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	43db      	mvns	r3, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <HAL_GPIO_Init+0x350>)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004352:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_GPIO_Init+0x350>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	43db      	mvns	r3, r3
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4013      	ands	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004376:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <HAL_GPIO_Init+0x350>)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_GPIO_Init+0x350>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	43db      	mvns	r3, r3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4013      	ands	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043a0:	4a12      	ldr	r2, [pc, #72]	; (80043ec <HAL_GPIO_Init+0x350>)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	3301      	adds	r3, #1
 80043aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fa22 f303 	lsr.w	r3, r2, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f47f ae78 	bne.w	80040ac <HAL_GPIO_Init+0x10>
  }
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	40010000 	.word	0x40010000
 80043d4:	48000400 	.word	0x48000400
 80043d8:	48000800 	.word	0x48000800
 80043dc:	48000c00 	.word	0x48000c00
 80043e0:	48001000 	.word	0x48001000
 80043e4:	48001400 	.word	0x48001400
 80043e8:	48001800 	.word	0x48001800
 80043ec:	40010400 	.word	0x40010400

080043f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
 80043fc:	4613      	mov	r3, r2
 80043fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004400:	787b      	ldrb	r3, [r7, #1]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004406:	887a      	ldrh	r2, [r7, #2]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800440c:	e002      	b.n	8004414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <HAL_PWREx_GetVoltageRange+0x18>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40007000 	.word	0x40007000

0800443c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800444a:	d130      	bne.n	80044ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800444c:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004458:	d038      	beq.n	80044cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004462:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004468:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2232      	movs	r2, #50	; 0x32
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	0c9b      	lsrs	r3, r3, #18
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004480:	e002      	b.n	8004488 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3b01      	subs	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d102      	bne.n	800449c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f2      	bne.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a8:	d110      	bne.n	80044cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e00f      	b.n	80044ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ba:	d007      	beq.n	80044cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044bc:	4b07      	ldr	r3, [pc, #28]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044c4:	4a05      	ldr	r2, [pc, #20]	; (80044dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40007000 	.word	0x40007000
 80044e0:	20000010 	.word	0x20000010
 80044e4:	431bde83 	.word	0x431bde83

080044e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e3ca      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fa:	4b97      	ldr	r3, [pc, #604]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004504:	4b94      	ldr	r3, [pc, #592]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80e4 	beq.w	80046e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <HAL_RCC_OscConfig+0x4a>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b0c      	cmp	r3, #12
 8004526:	f040 808b 	bne.w	8004640 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b01      	cmp	r3, #1
 800452e:	f040 8087 	bne.w	8004640 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004532:	4b89      	ldr	r3, [pc, #548]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_RCC_OscConfig+0x62>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e3a2      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	4b82      	ldr	r3, [pc, #520]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <HAL_RCC_OscConfig+0x7c>
 800455a:	4b7f      	ldr	r3, [pc, #508]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004562:	e005      	b.n	8004570 <HAL_RCC_OscConfig+0x88>
 8004564:	4b7c      	ldr	r3, [pc, #496]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004570:	4293      	cmp	r3, r2
 8004572:	d223      	bcs.n	80045bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fd55 	bl	8005028 <RCC_SetFlashLatencyFromMSIRange>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e383      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004588:	4b73      	ldr	r3, [pc, #460]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a72      	ldr	r2, [pc, #456]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800458e:	f043 0308 	orr.w	r3, r3, #8
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b70      	ldr	r3, [pc, #448]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	496d      	ldr	r1, [pc, #436]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a6:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	4968      	ldr	r1, [pc, #416]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]
 80045ba:	e025      	b.n	8004608 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045bc:	4b66      	ldr	r3, [pc, #408]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a65      	ldr	r2, [pc, #404]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80045c2:	f043 0308 	orr.w	r3, r3, #8
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b63      	ldr	r3, [pc, #396]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	4960      	ldr	r1, [pc, #384]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045da:	4b5f      	ldr	r3, [pc, #380]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	495b      	ldr	r1, [pc, #364]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fd15 	bl	8005028 <RCC_SetFlashLatencyFromMSIRange>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e343      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004608:	f000 fc4a 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 800460c:	4602      	mov	r2, r0
 800460e:	4b52      	ldr	r3, [pc, #328]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	091b      	lsrs	r3, r3, #4
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	4950      	ldr	r1, [pc, #320]	; (800475c <HAL_RCC_OscConfig+0x274>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	4a4e      	ldr	r2, [pc, #312]	; (8004760 <HAL_RCC_OscConfig+0x278>)
 8004626:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004628:	4b4e      	ldr	r3, [pc, #312]	; (8004764 <HAL_RCC_OscConfig+0x27c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fb25 	bl	8003c7c <HAL_InitTick>
 8004632:	4603      	mov	r3, r0
 8004634:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d052      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	e327      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d032      	beq.n	80046ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a42      	ldr	r2, [pc, #264]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004654:	f7ff fb62 	bl	8003d1c <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800465c:	f7ff fb5e 	bl	8003d1c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e310      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800466e:	4b3a      	ldr	r3, [pc, #232]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800467a:	4b37      	ldr	r3, [pc, #220]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a36      	ldr	r2, [pc, #216]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004680:	f043 0308 	orr.w	r3, r3, #8
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	4931      	ldr	r1, [pc, #196]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004698:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	492c      	ldr	r1, [pc, #176]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
 80046ac:	e01a      	b.n	80046e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a29      	ldr	r2, [pc, #164]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046ba:	f7ff fb2f 	bl	8003d1c <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046c2:	f7ff fb2b 	bl	8003d1c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e2dd      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046d4:	4b20      	ldr	r3, [pc, #128]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_OscConfig+0x1da>
 80046e0:	e000      	b.n	80046e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d074      	beq.n	80047da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_OscConfig+0x21a>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d10e      	bne.n	800471a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d10b      	bne.n	800471a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004702:	4b15      	ldr	r3, [pc, #84]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d064      	beq.n	80047d8 <HAL_RCC_OscConfig+0x2f0>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d160      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e2ba      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004722:	d106      	bne.n	8004732 <HAL_RCC_OscConfig+0x24a>
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0b      	ldr	r2, [pc, #44]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800472a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e026      	b.n	8004780 <HAL_RCC_OscConfig+0x298>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800473a:	d115      	bne.n	8004768 <HAL_RCC_OscConfig+0x280>
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a05      	ldr	r2, [pc, #20]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 8004742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a02      	ldr	r2, [pc, #8]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e014      	b.n	8004780 <HAL_RCC_OscConfig+0x298>
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	0800ab48 	.word	0x0800ab48
 8004760:	20000010 	.word	0x20000010
 8004764:	20000014 	.word	0x20000014
 8004768:	4ba0      	ldr	r3, [pc, #640]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a9f      	ldr	r2, [pc, #636]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 800476e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	4b9d      	ldr	r3, [pc, #628]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a9c      	ldr	r2, [pc, #624]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 800477a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d013      	beq.n	80047b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7ff fac8 	bl	8003d1c <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7ff fac4 	bl	8003d1c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e276      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a2:	4b92      	ldr	r3, [pc, #584]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x2a8>
 80047ae:	e014      	b.n	80047da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7ff fab4 	bl	8003d1c <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7ff fab0 	bl	8003d1c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e262      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ca:	4b88      	ldr	r3, [pc, #544]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x2d0>
 80047d6:	e000      	b.n	80047da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d060      	beq.n	80048a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_OscConfig+0x310>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d119      	bne.n	8004826 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d116      	bne.n	8004826 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f8:	4b7c      	ldr	r3, [pc, #496]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_OscConfig+0x328>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e23f      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004810:	4b76      	ldr	r3, [pc, #472]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	4973      	ldr	r1, [pc, #460]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004824:	e040      	b.n	80048a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d023      	beq.n	8004876 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800482e:	4b6f      	ldr	r3, [pc, #444]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a6e      	ldr	r2, [pc, #440]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7ff fa6f 	bl	8003d1c <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004842:	f7ff fa6b 	bl	8003d1c <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e21d      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004854:	4b65      	ldr	r3, [pc, #404]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	4b62      	ldr	r3, [pc, #392]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	495f      	ldr	r1, [pc, #380]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
 8004874:	e018      	b.n	80048a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004876:	4b5d      	ldr	r3, [pc, #372]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a5c      	ldr	r2, [pc, #368]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 800487c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7ff fa4b 	bl	8003d1c <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488a:	f7ff fa47 	bl	8003d1c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e1f9      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800489c:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f0      	bne.n	800488a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d03c      	beq.n	800492e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01c      	beq.n	80048f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048bc:	4b4b      	ldr	r3, [pc, #300]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80048be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c2:	4a4a      	ldr	r2, [pc, #296]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7ff fa26 	bl	8003d1c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d4:	f7ff fa22 	bl	8003d1c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e1d4      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e6:	4b41      	ldr	r3, [pc, #260]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80048e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <HAL_RCC_OscConfig+0x3ec>
 80048f4:	e01b      	b.n	800492e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f6:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80048f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fc:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004906:	f7ff fa09 	bl	8003d1c <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490e:	f7ff fa05 	bl	8003d1c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1b7      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004920:	4b32      	ldr	r3, [pc, #200]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1ef      	bne.n	800490e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80a6 	beq.w	8004a88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493c:	2300      	movs	r3, #0
 800493e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004940:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10d      	bne.n	8004968 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494c:	4b27      	ldr	r3, [pc, #156]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 8004952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004956:	6593      	str	r3, [r2, #88]	; 0x58
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004964:	2301      	movs	r3, #1
 8004966:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <HAL_RCC_OscConfig+0x508>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d118      	bne.n	80049a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004974:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <HAL_RCC_OscConfig+0x508>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <HAL_RCC_OscConfig+0x508>)
 800497a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004980:	f7ff f9cc 	bl	8003d1c <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004988:	f7ff f9c8 	bl	8003d1c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e17a      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <HAL_RCC_OscConfig+0x508>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d108      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4d8>
 80049ae:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	4a0d      	ldr	r2, [pc, #52]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049be:	e029      	b.n	8004a14 <HAL_RCC_OscConfig+0x52c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d115      	bne.n	80049f4 <HAL_RCC_OscConfig+0x50c>
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	4a07      	ldr	r2, [pc, #28]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80049d0:	f043 0304 	orr.w	r3, r3, #4
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	4a03      	ldr	r2, [pc, #12]	; (80049ec <HAL_RCC_OscConfig+0x504>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e8:	e014      	b.n	8004a14 <HAL_RCC_OscConfig+0x52c>
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40007000 	.word	0x40007000
 80049f4:	4b9c      	ldr	r3, [pc, #624]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	4a9b      	ldr	r2, [pc, #620]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a04:	4b98      	ldr	r3, [pc, #608]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	4a97      	ldr	r2, [pc, #604]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004a0c:	f023 0304 	bic.w	r3, r3, #4
 8004a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d016      	beq.n	8004a4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7ff f97e 	bl	8003d1c <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a24:	f7ff f97a 	bl	8003d1c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e12a      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a3a:	4b8b      	ldr	r3, [pc, #556]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ed      	beq.n	8004a24 <HAL_RCC_OscConfig+0x53c>
 8004a48:	e015      	b.n	8004a76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4a:	f7ff f967 	bl	8003d1c <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7ff f963 	bl	8003d1c <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e113      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a68:	4b7f      	ldr	r3, [pc, #508]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ed      	bne.n	8004a52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a76:	7ffb      	ldrb	r3, [r7, #31]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7c:	4b7a      	ldr	r3, [pc, #488]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a80:	4a79      	ldr	r2, [pc, #484]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80fe 	beq.w	8004c8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	f040 80d0 	bne.w	8004c3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a9c:	4b72      	ldr	r3, [pc, #456]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f003 0203 	and.w	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d130      	bne.n	8004b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	3b01      	subs	r3, #1
 8004abc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d127      	bne.n	8004b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d11f      	bne.n	8004b12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004adc:	2a07      	cmp	r2, #7
 8004ade:	bf14      	ite	ne
 8004ae0:	2201      	movne	r2, #1
 8004ae2:	2200      	moveq	r2, #0
 8004ae4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d113      	bne.n	8004b12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	3b01      	subs	r3, #1
 8004af8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d06e      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d069      	beq.n	8004bec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b18:	4b53      	ldr	r3, [pc, #332]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b24:	4b50      	ldr	r3, [pc, #320]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0ad      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b34:	4b4c      	ldr	r3, [pc, #304]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a4b      	ldr	r2, [pc, #300]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b40:	f7ff f8ec 	bl	8003d1c <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b48:	f7ff f8e8 	bl	8003d1c <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e09a      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b5a:	4b43      	ldr	r3, [pc, #268]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b66:	4b40      	ldr	r3, [pc, #256]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	4b40      	ldr	r3, [pc, #256]	; (8004c6c <HAL_RCC_OscConfig+0x784>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0112      	lsls	r2, r2, #4
 8004b7a:	4311      	orrs	r1, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b80:	0212      	lsls	r2, r2, #8
 8004b82:	4311      	orrs	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b88:	0852      	lsrs	r2, r2, #1
 8004b8a:	3a01      	subs	r2, #1
 8004b8c:	0552      	lsls	r2, r2, #21
 8004b8e:	4311      	orrs	r1, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b94:	0852      	lsrs	r2, r2, #1
 8004b96:	3a01      	subs	r2, #1
 8004b98:	0652      	lsls	r2, r2, #25
 8004b9a:	4311      	orrs	r1, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ba0:	0912      	lsrs	r2, r2, #4
 8004ba2:	0452      	lsls	r2, r2, #17
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	4930      	ldr	r1, [pc, #192]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bac:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a2d      	ldr	r2, [pc, #180]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bc4:	f7ff f8aa 	bl	8003d1c <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bcc:	f7ff f8a6 	bl	8003d1c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e058      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bde:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bea:	e050      	b.n	8004c8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e04f      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d148      	bne.n	8004c8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c08:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c14:	f7ff f882 	bl	8003d1c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7ff f87e 	bl	8003d1c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e030      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x734>
 8004c3a:	e028      	b.n	8004c8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d023      	beq.n	8004c8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <HAL_RCC_OscConfig+0x780>)
 8004c48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7ff f865 	bl	8003d1c <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c54:	e00c      	b.n	8004c70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c56:	f7ff f861 	bl	8003d1c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d905      	bls.n	8004c70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e013      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_OscConfig+0x7b0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ec      	bne.n	8004c56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_RCC_OscConfig+0x7b0>)
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	4905      	ldr	r1, [pc, #20]	; (8004c98 <HAL_RCC_OscConfig+0x7b0>)
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_RCC_OscConfig+0x7b4>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	60cb      	str	r3, [r1, #12]
 8004c88:	e001      	b.n	8004c8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	feeefffc 	.word	0xfeeefffc

08004ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0e7      	b.n	8004e84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b75      	ldr	r3, [pc, #468]	; (8004e8c <HAL_RCC_ClockConfig+0x1ec>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d910      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b72      	ldr	r3, [pc, #456]	; (8004e8c <HAL_RCC_ClockConfig+0x1ec>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 0207 	bic.w	r2, r3, #7
 8004cca:	4970      	ldr	r1, [pc, #448]	; (8004e8c <HAL_RCC_ClockConfig+0x1ec>)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd2:	4b6e      	ldr	r3, [pc, #440]	; (8004e8c <HAL_RCC_ClockConfig+0x1ec>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0cf      	b.n	8004e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d010      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	4b66      	ldr	r3, [pc, #408]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d908      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d00:	4b63      	ldr	r3, [pc, #396]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4960      	ldr	r1, [pc, #384]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d04c      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d107      	bne.n	8004d36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d26:	4b5a      	ldr	r3, [pc, #360]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d121      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e0a6      	b.n	8004e84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d3e:	4b54      	ldr	r3, [pc, #336]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d115      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e09a      	b.n	8004e84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d56:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e08e      	b.n	8004e84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d66:	4b4a      	ldr	r3, [pc, #296]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e086      	b.n	8004e84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d76:	4b46      	ldr	r3, [pc, #280]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 0203 	bic.w	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4943      	ldr	r1, [pc, #268]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d88:	f7fe ffc8 	bl	8003d1c <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d90:	f7fe ffc4 	bl	8003d1c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e06e      	b.n	8004e84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	4b3a      	ldr	r3, [pc, #232]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 020c 	and.w	r2, r3, #12
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d1eb      	bne.n	8004d90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d010      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	4b31      	ldr	r3, [pc, #196]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d208      	bcs.n	8004de6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd4:	4b2e      	ldr	r3, [pc, #184]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	492b      	ldr	r1, [pc, #172]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <HAL_RCC_ClockConfig+0x1ec>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d210      	bcs.n	8004e16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_RCC_ClockConfig+0x1ec>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f023 0207 	bic.w	r2, r3, #7
 8004dfc:	4923      	ldr	r1, [pc, #140]	; (8004e8c <HAL_RCC_ClockConfig+0x1ec>)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e04:	4b21      	ldr	r3, [pc, #132]	; (8004e8c <HAL_RCC_ClockConfig+0x1ec>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d001      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e036      	b.n	8004e84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e22:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	4918      	ldr	r1, [pc, #96]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e40:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4910      	ldr	r1, [pc, #64]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e54:	f000 f824 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <HAL_RCC_ClockConfig+0x1f0>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	490b      	ldr	r1, [pc, #44]	; (8004e94 <HAL_RCC_ClockConfig+0x1f4>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e70:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <HAL_RCC_ClockConfig+0x1f8>)
 8004e72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e74:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_ClockConfig+0x1fc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe feff 	bl	8003c7c <HAL_InitTick>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e82:	7afb      	ldrb	r3, [r7, #11]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40022000 	.word	0x40022000
 8004e90:	40021000 	.word	0x40021000
 8004e94:	0800ab48 	.word	0x0800ab48
 8004e98:	20000010 	.word	0x20000010
 8004e9c:	20000014 	.word	0x20000014

08004ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	; 0x24
 8004ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eae:	4b3e      	ldr	r3, [pc, #248]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb8:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b0c      	cmp	r3, #12
 8004ecc:	d121      	bne.n	8004f12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d11e      	bne.n	8004f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ed4:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ee0:	4b31      	ldr	r3, [pc, #196]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	0a1b      	lsrs	r3, r3, #8
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	e005      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004efc:	4a2b      	ldr	r2, [pc, #172]	; (8004fac <HAL_RCC_GetSysClockFreq+0x10c>)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10d      	bne.n	8004f28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f10:	e00a      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d102      	bne.n	8004f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f18:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	e004      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f24:	4b23      	ldr	r3, [pc, #140]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d134      	bne.n	8004f98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d003      	beq.n	8004f46 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d003      	beq.n	8004f4c <HAL_RCC_GetSysClockFreq+0xac>
 8004f44:	e005      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f46:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f48:	617b      	str	r3, [r7, #20]
      break;
 8004f4a:	e005      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f4e:	617b      	str	r3, [r7, #20]
      break;
 8004f50:	e002      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	617b      	str	r3, [r7, #20]
      break;
 8004f56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f58:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	3301      	adds	r3, #1
 8004f64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	fb03 f202 	mul.w	r2, r3, r2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	0e5b      	lsrs	r3, r3, #25
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	3301      	adds	r3, #1
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f98:	69bb      	ldr	r3, [r7, #24]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3724      	adds	r7, #36	; 0x24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	0800ab60 	.word	0x0800ab60
 8004fb0:	00f42400 	.word	0x00f42400
 8004fb4:	007a1200 	.word	0x007a1200

08004fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fbc:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000010 	.word	0x20000010

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fd4:	f7ff fff0 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	0a1b      	lsrs	r3, r3, #8
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	0800ab58 	.word	0x0800ab58

08004ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005000:	f7ff ffda 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0adb      	lsrs	r3, r3, #11
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4904      	ldr	r1, [pc, #16]	; (8005024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	0800ab58 	.word	0x0800ab58

08005028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005034:	4b2a      	ldr	r3, [pc, #168]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005040:	f7ff f9ee 	bl	8004420 <HAL_PWREx_GetVoltageRange>
 8005044:	6178      	str	r0, [r7, #20]
 8005046:	e014      	b.n	8005072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800504a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504c:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800504e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005052:	6593      	str	r3, [r2, #88]	; 0x58
 8005054:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005060:	f7ff f9de 	bl	8004420 <HAL_PWREx_GetVoltageRange>
 8005064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4b1e      	ldr	r3, [pc, #120]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	4a1d      	ldr	r2, [pc, #116]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005078:	d10b      	bne.n	8005092 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b80      	cmp	r3, #128	; 0x80
 800507e:	d919      	bls.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2ba0      	cmp	r3, #160	; 0xa0
 8005084:	d902      	bls.n	800508c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005086:	2302      	movs	r3, #2
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	e013      	b.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800508c:	2301      	movs	r3, #1
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	e010      	b.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b80      	cmp	r3, #128	; 0x80
 8005096:	d902      	bls.n	800509e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005098:	2303      	movs	r3, #3
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	e00a      	b.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b80      	cmp	r3, #128	; 0x80
 80050a2:	d102      	bne.n	80050aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050a4:	2302      	movs	r3, #2
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	e004      	b.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b70      	cmp	r3, #112	; 0x70
 80050ae:	d101      	bne.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050b0:	2301      	movs	r3, #1
 80050b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f023 0207 	bic.w	r2, r3, #7
 80050bc:	4909      	ldr	r1, [pc, #36]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050c4:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d001      	beq.n	80050d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40022000 	.word	0x40022000

080050e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050f0:	2300      	movs	r3, #0
 80050f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050f4:	2300      	movs	r3, #0
 80050f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005100:	2b00      	cmp	r3, #0
 8005102:	d041      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005108:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800510c:	d02a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800510e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005112:	d824      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005118:	d008      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800511a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800511e:	d81e      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005128:	d010      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800512a:	e018      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800512c:	4b86      	ldr	r3, [pc, #536]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4a85      	ldr	r2, [pc, #532]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005136:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005138:	e015      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fabb 	bl	80056bc <RCCEx_PLLSAI1_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800514a:	e00c      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3320      	adds	r3, #32
 8005150:	2100      	movs	r1, #0
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fba6 	bl	80058a4 <RCCEx_PLLSAI2_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800515c:	e003      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	74fb      	strb	r3, [r7, #19]
      break;
 8005162:	e000      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800516c:	4b76      	ldr	r3, [pc, #472]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800517a:	4973      	ldr	r1, [pc, #460]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005182:	e001      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d041      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005198:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800519c:	d02a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800519e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051a2:	d824      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051a8:	d008      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ae:	d81e      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051b8:	d010      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051ba:	e018      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051bc:	4b62      	ldr	r3, [pc, #392]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4a61      	ldr	r2, [pc, #388]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051c8:	e015      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fa73 	bl	80056bc <RCCEx_PLLSAI1_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051da:	e00c      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3320      	adds	r3, #32
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fb5e 	bl	80058a4 <RCCEx_PLLSAI2_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051ec:	e003      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	74fb      	strb	r3, [r7, #19]
      break;
 80051f2:	e000      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051fc:	4b52      	ldr	r3, [pc, #328]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800520a:	494f      	ldr	r1, [pc, #316]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005212:	e001      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a0 	beq.w	8005366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2300      	movs	r3, #0
 8005228:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800522a:	4b47      	ldr	r3, [pc, #284]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005240:	4b41      	ldr	r3, [pc, #260]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	4a40      	ldr	r2, [pc, #256]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524a:	6593      	str	r3, [r2, #88]	; 0x58
 800524c:	4b3e      	ldr	r3, [pc, #248]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005258:	2301      	movs	r3, #1
 800525a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800525c:	4b3b      	ldr	r3, [pc, #236]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3a      	ldr	r2, [pc, #232]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005268:	f7fe fd58 	bl	8003d1c <HAL_GetTick>
 800526c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800526e:	e009      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005270:	f7fe fd54 	bl	8003d1c <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d902      	bls.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	74fb      	strb	r3, [r7, #19]
        break;
 8005282:	e005      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005284:	4b31      	ldr	r3, [pc, #196]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ef      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d15c      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005296:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01f      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d019      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052b4:	4b24      	ldr	r3, [pc, #144]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c0:	4b21      	ldr	r3, [pc, #132]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c6:	4a20      	ldr	r2, [pc, #128]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e0:	4a19      	ldr	r2, [pc, #100]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d016      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fe fd13 	bl	8003d1c <HAL_GetTick>
 80052f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f8:	e00b      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fe fd0f 	bl	8003d1c <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d902      	bls.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	74fb      	strb	r3, [r7, #19]
            break;
 8005310:	e006      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005312:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ec      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005320:	7cfb      	ldrb	r3, [r7, #19]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10c      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005326:	4b08      	ldr	r3, [pc, #32]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005336:	4904      	ldr	r1, [pc, #16]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800533e:	e009      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	74bb      	strb	r3, [r7, #18]
 8005344:	e006      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000
 800534c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005354:	7c7b      	ldrb	r3, [r7, #17]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d105      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535a:	4b9e      	ldr	r3, [pc, #632]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	4a9d      	ldr	r2, [pc, #628]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005364:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005372:	4b98      	ldr	r3, [pc, #608]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f023 0203 	bic.w	r2, r3, #3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	4994      	ldr	r1, [pc, #592]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005394:	4b8f      	ldr	r3, [pc, #572]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f023 020c 	bic.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	498c      	ldr	r1, [pc, #560]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053b6:	4b87      	ldr	r3, [pc, #540]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	4983      	ldr	r1, [pc, #524]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053d8:	4b7e      	ldr	r3, [pc, #504]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	497b      	ldr	r1, [pc, #492]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fa:	4b76      	ldr	r3, [pc, #472]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005408:	4972      	ldr	r1, [pc, #456]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800541c:	4b6d      	ldr	r3, [pc, #436]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542a:	496a      	ldr	r1, [pc, #424]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800543e:	4b65      	ldr	r3, [pc, #404]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	4961      	ldr	r1, [pc, #388]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005460:	4b5c      	ldr	r3, [pc, #368]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546e:	4959      	ldr	r1, [pc, #356]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005482:	4b54      	ldr	r3, [pc, #336]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005488:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	4950      	ldr	r1, [pc, #320]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a4:	4b4b      	ldr	r3, [pc, #300]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	4948      	ldr	r1, [pc, #288]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c6:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	493f      	ldr	r1, [pc, #252]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d028      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e8:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f6:	4937      	ldr	r1, [pc, #220]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005506:	d106      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005508:	4b32      	ldr	r3, [pc, #200]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a31      	ldr	r2, [pc, #196]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005512:	60d3      	str	r3, [r2, #12]
 8005514:	e011      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800551e:	d10c      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	2101      	movs	r1, #1
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f8c8 	bl	80056bc <RCCEx_PLLSAI1_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005536:	7cfb      	ldrb	r3, [r7, #19]
 8005538:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d028      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	491f      	ldr	r1, [pc, #124]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005564:	d106      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	4a1a      	ldr	r2, [pc, #104]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005570:	60d3      	str	r3, [r2, #12]
 8005572:	e011      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800557c:	d10c      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	2101      	movs	r1, #1
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f899 	bl	80056bc <RCCEx_PLLSAI1_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005594:	7cfb      	ldrb	r3, [r7, #19]
 8005596:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02b      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b2:	4908      	ldr	r1, [pc, #32]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c2:	d109      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4a02      	ldr	r2, [pc, #8]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ce:	60d3      	str	r3, [r2, #12]
 80055d0:	e014      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e0:	d10c      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2101      	movs	r1, #1
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 f867 	bl	80056bc <RCCEx_PLLSAI1_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055f2:	7cfb      	ldrb	r3, [r7, #19]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d02f      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005608:	4b2b      	ldr	r3, [pc, #172]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005616:	4928      	ldr	r1, [pc, #160]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005626:	d10d      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3304      	adds	r3, #4
 800562c:	2102      	movs	r1, #2
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f844 	bl	80056bc <RCCEx_PLLSAI1_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d014      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800563e:	7cfb      	ldrb	r3, [r7, #19]
 8005640:	74bb      	strb	r3, [r7, #18]
 8005642:	e011      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800564c:	d10c      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3320      	adds	r3, #32
 8005652:	2102      	movs	r1, #2
 8005654:	4618      	mov	r0, r3
 8005656:	f000 f925 	bl	80058a4 <RCCEx_PLLSAI2_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005674:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005682:	490d      	ldr	r1, [pc, #52]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005696:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a6:	4904      	ldr	r1, [pc, #16]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40021000 	.word	0x40021000

080056bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056ca:	4b75      	ldr	r3, [pc, #468]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d018      	beq.n	8005708 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056d6:	4b72      	ldr	r3, [pc, #456]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0203 	and.w	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d10d      	bne.n	8005702 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
       ||
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056ee:	4b6c      	ldr	r3, [pc, #432]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	091b      	lsrs	r3, r3, #4
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
       ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d047      	beq.n	8005792 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
 8005706:	e044      	b.n	8005792 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b03      	cmp	r3, #3
 800570e:	d018      	beq.n	8005742 <RCCEx_PLLSAI1_Config+0x86>
 8005710:	2b03      	cmp	r3, #3
 8005712:	d825      	bhi.n	8005760 <RCCEx_PLLSAI1_Config+0xa4>
 8005714:	2b01      	cmp	r3, #1
 8005716:	d002      	beq.n	800571e <RCCEx_PLLSAI1_Config+0x62>
 8005718:	2b02      	cmp	r3, #2
 800571a:	d009      	beq.n	8005730 <RCCEx_PLLSAI1_Config+0x74>
 800571c:	e020      	b.n	8005760 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800571e:	4b60      	ldr	r3, [pc, #384]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d11d      	bne.n	8005766 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800572e:	e01a      	b.n	8005766 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005730:	4b5b      	ldr	r3, [pc, #364]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005738:	2b00      	cmp	r3, #0
 800573a:	d116      	bne.n	800576a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005740:	e013      	b.n	800576a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005742:	4b57      	ldr	r3, [pc, #348]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10f      	bne.n	800576e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800574e:	4b54      	ldr	r3, [pc, #336]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800575e:	e006      	b.n	800576e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	e004      	b.n	8005770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800576e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005776:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	3b01      	subs	r3, #1
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	430b      	orrs	r3, r1
 800578c:	4944      	ldr	r1, [pc, #272]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800578e:	4313      	orrs	r3, r2
 8005790:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d17d      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005798:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a40      	ldr	r2, [pc, #256]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a4:	f7fe faba 	bl	8003d1c <HAL_GetTick>
 80057a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057aa:	e009      	b.n	80057c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ac:	f7fe fab6 	bl	8003d1c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d902      	bls.n	80057c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	73fb      	strb	r3, [r7, #15]
        break;
 80057be:	e005      	b.n	80057cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057c0:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ef      	bne.n	80057ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d160      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d111      	bne.n	80057fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057d8:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6892      	ldr	r2, [r2, #8]
 80057e8:	0211      	lsls	r1, r2, #8
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68d2      	ldr	r2, [r2, #12]
 80057ee:	0912      	lsrs	r2, r2, #4
 80057f0:	0452      	lsls	r2, r2, #17
 80057f2:	430a      	orrs	r2, r1
 80057f4:	492a      	ldr	r1, [pc, #168]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	610b      	str	r3, [r1, #16]
 80057fa:	e027      	b.n	800584c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d112      	bne.n	8005828 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005802:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800580a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6892      	ldr	r2, [r2, #8]
 8005812:	0211      	lsls	r1, r2, #8
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6912      	ldr	r2, [r2, #16]
 8005818:	0852      	lsrs	r2, r2, #1
 800581a:	3a01      	subs	r2, #1
 800581c:	0552      	lsls	r2, r2, #21
 800581e:	430a      	orrs	r2, r1
 8005820:	491f      	ldr	r1, [pc, #124]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005822:	4313      	orrs	r3, r2
 8005824:	610b      	str	r3, [r1, #16]
 8005826:	e011      	b.n	800584c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005828:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005830:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6892      	ldr	r2, [r2, #8]
 8005838:	0211      	lsls	r1, r2, #8
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6952      	ldr	r2, [r2, #20]
 800583e:	0852      	lsrs	r2, r2, #1
 8005840:	3a01      	subs	r2, #1
 8005842:	0652      	lsls	r2, r2, #25
 8005844:	430a      	orrs	r2, r1
 8005846:	4916      	ldr	r1, [pc, #88]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005848:	4313      	orrs	r3, r2
 800584a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800584c:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fe fa60 	bl	8003d1c <HAL_GetTick>
 800585c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800585e:	e009      	b.n	8005874 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005860:	f7fe fa5c 	bl	8003d1c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d902      	bls.n	8005874 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	73fb      	strb	r3, [r7, #15]
          break;
 8005872:	e005      	b.n	8005880 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0ef      	beq.n	8005860 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	4904      	ldr	r1, [pc, #16]	; (80058a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005890:	4313      	orrs	r3, r2
 8005892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40021000 	.word	0x40021000

080058a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058b2:	4b6a      	ldr	r3, [pc, #424]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058be:	4b67      	ldr	r3, [pc, #412]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0203 	and.w	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d10d      	bne.n	80058ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
       ||
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d009      	beq.n	80058ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058d6:	4b61      	ldr	r3, [pc, #388]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	091b      	lsrs	r3, r3, #4
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
       ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d047      	beq.n	800597a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
 80058ee:	e044      	b.n	800597a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d018      	beq.n	800592a <RCCEx_PLLSAI2_Config+0x86>
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d825      	bhi.n	8005948 <RCCEx_PLLSAI2_Config+0xa4>
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d002      	beq.n	8005906 <RCCEx_PLLSAI2_Config+0x62>
 8005900:	2b02      	cmp	r3, #2
 8005902:	d009      	beq.n	8005918 <RCCEx_PLLSAI2_Config+0x74>
 8005904:	e020      	b.n	8005948 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005906:	4b55      	ldr	r3, [pc, #340]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11d      	bne.n	800594e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005916:	e01a      	b.n	800594e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005918:	4b50      	ldr	r3, [pc, #320]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005920:	2b00      	cmp	r3, #0
 8005922:	d116      	bne.n	8005952 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005928:	e013      	b.n	8005952 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800592a:	4b4c      	ldr	r3, [pc, #304]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005936:	4b49      	ldr	r3, [pc, #292]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005946:	e006      	b.n	8005956 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      break;
 800594c:	e004      	b.n	8005958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800594e:	bf00      	nop
 8005950:	e002      	b.n	8005958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005956:	bf00      	nop
    }

    if(status == HAL_OK)
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10d      	bne.n	800597a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800595e:	4b3f      	ldr	r3, [pc, #252]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	3b01      	subs	r3, #1
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	430b      	orrs	r3, r1
 8005974:	4939      	ldr	r1, [pc, #228]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005976:	4313      	orrs	r3, r2
 8005978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d167      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005980:	4b36      	ldr	r3, [pc, #216]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a35      	ldr	r2, [pc, #212]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800598a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800598c:	f7fe f9c6 	bl	8003d1c <HAL_GetTick>
 8005990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005992:	e009      	b.n	80059a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005994:	f7fe f9c2 	bl	8003d1c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d902      	bls.n	80059a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	73fb      	strb	r3, [r7, #15]
        break;
 80059a6:	e005      	b.n	80059b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059a8:	4b2c      	ldr	r3, [pc, #176]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1ef      	bne.n	8005994 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d14a      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d111      	bne.n	80059e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059c0:	4b26      	ldr	r3, [pc, #152]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6892      	ldr	r2, [r2, #8]
 80059d0:	0211      	lsls	r1, r2, #8
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	68d2      	ldr	r2, [r2, #12]
 80059d6:	0912      	lsrs	r2, r2, #4
 80059d8:	0452      	lsls	r2, r2, #17
 80059da:	430a      	orrs	r2, r1
 80059dc:	491f      	ldr	r1, [pc, #124]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	614b      	str	r3, [r1, #20]
 80059e2:	e011      	b.n	8005a08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059e4:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6892      	ldr	r2, [r2, #8]
 80059f4:	0211      	lsls	r1, r2, #8
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6912      	ldr	r2, [r2, #16]
 80059fa:	0852      	lsrs	r2, r2, #1
 80059fc:	3a01      	subs	r2, #1
 80059fe:	0652      	lsls	r2, r2, #25
 8005a00:	430a      	orrs	r2, r1
 8005a02:	4916      	ldr	r1, [pc, #88]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a08:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a14:	f7fe f982 	bl	8003d1c <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a1a:	e009      	b.n	8005a30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a1c:	f7fe f97e 	bl	8003d1c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d902      	bls.n	8005a30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a2e:	e005      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a30:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0ef      	beq.n	8005a1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	4904      	ldr	r1, [pc, #16]	; (8005a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40021000 	.word	0x40021000

08005a60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d079      	beq.n	8005b66 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fd febc 	bl	8003804 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d058      	beq.n	8005b54 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	22ca      	movs	r2, #202	; 0xca
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2253      	movs	r2, #83	; 0x53
 8005ab0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa4e 	bl	8005f54 <RTC_EnterInitMode>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d127      	bne.n	8005b12 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6899      	ldr	r1, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	68d2      	ldr	r2, [r2, #12]
 8005afc:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6919      	ldr	r1, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	041a      	lsls	r2, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa52 	bl	8005fbc <RTC_ExitInitMode>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d113      	bne.n	8005b4a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0203 	bic.w	r2, r2, #3
 8005b30:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	22ff      	movs	r2, #255	; 0xff
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24
 8005b52:	e001      	b.n	8005b58 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d103      	bne.n	8005b66 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_RTC_SetTime+0x1a>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e08b      	b.n	8005ca2 <HAL_RTC_SetTime+0x132>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2202      	movs	r2, #2
 8005b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	22ca      	movs	r2, #202	; 0xca
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2253      	movs	r2, #83	; 0x53
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f9d2 	bl	8005f54 <RTC_EnterInitMode>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005bb4:	7cfb      	ldrb	r3, [r7, #19]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d163      	bne.n	8005c82 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d126      	bne.n	8005c0e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fa2d 	bl	8006038 <RTC_ByteToBcd2>
 8005bde:	4603      	mov	r3, r0
 8005be0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fa26 	bl	8006038 <RTC_ByteToBcd2>
 8005bec:	4603      	mov	r3, r0
 8005bee:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bf0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	789b      	ldrb	r3, [r3, #2]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fa1e 	bl	8006038 <RTC_ByteToBcd2>
 8005bfc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bfe:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	78db      	ldrb	r3, [r3, #3]
 8005c06:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	e018      	b.n	8005c40 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	785b      	ldrb	r3, [r3, #1]
 8005c2c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c2e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c34:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	78db      	ldrb	r3, [r3, #3]
 8005c3a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c4a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c4e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6899      	ldr	r1, [r3, #8]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f99f 	bl	8005fbc <RTC_ExitInitMode>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	22ff      	movs	r2, #255	; 0xff
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005c8a:	7cfb      	ldrb	r3, [r7, #19]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd90      	pop	{r4, r7, pc}

08005caa <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005cd8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	0d9b      	lsrs	r3, r3, #22
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d11a      	bne.n	8005d58 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f9a6 	bl	8006078 <RTC_Bcd2ToByte>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	461a      	mov	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f99d 	bl	8006078 <RTC_Bcd2ToByte>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	789b      	ldrb	r3, [r3, #2]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f994 	bl	8006078 <RTC_Bcd2ToByte>
 8005d50:	4603      	mov	r3, r0
 8005d52:	461a      	mov	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d62:	b590      	push	{r4, r7, lr}
 8005d64:	b087      	sub	sp, #28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_RTC_SetDate+0x1a>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e075      	b.n	8005e68 <HAL_RTC_SetDate+0x106>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10e      	bne.n	8005db0 <HAL_RTC_SetDate+0x4e>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	f003 0310 	and.w	r3, r3, #16
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d008      	beq.n	8005db0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	f023 0310 	bic.w	r3, r3, #16
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	330a      	adds	r3, #10
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d11c      	bne.n	8005df0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	78db      	ldrb	r3, [r3, #3]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f93c 	bl	8006038 <RTC_ByteToBcd2>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 f935 	bl	8006038 <RTC_ByteToBcd2>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005dd2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	789b      	ldrb	r3, [r3, #2]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 f92d 	bl	8006038 <RTC_ByteToBcd2>
 8005dde:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005de0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	e00e      	b.n	8005e0e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	78db      	ldrb	r3, [r3, #3]
 8005df4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005dfc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005e02:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	22ca      	movs	r2, #202	; 0xca
 8005e14:	625a      	str	r2, [r3, #36]	; 0x24
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2253      	movs	r2, #83	; 0x53
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f898 	bl	8005f54 <RTC_EnterInitMode>
 8005e24:	4603      	mov	r3, r0
 8005e26:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005e28:	7cfb      	ldrb	r3, [r7, #19]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f8bc 	bl	8005fbc <RTC_ExitInitMode>
 8005e44:	4603      	mov	r3, r0
 8005e46:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	22ff      	movs	r2, #255	; 0xff
 8005e4e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005e50:	7cfb      	ldrb	r3, [r7, #19]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005e66:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd90      	pop	{r4, r7, pc}

08005e70 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	0b5b      	lsrs	r3, r3, #13
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d11a      	bne.n	8005f00 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	78db      	ldrb	r3, [r3, #3]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f8d2 	bl	8006078 <RTC_Bcd2ToByte>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 f8c9 	bl	8006078 <RTC_Bcd2ToByte>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	789b      	ldrb	r3, [r3, #2]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f8c0 	bl	8006078 <RTC_Bcd2ToByte>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a0d      	ldr	r2, [pc, #52]	; (8005f50 <HAL_RTC_WaitForSynchro+0x44>)
 8005f1a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005f1c:	f7fd fefe 	bl	8003d1c <HAL_GetTick>
 8005f20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f22:	e009      	b.n	8005f38 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f24:	f7fd fefa 	bl	8003d1c <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f32:	d901      	bls.n	8005f38 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e007      	b.n	8005f48 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0ee      	beq.n	8005f24 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	0003ff5f 	.word	0x0003ff5f

08005f54 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d120      	bne.n	8005fb0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f76:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f78:	f7fd fed0 	bl	8003d1c <HAL_GetTick>
 8005f7c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f7e:	e00d      	b.n	8005f9c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005f80:	f7fd fecc 	bl	8003d1c <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f8e:	d905      	bls.n	8005f9c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2203      	movs	r2, #3
 8005f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <RTC_EnterInitMode+0x5c>
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d1e7      	bne.n	8005f80 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005fc8:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <RTC_ExitInitMode+0x78>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	4a19      	ldr	r2, [pc, #100]	; (8006034 <RTC_ExitInitMode+0x78>)
 8005fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005fd4:	4b17      	ldr	r3, [pc, #92]	; (8006034 <RTC_ExitInitMode+0x78>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10c      	bne.n	8005ffa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff93 	bl	8005f0c <HAL_RTC_WaitForSynchro>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01e      	beq.n	800602a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2203      	movs	r2, #3
 8005ff0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	73fb      	strb	r3, [r7, #15]
 8005ff8:	e017      	b.n	800602a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <RTC_ExitInitMode+0x78>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	4a0d      	ldr	r2, [pc, #52]	; (8006034 <RTC_ExitInitMode+0x78>)
 8006000:	f023 0320 	bic.w	r3, r3, #32
 8006004:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff ff80 	bl	8005f0c <HAL_RTC_WaitForSynchro>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2203      	movs	r2, #3
 8006016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <RTC_ExitInitMode+0x78>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	4a04      	ldr	r2, [pc, #16]	; (8006034 <RTC_ExitInitMode+0x78>)
 8006024:	f043 0320 	orr.w	r3, r3, #32
 8006028:	6093      	str	r3, [r2, #8]
  }

  return status;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40002800 	.word	0x40002800

08006038 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800604a:	e005      	b.n	8006058 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3301      	adds	r3, #1
 8006050:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006052:	7afb      	ldrb	r3, [r7, #11]
 8006054:	3b0a      	subs	r3, #10
 8006056:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006058:	7afb      	ldrb	r3, [r7, #11]
 800605a:	2b09      	cmp	r3, #9
 800605c:	d8f6      	bhi.n	800604c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	b2da      	uxtb	r2, r3
 8006066:	7afb      	ldrb	r3, [r7, #11]
 8006068:	4313      	orrs	r3, r2
 800606a:	b2db      	uxtb	r3, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	b2db      	uxtb	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	0092      	lsls	r2, r2, #2
 800608c:	4413      	add	r3, r2
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	b2da      	uxtb	r2, r3
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	4413      	add	r3, r2
 800609e:	b2db      	uxtb	r3, r3
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e095      	b.n	80061ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d108      	bne.n	80060d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ce:	d009      	beq.n	80060e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	61da      	str	r2, [r3, #28]
 80060d6:	e005      	b.n	80060e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fd fbb2 	bl	8003868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800611a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006124:	d902      	bls.n	800612c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	e002      	b.n	8006132 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800612c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006130:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800613a:	d007      	beq.n	800614c <HAL_SPI_Init+0xa0>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006144:	d002      	beq.n	800614c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618e:	ea42 0103 	orr.w	r1, r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	f003 0204 	and.w	r2, r3, #4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061c8:	ea42 0103 	orr.w	r1, r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b08a      	sub	sp, #40	; 0x28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006200:	2301      	movs	r3, #1
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_SPI_TransmitReceive+0x26>
 8006214:	2302      	movs	r3, #2
 8006216:	e20a      	b.n	800662e <HAL_SPI_TransmitReceive+0x43c>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006220:	f7fd fd7c 	bl	8003d1c <HAL_GetTick>
 8006224:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800622c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006234:	887b      	ldrh	r3, [r7, #2]
 8006236:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006238:	887b      	ldrh	r3, [r7, #2]
 800623a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800623c:	7efb      	ldrb	r3, [r7, #27]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d00e      	beq.n	8006260 <HAL_SPI_TransmitReceive+0x6e>
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006248:	d106      	bne.n	8006258 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <HAL_SPI_TransmitReceive+0x66>
 8006252:	7efb      	ldrb	r3, [r7, #27]
 8006254:	2b04      	cmp	r3, #4
 8006256:	d003      	beq.n	8006260 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006258:	2302      	movs	r3, #2
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800625e:	e1e0      	b.n	8006622 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x80>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x80>
 800626c:	887b      	ldrh	r3, [r7, #2]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006278:	e1d3      	b.n	8006622 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b04      	cmp	r3, #4
 8006284:	d003      	beq.n	800628e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2205      	movs	r2, #5
 800628a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	887a      	ldrh	r2, [r7, #2]
 800629e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	887a      	ldrh	r2, [r7, #2]
 80062a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	887a      	ldrh	r2, [r7, #2]
 80062b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	887a      	ldrh	r2, [r7, #2]
 80062ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062d0:	d802      	bhi.n	80062d8 <HAL_SPI_TransmitReceive+0xe6>
 80062d2:	8a3b      	ldrh	r3, [r7, #16]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d908      	bls.n	80062ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062e6:	605a      	str	r2, [r3, #4]
 80062e8:	e007      	b.n	80062fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d007      	beq.n	8006318 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006320:	f240 8081 	bls.w	8006426 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <HAL_SPI_TransmitReceive+0x140>
 800632c:	8a7b      	ldrh	r3, [r7, #18]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d16d      	bne.n	800640e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	881a      	ldrh	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	1c9a      	adds	r2, r3, #2
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006356:	e05a      	b.n	800640e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b02      	cmp	r3, #2
 8006364:	d11b      	bne.n	800639e <HAL_SPI_TransmitReceive+0x1ac>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d016      	beq.n	800639e <HAL_SPI_TransmitReceive+0x1ac>
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	2b01      	cmp	r3, #1
 8006374:	d113      	bne.n	800639e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	1c9a      	adds	r2, r3, #2
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d11c      	bne.n	80063e6 <HAL_SPI_TransmitReceive+0x1f4>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d016      	beq.n	80063e6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	b292      	uxth	r2, r2
 80063c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	1c9a      	adds	r2, r3, #2
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063e2:	2301      	movs	r3, #1
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063e6:	f7fd fc99 	bl	8003d1c <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d80b      	bhi.n	800640e <HAL_SPI_TransmitReceive+0x21c>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063fc:	d007      	beq.n	800640e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800640c:	e109      	b.n	8006622 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006412:	b29b      	uxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d19f      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x166>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d199      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x166>
 8006424:	e0e3      	b.n	80065ee <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_SPI_TransmitReceive+0x244>
 800642e:	8a7b      	ldrh	r3, [r7, #18]
 8006430:	2b01      	cmp	r3, #1
 8006432:	f040 80cf 	bne.w	80065d4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d912      	bls.n	8006466 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b02      	subs	r3, #2
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006464:	e0b6      	b.n	80065d4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	7812      	ldrb	r2, [r2, #0]
 8006472:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800648c:	e0a2      	b.n	80065d4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b02      	cmp	r3, #2
 800649a:	d134      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x314>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d02f      	beq.n	8006506 <HAL_SPI_TransmitReceive+0x314>
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d12c      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d912      	bls.n	80064dc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	1c9a      	adds	r2, r3, #2
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b02      	subs	r3, #2
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064da:	e012      	b.n	8006502 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	7812      	ldrb	r2, [r2, #0]
 80064e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d148      	bne.n	80065a6 <HAL_SPI_TransmitReceive+0x3b4>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d042      	beq.n	80065a6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b01      	cmp	r3, #1
 800652a:	d923      	bls.n	8006574 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	b292      	uxth	r2, r2
 8006538:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	1c9a      	adds	r2, r3, #2
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b02      	subs	r3, #2
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	d81f      	bhi.n	80065a2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	e016      	b.n	80065a2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f103 020c 	add.w	r2, r3, #12
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	7812      	ldrb	r2, [r2, #0]
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065a2:	2301      	movs	r3, #1
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065a6:	f7fd fbb9 	bl	8003d1c <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d803      	bhi.n	80065be <HAL_SPI_TransmitReceive+0x3cc>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065bc:	d102      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x3d2>
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d107      	bne.n	80065d4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80065d2:	e026      	b.n	8006622 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f47f af57 	bne.w	800648e <HAL_SPI_TransmitReceive+0x29c>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f47f af50 	bne.w	800648e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f93e 	bl	8006874 <SPI_EndRxTxTransaction>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006618:	e003      	b.n	8006622 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800662a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006648:	f7fd fb68 	bl	8003d1c <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	1a9b      	subs	r3, r3, r2
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	4413      	add	r3, r2
 8006656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006658:	f7fd fb60 	bl	8003d1c <HAL_GetTick>
 800665c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800665e:	4b39      	ldr	r3, [pc, #228]	; (8006744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	015b      	lsls	r3, r3, #5
 8006664:	0d1b      	lsrs	r3, r3, #20
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	fb02 f303 	mul.w	r3, r2, r3
 800666c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800666e:	e054      	b.n	800671a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006676:	d050      	beq.n	800671a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006678:	f7fd fb50 	bl	8003d1c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	429a      	cmp	r2, r3
 8006686:	d902      	bls.n	800668e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d13d      	bne.n	800670a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800669c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a6:	d111      	bne.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b0:	d004      	beq.n	80066bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ba:	d107      	bne.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d4:	d10f      	bne.n	80066f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e017      	b.n	800673a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	3b01      	subs	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4013      	ands	r3, r2
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	429a      	cmp	r2, r3
 8006728:	bf0c      	ite	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	2300      	movne	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	429a      	cmp	r2, r3
 8006736:	d19b      	bne.n	8006670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000010 	.word	0x20000010

08006748 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	; 0x28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800675a:	f7fd fadf 	bl	8003d1c <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	4413      	add	r3, r2
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800676a:	f7fd fad7 	bl	8003d1c <HAL_GetTick>
 800676e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006778:	4b3d      	ldr	r3, [pc, #244]	; (8006870 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	00da      	lsls	r2, r3, #3
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	0d1b      	lsrs	r3, r3, #20
 8006788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006790:	e060      	b.n	8006854 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006798:	d107      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b0:	d050      	beq.n	8006854 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067b2:	f7fd fab3 	bl	8003d1c <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	429a      	cmp	r2, r3
 80067c0:	d902      	bls.n	80067c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d13d      	bne.n	8006844 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e0:	d111      	bne.n	8006806 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ea:	d004      	beq.n	80067f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f4:	d107      	bne.n	8006806 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006804:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680e:	d10f      	bne.n	8006830 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800682e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e010      	b.n	8006866 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	3b01      	subs	r3, #1
 8006852:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4013      	ands	r3, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d196      	bne.n	8006792 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3728      	adds	r7, #40	; 0x28
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000010 	.word	0x20000010

08006874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff ff5b 	bl	8006748 <SPI_WaitFifoStateUntilTimeout>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689c:	f043 0220 	orr.w	r2, r3, #32
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e027      	b.n	80068f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2200      	movs	r2, #0
 80068b0:	2180      	movs	r1, #128	; 0x80
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f7ff fec0 	bl	8006638 <SPI_WaitFlagStateUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c2:	f043 0220 	orr.w	r2, r3, #32
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e014      	b.n	80068f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff ff34 	bl	8006748 <SPI_WaitFifoStateUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e000      	b.n	80068f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e049      	b.n	80069a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fc ffe0 	bl	80038ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3304      	adds	r3, #4
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f000 fa32 	bl	8006da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d020      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01b      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f06f 0202 	mvn.w	r2, #2
 80069e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f9b7 	bl	8006d6c <HAL_TIM_IC_CaptureCallback>
 80069fe:	e005      	b.n	8006a0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f9a9 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9ba 	bl	8006d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d020      	beq.n	8006a5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01b      	beq.n	8006a5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f06f 0204 	mvn.w	r2, #4
 8006a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f991 	bl	8006d6c <HAL_TIM_IC_CaptureCallback>
 8006a4a:	e005      	b.n	8006a58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f983 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f994 	bl	8006d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d020      	beq.n	8006aaa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01b      	beq.n	8006aaa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f06f 0208 	mvn.w	r2, #8
 8006a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2204      	movs	r2, #4
 8006a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f96b 	bl	8006d6c <HAL_TIM_IC_CaptureCallback>
 8006a96:	e005      	b.n	8006aa4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f95d 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f96e 	bl	8006d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d020      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01b      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f06f 0210 	mvn.w	r2, #16
 8006ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2208      	movs	r2, #8
 8006acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f945 	bl	8006d6c <HAL_TIM_IC_CaptureCallback>
 8006ae2:	e005      	b.n	8006af0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f937 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f948 	bl	8006d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f06f 0201 	mvn.w	r2, #1
 8006b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f915 	bl	8006d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d007      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fafb 	bl	8007134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00c      	beq.n	8006b62 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d007      	beq.n	8006b62 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 faf3 	bl	8007148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00c      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f907 	bl	8006d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00c      	beq.n	8006baa <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f06f 0220 	mvn.w	r2, #32
 8006ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fabb 	bl	8007120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_TIM_ConfigClockSource+0x1c>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e0b6      	b.n	8006d3c <HAL_TIM_ConfigClockSource+0x18a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bf0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bf8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c0a:	d03e      	beq.n	8006c8a <HAL_TIM_ConfigClockSource+0xd8>
 8006c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c10:	f200 8087 	bhi.w	8006d22 <HAL_TIM_ConfigClockSource+0x170>
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c18:	f000 8086 	beq.w	8006d28 <HAL_TIM_ConfigClockSource+0x176>
 8006c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c20:	d87f      	bhi.n	8006d22 <HAL_TIM_ConfigClockSource+0x170>
 8006c22:	2b70      	cmp	r3, #112	; 0x70
 8006c24:	d01a      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0xaa>
 8006c26:	2b70      	cmp	r3, #112	; 0x70
 8006c28:	d87b      	bhi.n	8006d22 <HAL_TIM_ConfigClockSource+0x170>
 8006c2a:	2b60      	cmp	r3, #96	; 0x60
 8006c2c:	d050      	beq.n	8006cd0 <HAL_TIM_ConfigClockSource+0x11e>
 8006c2e:	2b60      	cmp	r3, #96	; 0x60
 8006c30:	d877      	bhi.n	8006d22 <HAL_TIM_ConfigClockSource+0x170>
 8006c32:	2b50      	cmp	r3, #80	; 0x50
 8006c34:	d03c      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0xfe>
 8006c36:	2b50      	cmp	r3, #80	; 0x50
 8006c38:	d873      	bhi.n	8006d22 <HAL_TIM_ConfigClockSource+0x170>
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	d058      	beq.n	8006cf0 <HAL_TIM_ConfigClockSource+0x13e>
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d86f      	bhi.n	8006d22 <HAL_TIM_ConfigClockSource+0x170>
 8006c42:	2b30      	cmp	r3, #48	; 0x30
 8006c44:	d064      	beq.n	8006d10 <HAL_TIM_ConfigClockSource+0x15e>
 8006c46:	2b30      	cmp	r3, #48	; 0x30
 8006c48:	d86b      	bhi.n	8006d22 <HAL_TIM_ConfigClockSource+0x170>
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d060      	beq.n	8006d10 <HAL_TIM_ConfigClockSource+0x15e>
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d867      	bhi.n	8006d22 <HAL_TIM_ConfigClockSource+0x170>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d05c      	beq.n	8006d10 <HAL_TIM_ConfigClockSource+0x15e>
 8006c56:	2b10      	cmp	r3, #16
 8006c58:	d05a      	beq.n	8006d10 <HAL_TIM_ConfigClockSource+0x15e>
 8006c5a:	e062      	b.n	8006d22 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c6c:	f000 f9b0 	bl	8006fd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	609a      	str	r2, [r3, #8]
      break;
 8006c88:	e04f      	b.n	8006d2a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c9a:	f000 f999 	bl	8006fd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cac:	609a      	str	r2, [r3, #8]
      break;
 8006cae:	e03c      	b.n	8006d2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f000 f90d 	bl	8006edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2150      	movs	r1, #80	; 0x50
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 f966 	bl	8006f9a <TIM_ITRx_SetConfig>
      break;
 8006cce:	e02c      	b.n	8006d2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f000 f92c 	bl	8006f3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2160      	movs	r1, #96	; 0x60
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f956 	bl	8006f9a <TIM_ITRx_SetConfig>
      break;
 8006cee:	e01c      	b.n	8006d2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f000 f8ed 	bl	8006edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2140      	movs	r1, #64	; 0x40
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f946 	bl	8006f9a <TIM_ITRx_SetConfig>
      break;
 8006d0e:	e00c      	b.n	8006d2a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f000 f93d 	bl	8006f9a <TIM_ITRx_SetConfig>
      break;
 8006d20:	e003      	b.n	8006d2a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	73fb      	strb	r3, [r7, #15]
      break;
 8006d26:	e000      	b.n	8006d2a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a40      	ldr	r2, [pc, #256]	; (8006ebc <TIM_Base_SetConfig+0x114>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <TIM_Base_SetConfig+0x40>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d00f      	beq.n	8006de8 <TIM_Base_SetConfig+0x40>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a3d      	ldr	r2, [pc, #244]	; (8006ec0 <TIM_Base_SetConfig+0x118>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00b      	beq.n	8006de8 <TIM_Base_SetConfig+0x40>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a3c      	ldr	r2, [pc, #240]	; (8006ec4 <TIM_Base_SetConfig+0x11c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d007      	beq.n	8006de8 <TIM_Base_SetConfig+0x40>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a3b      	ldr	r2, [pc, #236]	; (8006ec8 <TIM_Base_SetConfig+0x120>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a3a      	ldr	r2, [pc, #232]	; (8006ecc <TIM_Base_SetConfig+0x124>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d108      	bne.n	8006dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a2f      	ldr	r2, [pc, #188]	; (8006ebc <TIM_Base_SetConfig+0x114>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d01f      	beq.n	8006e42 <TIM_Base_SetConfig+0x9a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e08:	d01b      	beq.n	8006e42 <TIM_Base_SetConfig+0x9a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a2c      	ldr	r2, [pc, #176]	; (8006ec0 <TIM_Base_SetConfig+0x118>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d017      	beq.n	8006e42 <TIM_Base_SetConfig+0x9a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a2b      	ldr	r2, [pc, #172]	; (8006ec4 <TIM_Base_SetConfig+0x11c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d013      	beq.n	8006e42 <TIM_Base_SetConfig+0x9a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a2a      	ldr	r2, [pc, #168]	; (8006ec8 <TIM_Base_SetConfig+0x120>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00f      	beq.n	8006e42 <TIM_Base_SetConfig+0x9a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a29      	ldr	r2, [pc, #164]	; (8006ecc <TIM_Base_SetConfig+0x124>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00b      	beq.n	8006e42 <TIM_Base_SetConfig+0x9a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a28      	ldr	r2, [pc, #160]	; (8006ed0 <TIM_Base_SetConfig+0x128>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d007      	beq.n	8006e42 <TIM_Base_SetConfig+0x9a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a27      	ldr	r2, [pc, #156]	; (8006ed4 <TIM_Base_SetConfig+0x12c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d003      	beq.n	8006e42 <TIM_Base_SetConfig+0x9a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a26      	ldr	r2, [pc, #152]	; (8006ed8 <TIM_Base_SetConfig+0x130>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d108      	bne.n	8006e54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a10      	ldr	r2, [pc, #64]	; (8006ebc <TIM_Base_SetConfig+0x114>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00f      	beq.n	8006ea0 <TIM_Base_SetConfig+0xf8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a12      	ldr	r2, [pc, #72]	; (8006ecc <TIM_Base_SetConfig+0x124>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00b      	beq.n	8006ea0 <TIM_Base_SetConfig+0xf8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a11      	ldr	r2, [pc, #68]	; (8006ed0 <TIM_Base_SetConfig+0x128>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d007      	beq.n	8006ea0 <TIM_Base_SetConfig+0xf8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a10      	ldr	r2, [pc, #64]	; (8006ed4 <TIM_Base_SetConfig+0x12c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d003      	beq.n	8006ea0 <TIM_Base_SetConfig+0xf8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a0f      	ldr	r2, [pc, #60]	; (8006ed8 <TIM_Base_SetConfig+0x130>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d103      	bne.n	8006ea8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	615a      	str	r2, [r3, #20]
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800
 8006ec8:	40000c00 	.word	0x40000c00
 8006ecc:	40013400 	.word	0x40013400
 8006ed0:	40014000 	.word	0x40014000
 8006ed4:	40014400 	.word	0x40014400
 8006ed8:	40014800 	.word	0x40014800

08006edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f023 0201 	bic.w	r2, r3, #1
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f023 030a 	bic.w	r3, r3, #10
 8006f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	621a      	str	r2, [r3, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b087      	sub	sp, #28
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	60f8      	str	r0, [r7, #12]
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	f023 0210 	bic.w	r2, r3, #16
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	031b      	lsls	r3, r3, #12
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	621a      	str	r2, [r3, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f043 0307 	orr.w	r3, r3, #7
 8006fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	609a      	str	r2, [r3, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	021a      	lsls	r2, r3, #8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007024:	2302      	movs	r3, #2
 8007026:	e068      	b.n	80070fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a2e      	ldr	r2, [pc, #184]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a2d      	ldr	r2, [pc, #180]	; (800710c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d108      	bne.n	800706e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007062:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007074:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1e      	ldr	r2, [pc, #120]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d01d      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709a:	d018      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a1b      	ldr	r2, [pc, #108]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d013      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00e      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a18      	ldr	r2, [pc, #96]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d009      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a13      	ldr	r2, [pc, #76]	; (800710c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a14      	ldr	r2, [pc, #80]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d10c      	bne.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40012c00 	.word	0x40012c00
 800710c:	40013400 	.word	0x40013400
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800
 8007118:	40000c00 	.word	0x40000c00
 800711c:	40014000 	.word	0x40014000

08007120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e040      	b.n	80071f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fc fbd8 	bl	8003934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2224      	movs	r2, #36	; 0x24
 8007188:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0201 	bic.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fec0 	bl	8007f28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fc05 	bl	80079b8 <UART_SetConfig>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e01b      	b.n	80071f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 ff3f 	bl	800806c <UART_CheckIdleState>
 80071ee:	4603      	mov	r3, r0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800720c:	2b20      	cmp	r3, #32
 800720e:	d178      	bne.n	8007302 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_UART_Transmit+0x24>
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e071      	b.n	8007304 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2221      	movs	r2, #33	; 0x21
 800722c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722e:	f7fc fd75 	bl	8003d1c <HAL_GetTick>
 8007232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724c:	d108      	bne.n	8007260 <HAL_UART_Transmit+0x68>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e003      	b.n	8007268 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007268:	e030      	b.n	80072cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 ffa1 	bl	80081bc <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e03c      	b.n	8007304 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10b      	bne.n	80072a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	881a      	ldrh	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800729c:	b292      	uxth	r2, r2
 800729e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	3302      	adds	r3, #2
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	e008      	b.n	80072ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	781a      	ldrb	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	b292      	uxth	r2, r2
 80072b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	3301      	adds	r3, #1
 80072b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1c8      	bne.n	800726a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2200      	movs	r2, #0
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 ff6a 	bl	80081bc <UART_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e005      	b.n	8007304 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e000      	b.n	8007304 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007302:	2302      	movs	r3, #2
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	; 0x28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	4613      	mov	r3, r2
 8007318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007320:	2b20      	cmp	r3, #32
 8007322:	d137      	bne.n	8007394 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <HAL_UART_Receive_IT+0x24>
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e030      	b.n	8007396 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a18      	ldr	r2, [pc, #96]	; (80073a0 <HAL_UART_Receive_IT+0x94>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d01f      	beq.n	8007384 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d018      	beq.n	8007384 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	613b      	str	r3, [r7, #16]
   return(result);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	623b      	str	r3, [r7, #32]
 8007372:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	69f9      	ldr	r1, [r7, #28]
 8007376:	6a3a      	ldr	r2, [r7, #32]
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	61bb      	str	r3, [r7, #24]
   return(result);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e6      	bne.n	8007352 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	461a      	mov	r2, r3
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 ff7e 	bl	800828c <UART_Start_Receive_IT>
 8007390:	4603      	mov	r3, r0
 8007392:	e000      	b.n	8007396 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007394:	2302      	movs	r3, #2
  }
}
 8007396:	4618      	mov	r0, r3
 8007398:	3728      	adds	r7, #40	; 0x28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40008000 	.word	0x40008000

080073a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b0ba      	sub	sp, #232	; 0xe8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80073d2:	4013      	ands	r3, r2
 80073d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80073d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d115      	bne.n	800740c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00f      	beq.n	800740c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d009      	beq.n	800740c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 82ae 	beq.w	800795e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
      }
      return;
 800740a:	e2a8      	b.n	800795e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800740c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8117 	beq.w	8007644 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007422:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007426:	4b85      	ldr	r3, [pc, #532]	; (800763c <HAL_UART_IRQHandler+0x298>)
 8007428:	4013      	ands	r3, r2
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 810a 	beq.w	8007644 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d011      	beq.n	8007460 <HAL_UART_IRQHandler+0xbc>
 800743c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00b      	beq.n	8007460 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2201      	movs	r2, #1
 800744e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007456:	f043 0201 	orr.w	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d011      	beq.n	8007490 <HAL_UART_IRQHandler+0xec>
 800746c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2202      	movs	r2, #2
 800747e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007486:	f043 0204 	orr.w	r2, r3, #4
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d011      	beq.n	80074c0 <HAL_UART_IRQHandler+0x11c>
 800749c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2204      	movs	r2, #4
 80074ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b6:	f043 0202 	orr.w	r2, r3, #2
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d017      	beq.n	80074fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2208      	movs	r2, #8
 80074ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f2:	f043 0208 	orr.w	r2, r3, #8
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007504:	2b00      	cmp	r3, #0
 8007506:	d012      	beq.n	800752e <HAL_UART_IRQHandler+0x18a>
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00c      	beq.n	800752e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800751c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007524:	f043 0220 	orr.w	r2, r3, #32
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8214 	beq.w	8007962 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00d      	beq.n	8007562 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b40      	cmp	r3, #64	; 0x40
 8007578:	d005      	beq.n	8007586 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800757a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800757e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007582:	2b00      	cmp	r3, #0
 8007584:	d04f      	beq.n	8007626 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 ff46 	bl	8008418 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d141      	bne.n	800761e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3308      	adds	r3, #8
 80075c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1d9      	bne.n	800759a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d013      	beq.n	8007616 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f2:	4a13      	ldr	r2, [pc, #76]	; (8007640 <HAL_UART_IRQHandler+0x29c>)
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fc fd0d 	bl	800401a <HAL_DMA_Abort_IT>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007614:	e00f      	b.n	8007636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9b8 	bl	800798c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761c:	e00b      	b.n	8007636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9b4 	bl	800798c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007624:	e007      	b.n	8007636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f9b0 	bl	800798c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007634:	e195      	b.n	8007962 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007636:	bf00      	nop
    return;
 8007638:	e193      	b.n	8007962 <HAL_UART_IRQHandler+0x5be>
 800763a:	bf00      	nop
 800763c:	04000120 	.word	0x04000120
 8007640:	080084e1 	.word	0x080084e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007648:	2b01      	cmp	r3, #1
 800764a:	f040 814e 	bne.w	80078ea <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800764e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8147 	beq.w	80078ea <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800765c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 8140 	beq.w	80078ea <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2210      	movs	r2, #16
 8007670:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	f040 80b8 	bne.w	80077f2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800768e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8167 	beq.w	8007966 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800769e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076a2:	429a      	cmp	r2, r3
 80076a4:	f080 815f 	bcs.w	8007966 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f040 8086 	bne.w	80077d0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1da      	bne.n	80076c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3308      	adds	r3, #8
 8007714:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800771e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007720:	f023 0301 	bic.w	r3, r3, #1
 8007724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3308      	adds	r3, #8
 800772e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007732:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007736:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800773a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e1      	bne.n	800770e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3308      	adds	r3, #8
 8007750:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800775a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800775c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3308      	adds	r3, #8
 800776a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800776e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007770:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007774:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800777c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e3      	bne.n	800774a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2220      	movs	r2, #32
 8007786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800779e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a0:	f023 0310 	bic.w	r3, r3, #16
 80077a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80077b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e4      	bne.n	8007790 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fc fbe7 	bl	8003f9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f8d8 	bl	80079a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077f0:	e0b9      	b.n	8007966 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 80ab 	beq.w	800796a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80a6 	beq.w	800796a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007840:	647b      	str	r3, [r7, #68]	; 0x44
 8007842:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800784e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e4      	bne.n	800781e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	623b      	str	r3, [r7, #32]
   return(result);
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007878:	633a      	str	r2, [r7, #48]	; 0x30
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800787e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e3      	bne.n	8007854 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2220      	movs	r2, #32
 8007890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f023 0310 	bic.w	r3, r3, #16
 80078b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	69b9      	ldr	r1, [r7, #24]
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	617b      	str	r3, [r7, #20]
   return(result);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e4      	bne.n	80078a0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2202      	movs	r2, #2
 80078da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f85c 	bl	80079a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078e8:	e03f      	b.n	800796a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00e      	beq.n	8007914 <HAL_UART_IRQHandler+0x570>
 80078f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800790a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 ffe3 	bl	80088d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007912:	e02d      	b.n	8007970 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00e      	beq.n	800793e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007928:	2b00      	cmp	r3, #0
 800792a:	d008      	beq.n	800793e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01c      	beq.n	800796e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	4798      	blx	r3
    }
    return;
 800793c:	e017      	b.n	800796e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800793e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b00      	cmp	r3, #0
 8007948:	d012      	beq.n	8007970 <HAL_UART_IRQHandler+0x5cc>
 800794a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00c      	beq.n	8007970 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fdd8 	bl	800850c <UART_EndTransmit_IT>
    return;
 800795c:	e008      	b.n	8007970 <HAL_UART_IRQHandler+0x5cc>
      return;
 800795e:	bf00      	nop
 8007960:	e006      	b.n	8007970 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007962:	bf00      	nop
 8007964:	e004      	b.n	8007970 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007966:	bf00      	nop
 8007968:	e002      	b.n	8007970 <HAL_UART_IRQHandler+0x5cc>
      return;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <HAL_UART_IRQHandler+0x5cc>
    return;
 800796e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007970:	37e8      	adds	r7, #232	; 0xe8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop

08007978 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079bc:	b08a      	sub	sp, #40	; 0x28
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	431a      	orrs	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	4313      	orrs	r3, r2
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4ba4      	ldr	r3, [pc, #656]	; (8007c78 <UART_SetConfig+0x2c0>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079f0:	430b      	orrs	r3, r1
 80079f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68da      	ldr	r2, [r3, #12]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a99      	ldr	r2, [pc, #612]	; (8007c7c <UART_SetConfig+0x2c4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d004      	beq.n	8007a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a20:	4313      	orrs	r3, r2
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a34:	430a      	orrs	r2, r1
 8007a36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a90      	ldr	r2, [pc, #576]	; (8007c80 <UART_SetConfig+0x2c8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d126      	bne.n	8007a90 <UART_SetConfig+0xd8>
 8007a42:	4b90      	ldr	r3, [pc, #576]	; (8007c84 <UART_SetConfig+0x2cc>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d81b      	bhi.n	8007a88 <UART_SetConfig+0xd0>
 8007a50:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <UART_SetConfig+0xa0>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007a69 	.word	0x08007a69
 8007a5c:	08007a79 	.word	0x08007a79
 8007a60:	08007a71 	.word	0x08007a71
 8007a64:	08007a81 	.word	0x08007a81
 8007a68:	2301      	movs	r3, #1
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a6e:	e116      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007a70:	2302      	movs	r3, #2
 8007a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a76:	e112      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007a78:	2304      	movs	r3, #4
 8007a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a7e:	e10e      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007a80:	2308      	movs	r3, #8
 8007a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a86:	e10a      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007a88:	2310      	movs	r3, #16
 8007a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a8e:	e106      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a7c      	ldr	r2, [pc, #496]	; (8007c88 <UART_SetConfig+0x2d0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d138      	bne.n	8007b0c <UART_SetConfig+0x154>
 8007a9a:	4b7a      	ldr	r3, [pc, #488]	; (8007c84 <UART_SetConfig+0x2cc>)
 8007a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa0:	f003 030c 	and.w	r3, r3, #12
 8007aa4:	2b0c      	cmp	r3, #12
 8007aa6:	d82d      	bhi.n	8007b04 <UART_SetConfig+0x14c>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <UART_SetConfig+0xf8>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ae5 	.word	0x08007ae5
 8007ab4:	08007b05 	.word	0x08007b05
 8007ab8:	08007b05 	.word	0x08007b05
 8007abc:	08007b05 	.word	0x08007b05
 8007ac0:	08007af5 	.word	0x08007af5
 8007ac4:	08007b05 	.word	0x08007b05
 8007ac8:	08007b05 	.word	0x08007b05
 8007acc:	08007b05 	.word	0x08007b05
 8007ad0:	08007aed 	.word	0x08007aed
 8007ad4:	08007b05 	.word	0x08007b05
 8007ad8:	08007b05 	.word	0x08007b05
 8007adc:	08007b05 	.word	0x08007b05
 8007ae0:	08007afd 	.word	0x08007afd
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aea:	e0d8      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007aec:	2302      	movs	r3, #2
 8007aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007af2:	e0d4      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007af4:	2304      	movs	r3, #4
 8007af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007afa:	e0d0      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007afc:	2308      	movs	r3, #8
 8007afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b02:	e0cc      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007b04:	2310      	movs	r3, #16
 8007b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b0a:	e0c8      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a5e      	ldr	r2, [pc, #376]	; (8007c8c <UART_SetConfig+0x2d4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d125      	bne.n	8007b62 <UART_SetConfig+0x1aa>
 8007b16:	4b5b      	ldr	r3, [pc, #364]	; (8007c84 <UART_SetConfig+0x2cc>)
 8007b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b20:	2b30      	cmp	r3, #48	; 0x30
 8007b22:	d016      	beq.n	8007b52 <UART_SetConfig+0x19a>
 8007b24:	2b30      	cmp	r3, #48	; 0x30
 8007b26:	d818      	bhi.n	8007b5a <UART_SetConfig+0x1a2>
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d00a      	beq.n	8007b42 <UART_SetConfig+0x18a>
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d814      	bhi.n	8007b5a <UART_SetConfig+0x1a2>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <UART_SetConfig+0x182>
 8007b34:	2b10      	cmp	r3, #16
 8007b36:	d008      	beq.n	8007b4a <UART_SetConfig+0x192>
 8007b38:	e00f      	b.n	8007b5a <UART_SetConfig+0x1a2>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b40:	e0ad      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007b42:	2302      	movs	r3, #2
 8007b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b48:	e0a9      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b50:	e0a5      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007b52:	2308      	movs	r3, #8
 8007b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b58:	e0a1      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007b5a:	2310      	movs	r3, #16
 8007b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b60:	e09d      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a4a      	ldr	r2, [pc, #296]	; (8007c90 <UART_SetConfig+0x2d8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d125      	bne.n	8007bb8 <UART_SetConfig+0x200>
 8007b6c:	4b45      	ldr	r3, [pc, #276]	; (8007c84 <UART_SetConfig+0x2cc>)
 8007b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b76:	2bc0      	cmp	r3, #192	; 0xc0
 8007b78:	d016      	beq.n	8007ba8 <UART_SetConfig+0x1f0>
 8007b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b7c:	d818      	bhi.n	8007bb0 <UART_SetConfig+0x1f8>
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d00a      	beq.n	8007b98 <UART_SetConfig+0x1e0>
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d814      	bhi.n	8007bb0 <UART_SetConfig+0x1f8>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <UART_SetConfig+0x1d8>
 8007b8a:	2b40      	cmp	r3, #64	; 0x40
 8007b8c:	d008      	beq.n	8007ba0 <UART_SetConfig+0x1e8>
 8007b8e:	e00f      	b.n	8007bb0 <UART_SetConfig+0x1f8>
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b96:	e082      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b9e:	e07e      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ba6:	e07a      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007ba8:	2308      	movs	r3, #8
 8007baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bae:	e076      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bb6:	e072      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a35      	ldr	r2, [pc, #212]	; (8007c94 <UART_SetConfig+0x2dc>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d12a      	bne.n	8007c18 <UART_SetConfig+0x260>
 8007bc2:	4b30      	ldr	r3, [pc, #192]	; (8007c84 <UART_SetConfig+0x2cc>)
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bd0:	d01a      	beq.n	8007c08 <UART_SetConfig+0x250>
 8007bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bd6:	d81b      	bhi.n	8007c10 <UART_SetConfig+0x258>
 8007bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bdc:	d00c      	beq.n	8007bf8 <UART_SetConfig+0x240>
 8007bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be2:	d815      	bhi.n	8007c10 <UART_SetConfig+0x258>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <UART_SetConfig+0x238>
 8007be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bec:	d008      	beq.n	8007c00 <UART_SetConfig+0x248>
 8007bee:	e00f      	b.n	8007c10 <UART_SetConfig+0x258>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bf6:	e052      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bfe:	e04e      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007c00:	2304      	movs	r3, #4
 8007c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c06:	e04a      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007c08:	2308      	movs	r3, #8
 8007c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c0e:	e046      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007c10:	2310      	movs	r3, #16
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c16:	e042      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a17      	ldr	r2, [pc, #92]	; (8007c7c <UART_SetConfig+0x2c4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d13a      	bne.n	8007c98 <UART_SetConfig+0x2e0>
 8007c22:	4b18      	ldr	r3, [pc, #96]	; (8007c84 <UART_SetConfig+0x2cc>)
 8007c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c30:	d01a      	beq.n	8007c68 <UART_SetConfig+0x2b0>
 8007c32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c36:	d81b      	bhi.n	8007c70 <UART_SetConfig+0x2b8>
 8007c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c3c:	d00c      	beq.n	8007c58 <UART_SetConfig+0x2a0>
 8007c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c42:	d815      	bhi.n	8007c70 <UART_SetConfig+0x2b8>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <UART_SetConfig+0x298>
 8007c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4c:	d008      	beq.n	8007c60 <UART_SetConfig+0x2a8>
 8007c4e:	e00f      	b.n	8007c70 <UART_SetConfig+0x2b8>
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c56:	e022      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5e:	e01e      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007c60:	2304      	movs	r3, #4
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c66:	e01a      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c6e:	e016      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c76:	e012      	b.n	8007c9e <UART_SetConfig+0x2e6>
 8007c78:	efff69f3 	.word	0xefff69f3
 8007c7c:	40008000 	.word	0x40008000
 8007c80:	40013800 	.word	0x40013800
 8007c84:	40021000 	.word	0x40021000
 8007c88:	40004400 	.word	0x40004400
 8007c8c:	40004800 	.word	0x40004800
 8007c90:	40004c00 	.word	0x40004c00
 8007c94:	40005000 	.word	0x40005000
 8007c98:	2310      	movs	r3, #16
 8007c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a9f      	ldr	r2, [pc, #636]	; (8007f20 <UART_SetConfig+0x568>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d17a      	bne.n	8007d9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d824      	bhi.n	8007cfa <UART_SetConfig+0x342>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <UART_SetConfig+0x300>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007cfb 	.word	0x08007cfb
 8007cc0:	08007ce5 	.word	0x08007ce5
 8007cc4:	08007cfb 	.word	0x08007cfb
 8007cc8:	08007ceb 	.word	0x08007ceb
 8007ccc:	08007cfb 	.word	0x08007cfb
 8007cd0:	08007cfb 	.word	0x08007cfb
 8007cd4:	08007cfb 	.word	0x08007cfb
 8007cd8:	08007cf3 	.word	0x08007cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cdc:	f7fd f978 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8007ce0:	61f8      	str	r0, [r7, #28]
        break;
 8007ce2:	e010      	b.n	8007d06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce4:	4b8f      	ldr	r3, [pc, #572]	; (8007f24 <UART_SetConfig+0x56c>)
 8007ce6:	61fb      	str	r3, [r7, #28]
        break;
 8007ce8:	e00d      	b.n	8007d06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cea:	f7fd f8d9 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8007cee:	61f8      	str	r0, [r7, #28]
        break;
 8007cf0:	e009      	b.n	8007d06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cf6:	61fb      	str	r3, [r7, #28]
        break;
 8007cf8:	e005      	b.n	8007d06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 80fb 	beq.w	8007f04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	4413      	add	r3, r2
 8007d18:	69fa      	ldr	r2, [r7, #28]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d305      	bcc.n	8007d2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d24:	69fa      	ldr	r2, [r7, #28]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d903      	bls.n	8007d32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d30:	e0e8      	b.n	8007f04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	2200      	movs	r2, #0
 8007d36:	461c      	mov	r4, r3
 8007d38:	4615      	mov	r5, r2
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	022b      	lsls	r3, r5, #8
 8007d44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007d48:	0222      	lsls	r2, r4, #8
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	6849      	ldr	r1, [r1, #4]
 8007d4e:	0849      	lsrs	r1, r1, #1
 8007d50:	2000      	movs	r0, #0
 8007d52:	4688      	mov	r8, r1
 8007d54:	4681      	mov	r9, r0
 8007d56:	eb12 0a08 	adds.w	sl, r2, r8
 8007d5a:	eb43 0b09 	adc.w	fp, r3, r9
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	603b      	str	r3, [r7, #0]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d6c:	4650      	mov	r0, sl
 8007d6e:	4659      	mov	r1, fp
 8007d70:	f7f8 fae6 	bl	8000340 <__aeabi_uldivmod>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4613      	mov	r3, r2
 8007d7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d82:	d308      	bcc.n	8007d96 <UART_SetConfig+0x3de>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d8a:	d204      	bcs.n	8007d96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	60da      	str	r2, [r3, #12]
 8007d94:	e0b6      	b.n	8007f04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d9c:	e0b2      	b.n	8007f04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da6:	d15e      	bne.n	8007e66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d828      	bhi.n	8007e02 <UART_SetConfig+0x44a>
 8007db0:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <UART_SetConfig+0x400>)
 8007db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db6:	bf00      	nop
 8007db8:	08007ddd 	.word	0x08007ddd
 8007dbc:	08007de5 	.word	0x08007de5
 8007dc0:	08007ded 	.word	0x08007ded
 8007dc4:	08007e03 	.word	0x08007e03
 8007dc8:	08007df3 	.word	0x08007df3
 8007dcc:	08007e03 	.word	0x08007e03
 8007dd0:	08007e03 	.word	0x08007e03
 8007dd4:	08007e03 	.word	0x08007e03
 8007dd8:	08007dfb 	.word	0x08007dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ddc:	f7fd f8f8 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8007de0:	61f8      	str	r0, [r7, #28]
        break;
 8007de2:	e014      	b.n	8007e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de4:	f7fd f90a 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 8007de8:	61f8      	str	r0, [r7, #28]
        break;
 8007dea:	e010      	b.n	8007e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dec:	4b4d      	ldr	r3, [pc, #308]	; (8007f24 <UART_SetConfig+0x56c>)
 8007dee:	61fb      	str	r3, [r7, #28]
        break;
 8007df0:	e00d      	b.n	8007e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007df2:	f7fd f855 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8007df6:	61f8      	str	r0, [r7, #28]
        break;
 8007df8:	e009      	b.n	8007e0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dfe:	61fb      	str	r3, [r7, #28]
        break;
 8007e00:	e005      	b.n	8007e0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d077      	beq.n	8007f04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	005a      	lsls	r2, r3, #1
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	085b      	lsrs	r3, r3, #1
 8007e1e:	441a      	add	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b0f      	cmp	r3, #15
 8007e2e:	d916      	bls.n	8007e5e <UART_SetConfig+0x4a6>
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e36:	d212      	bcs.n	8007e5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f023 030f 	bic.w	r3, r3, #15
 8007e40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	8afb      	ldrh	r3, [r7, #22]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	8afa      	ldrh	r2, [r7, #22]
 8007e5a:	60da      	str	r2, [r3, #12]
 8007e5c:	e052      	b.n	8007f04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e64:	e04e      	b.n	8007f04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	d827      	bhi.n	8007ebe <UART_SetConfig+0x506>
 8007e6e:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <UART_SetConfig+0x4bc>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007e99 	.word	0x08007e99
 8007e78:	08007ea1 	.word	0x08007ea1
 8007e7c:	08007ea9 	.word	0x08007ea9
 8007e80:	08007ebf 	.word	0x08007ebf
 8007e84:	08007eaf 	.word	0x08007eaf
 8007e88:	08007ebf 	.word	0x08007ebf
 8007e8c:	08007ebf 	.word	0x08007ebf
 8007e90:	08007ebf 	.word	0x08007ebf
 8007e94:	08007eb7 	.word	0x08007eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e98:	f7fd f89a 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8007e9c:	61f8      	str	r0, [r7, #28]
        break;
 8007e9e:	e014      	b.n	8007eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea0:	f7fd f8ac 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 8007ea4:	61f8      	str	r0, [r7, #28]
        break;
 8007ea6:	e010      	b.n	8007eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea8:	4b1e      	ldr	r3, [pc, #120]	; (8007f24 <UART_SetConfig+0x56c>)
 8007eaa:	61fb      	str	r3, [r7, #28]
        break;
 8007eac:	e00d      	b.n	8007eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eae:	f7fc fff7 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8007eb2:	61f8      	str	r0, [r7, #28]
        break;
 8007eb4:	e009      	b.n	8007eca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eba:	61fb      	str	r3, [r7, #28]
        break;
 8007ebc:	e005      	b.n	8007eca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ec8:	bf00      	nop
    }

    if (pclk != 0U)
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d019      	beq.n	8007f04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	085a      	lsrs	r2, r3, #1
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	441a      	add	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b0f      	cmp	r3, #15
 8007ee8:	d909      	bls.n	8007efe <UART_SetConfig+0x546>
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef0:	d205      	bcs.n	8007efe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60da      	str	r2, [r3, #12]
 8007efc:	e002      	b.n	8007f04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3728      	adds	r7, #40	; 0x28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f1e:	bf00      	nop
 8007f20:	40008000 	.word	0x40008000
 8007f24:	00f42400 	.word	0x00f42400

08007f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	f003 0310 	and.w	r3, r3, #16
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	f003 0320 	and.w	r3, r3, #32
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01a      	beq.n	800803e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008026:	d10a      	bne.n	800803e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	605a      	str	r2, [r3, #4]
  }
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b098      	sub	sp, #96	; 0x60
 8008070:	af02      	add	r7, sp, #8
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800807c:	f7fb fe4e 	bl	8003d1c <HAL_GetTick>
 8008080:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b08      	cmp	r3, #8
 800808e:	d12e      	bne.n	80080ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008098:	2200      	movs	r2, #0
 800809a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f88c 	bl	80081bc <UART_WaitOnFlagUntilTimeout>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d021      	beq.n	80080ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080be:	653b      	str	r3, [r7, #80]	; 0x50
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080c8:	647b      	str	r3, [r7, #68]	; 0x44
 80080ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e6      	bne.n	80080aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2220      	movs	r2, #32
 80080e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e062      	b.n	80081b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d149      	bne.n	8008190 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008104:	2200      	movs	r2, #0
 8008106:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f856 	bl	80081bc <UART_WaitOnFlagUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d03c      	beq.n	8008190 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	623b      	str	r3, [r7, #32]
   return(result);
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800812a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008134:	633b      	str	r3, [r7, #48]	; 0x30
 8008136:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800813a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e6      	bne.n	8008116 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3308      	adds	r3, #8
 800814e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	60fb      	str	r3, [r7, #12]
   return(result);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0301 	bic.w	r3, r3, #1
 800815e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3308      	adds	r3, #8
 8008166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008168:	61fa      	str	r2, [r7, #28]
 800816a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	69b9      	ldr	r1, [r7, #24]
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	e841 2300 	strex	r3, r2, [r1]
 8008174:	617b      	str	r3, [r7, #20]
   return(result);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e5      	bne.n	8008148 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e011      	b.n	80081b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3758      	adds	r7, #88	; 0x58
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	4613      	mov	r3, r2
 80081ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081cc:	e049      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d4:	d045      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d6:	f7fb fda1 	bl	8003d1c <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d302      	bcc.n	80081ec <UART_WaitOnFlagUntilTimeout+0x30>
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e048      	b.n	8008282 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d031      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b08      	cmp	r3, #8
 800820a:	d110      	bne.n	800822e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2208      	movs	r2, #8
 8008212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f8ff 	bl	8008418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2208      	movs	r2, #8
 800821e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e029      	b.n	8008282 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800823c:	d111      	bne.n	8008262 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f8e5 	bl	8008418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e00f      	b.n	8008282 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4013      	ands	r3, r2
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	429a      	cmp	r2, r3
 8008270:	bf0c      	ite	eq
 8008272:	2301      	moveq	r3, #1
 8008274:	2300      	movne	r3, #0
 8008276:	b2db      	uxtb	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	429a      	cmp	r2, r3
 800827e:	d0a6      	beq.n	80081ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800828c:	b480      	push	{r7}
 800828e:	b097      	sub	sp, #92	; 0x5c
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	88fa      	ldrh	r2, [r7, #6]
 80082a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082be:	d10e      	bne.n	80082de <UART_Start_Receive_IT+0x52>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <UART_Start_Receive_IT+0x48>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80082ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082d2:	e02d      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	22ff      	movs	r2, #255	; 0xff
 80082d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082dc:	e028      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10d      	bne.n	8008302 <UART_Start_Receive_IT+0x76>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <UART_Start_Receive_IT+0x6c>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	22ff      	movs	r2, #255	; 0xff
 80082f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80082f6:	e01b      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	227f      	movs	r2, #127	; 0x7f
 80082fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008300:	e016      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800830a:	d10d      	bne.n	8008328 <UART_Start_Receive_IT+0x9c>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d104      	bne.n	800831e <UART_Start_Receive_IT+0x92>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	227f      	movs	r2, #127	; 0x7f
 8008318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800831c:	e008      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	223f      	movs	r2, #63	; 0x3f
 8008322:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008326:	e003      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2222      	movs	r2, #34	; 0x22
 800833c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3308      	adds	r3, #8
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	657b      	str	r3, [r7, #84]	; 0x54
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008360:	64ba      	str	r2, [r7, #72]	; 0x48
 8008362:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800836e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e5      	bne.n	8008340 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837c:	d107      	bne.n	800838e <UART_Start_Receive_IT+0x102>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d103      	bne.n	800838e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4a21      	ldr	r2, [pc, #132]	; (8008410 <UART_Start_Receive_IT+0x184>)
 800838a:	669a      	str	r2, [r3, #104]	; 0x68
 800838c:	e002      	b.n	8008394 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4a20      	ldr	r2, [pc, #128]	; (8008414 <UART_Start_Receive_IT+0x188>)
 8008392:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d019      	beq.n	80083d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80083b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34
 80083bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e6      	bne.n	800839c <UART_Start_Receive_IT+0x110>
 80083ce:	e018      	b.n	8008402 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	613b      	str	r3, [r7, #16]
   return(result);
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f043 0320 	orr.w	r3, r3, #32
 80083e4:	653b      	str	r3, [r7, #80]	; 0x50
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ee:	623b      	str	r3, [r7, #32]
 80083f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	69f9      	ldr	r1, [r7, #28]
 80083f4:	6a3a      	ldr	r2, [r7, #32]
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e6      	bne.n	80083d0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	375c      	adds	r7, #92	; 0x5c
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	0800871d 	.word	0x0800871d
 8008414:	08008561 	.word	0x08008561

08008418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008418:	b480      	push	{r7}
 800841a:	b095      	sub	sp, #84	; 0x54
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800843e:	643b      	str	r3, [r7, #64]	; 0x40
 8008440:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008444:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e6      	bne.n	8008420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3308      	adds	r3, #8
 8008458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	61fb      	str	r3, [r7, #28]
   return(result);
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	f023 0301 	bic.w	r3, r3, #1
 8008468:	64bb      	str	r3, [r7, #72]	; 0x48
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3308      	adds	r3, #8
 8008470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e5      	bne.n	8008452 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800848a:	2b01      	cmp	r3, #1
 800848c:	d118      	bne.n	80084c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	60bb      	str	r3, [r7, #8]
   return(result);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f023 0310 	bic.w	r3, r3, #16
 80084a2:	647b      	str	r3, [r7, #68]	; 0x44
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ac:	61bb      	str	r3, [r7, #24]
 80084ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	6979      	ldr	r1, [r7, #20]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	613b      	str	r3, [r7, #16]
   return(result);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e6      	bne.n	800848e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084d4:	bf00      	nop
 80084d6:	3754      	adds	r7, #84	; 0x54
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff fa44 	bl	800798c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	60bb      	str	r3, [r7, #8]
   return(result);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008528:	61fb      	str	r3, [r7, #28]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6979      	ldr	r1, [r7, #20]
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	613b      	str	r3, [r7, #16]
   return(result);
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e6      	bne.n	8008514 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2220      	movs	r2, #32
 800854a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fa10 	bl	8007978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008558:	bf00      	nop
 800855a:	3720      	adds	r7, #32
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b09c      	sub	sp, #112	; 0x70
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800856e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008578:	2b22      	cmp	r3, #34	; 0x22
 800857a:	f040 80be 	bne.w	80086fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008584:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008588:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800858c:	b2d9      	uxtb	r1, r3
 800858e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008592:	b2da      	uxtb	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008598:	400a      	ands	r2, r1
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f040 80a3 	bne.w	800870e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80085e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e6      	bne.n	80085c8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	e853 3f00 	ldrex	r3, [r3]
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800860a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860c:	f023 0301 	bic.w	r3, r3, #1
 8008610:	667b      	str	r3, [r7, #100]	; 0x64
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800861a:	647a      	str	r2, [r7, #68]	; 0x44
 800861c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e5      	bne.n	80085fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a34      	ldr	r2, [pc, #208]	; (8008718 <UART_RxISR_8BIT+0x1b8>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d01f      	beq.n	800868c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d018      	beq.n	800868c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	623b      	str	r3, [r7, #32]
   return(result);
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800866e:	663b      	str	r3, [r7, #96]	; 0x60
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008678:	633b      	str	r3, [r7, #48]	; 0x30
 800867a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800867e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e6      	bne.n	800865a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008690:	2b01      	cmp	r3, #1
 8008692:	d12e      	bne.n	80086f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0310 	bic.w	r3, r3, #16
 80086ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	69b9      	ldr	r1, [r7, #24]
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	617b      	str	r3, [r7, #20]
   return(result);
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e6      	bne.n	800869a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	2b10      	cmp	r3, #16
 80086d8:	d103      	bne.n	80086e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2210      	movs	r2, #16
 80086e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff f958 	bl	80079a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086f0:	e00d      	b.n	800870e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7f7 ffa2 	bl	800063c <HAL_UART_RxCpltCallback>
}
 80086f8:	e009      	b.n	800870e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	8b1b      	ldrh	r3, [r3, #24]
 8008700:	b29a      	uxth	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0208 	orr.w	r2, r2, #8
 800870a:	b292      	uxth	r2, r2
 800870c:	831a      	strh	r2, [r3, #24]
}
 800870e:	bf00      	nop
 8008710:	3770      	adds	r7, #112	; 0x70
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	40008000 	.word	0x40008000

0800871c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b09c      	sub	sp, #112	; 0x70
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800872a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008734:	2b22      	cmp	r3, #34	; 0x22
 8008736:	f040 80be 	bne.w	80088b6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008740:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008748:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800874a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800874e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008752:	4013      	ands	r3, r2
 8008754:	b29a      	uxth	r2, r3
 8008756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008758:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875e:	1c9a      	adds	r2, r3, #2
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800876a:	b29b      	uxth	r3, r3
 800876c:	3b01      	subs	r3, #1
 800876e:	b29a      	uxth	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800877c:	b29b      	uxth	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 80a3 	bne.w	80088ca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008798:	667b      	str	r3, [r7, #100]	; 0x64
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087a2:	657b      	str	r3, [r7, #84]	; 0x54
 80087a4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e6      	bne.n	8008784 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3308      	adds	r3, #8
 80087bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	f023 0301 	bic.w	r3, r3, #1
 80087cc:	663b      	str	r3, [r7, #96]	; 0x60
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087d6:	643a      	str	r2, [r7, #64]	; 0x40
 80087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e5      	bne.n	80087b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a34      	ldr	r2, [pc, #208]	; (80088d4 <UART_RxISR_16BIT+0x1b8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d01f      	beq.n	8008848 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d018      	beq.n	8008848 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	61fb      	str	r3, [r7, #28]
   return(result);
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800882a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008836:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800883a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e6      	bne.n	8008816 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884c:	2b01      	cmp	r3, #1
 800884e:	d12e      	bne.n	80088ae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	60bb      	str	r3, [r7, #8]
   return(result);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f023 0310 	bic.w	r3, r3, #16
 800886a:	65bb      	str	r3, [r7, #88]	; 0x58
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6979      	ldr	r1, [r7, #20]
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	613b      	str	r3, [r7, #16]
   return(result);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e6      	bne.n	8008856 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b10      	cmp	r3, #16
 8008894:	d103      	bne.n	800889e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2210      	movs	r2, #16
 800889c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff f87a 	bl	80079a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088ac:	e00d      	b.n	80088ca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7f7 fec4 	bl	800063c <HAL_UART_RxCpltCallback>
}
 80088b4:	e009      	b.n	80088ca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	8b1b      	ldrh	r3, [r3, #24]
 80088bc:	b29a      	uxth	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0208 	orr.w	r2, r2, #8
 80088c6:	b292      	uxth	r2, r2
 80088c8:	831a      	strh	r2, [r3, #24]
}
 80088ca:	bf00      	nop
 80088cc:	3770      	adds	r7, #112	; 0x70
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40008000 	.word	0x40008000

080088d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <malloc>:
 80088ec:	4b02      	ldr	r3, [pc, #8]	; (80088f8 <malloc+0xc>)
 80088ee:	4601      	mov	r1, r0
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	f000 b82b 	b.w	800894c <_malloc_r>
 80088f6:	bf00      	nop
 80088f8:	20000074 	.word	0x20000074

080088fc <free>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <free+0xc>)
 80088fe:	4601      	mov	r1, r0
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	f000 bd1f 	b.w	8009344 <_free_r>
 8008906:	bf00      	nop
 8008908:	20000074 	.word	0x20000074

0800890c <sbrk_aligned>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	4e0e      	ldr	r6, [pc, #56]	; (8008948 <sbrk_aligned+0x3c>)
 8008910:	460c      	mov	r4, r1
 8008912:	6831      	ldr	r1, [r6, #0]
 8008914:	4605      	mov	r5, r0
 8008916:	b911      	cbnz	r1, 800891e <sbrk_aligned+0x12>
 8008918:	f000 fcae 	bl	8009278 <_sbrk_r>
 800891c:	6030      	str	r0, [r6, #0]
 800891e:	4621      	mov	r1, r4
 8008920:	4628      	mov	r0, r5
 8008922:	f000 fca9 	bl	8009278 <_sbrk_r>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	d00a      	beq.n	8008940 <sbrk_aligned+0x34>
 800892a:	1cc4      	adds	r4, r0, #3
 800892c:	f024 0403 	bic.w	r4, r4, #3
 8008930:	42a0      	cmp	r0, r4
 8008932:	d007      	beq.n	8008944 <sbrk_aligned+0x38>
 8008934:	1a21      	subs	r1, r4, r0
 8008936:	4628      	mov	r0, r5
 8008938:	f000 fc9e 	bl	8009278 <_sbrk_r>
 800893c:	3001      	adds	r0, #1
 800893e:	d101      	bne.n	8008944 <sbrk_aligned+0x38>
 8008940:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008944:	4620      	mov	r0, r4
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	20000a5c 	.word	0x20000a5c

0800894c <_malloc_r>:
 800894c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008950:	1ccd      	adds	r5, r1, #3
 8008952:	f025 0503 	bic.w	r5, r5, #3
 8008956:	3508      	adds	r5, #8
 8008958:	2d0c      	cmp	r5, #12
 800895a:	bf38      	it	cc
 800895c:	250c      	movcc	r5, #12
 800895e:	2d00      	cmp	r5, #0
 8008960:	4607      	mov	r7, r0
 8008962:	db01      	blt.n	8008968 <_malloc_r+0x1c>
 8008964:	42a9      	cmp	r1, r5
 8008966:	d905      	bls.n	8008974 <_malloc_r+0x28>
 8008968:	230c      	movs	r3, #12
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	2600      	movs	r6, #0
 800896e:	4630      	mov	r0, r6
 8008970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008974:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a48 <_malloc_r+0xfc>
 8008978:	f000 f868 	bl	8008a4c <__malloc_lock>
 800897c:	f8d8 3000 	ldr.w	r3, [r8]
 8008980:	461c      	mov	r4, r3
 8008982:	bb5c      	cbnz	r4, 80089dc <_malloc_r+0x90>
 8008984:	4629      	mov	r1, r5
 8008986:	4638      	mov	r0, r7
 8008988:	f7ff ffc0 	bl	800890c <sbrk_aligned>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	4604      	mov	r4, r0
 8008990:	d155      	bne.n	8008a3e <_malloc_r+0xf2>
 8008992:	f8d8 4000 	ldr.w	r4, [r8]
 8008996:	4626      	mov	r6, r4
 8008998:	2e00      	cmp	r6, #0
 800899a:	d145      	bne.n	8008a28 <_malloc_r+0xdc>
 800899c:	2c00      	cmp	r4, #0
 800899e:	d048      	beq.n	8008a32 <_malloc_r+0xe6>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	4631      	mov	r1, r6
 80089a4:	4638      	mov	r0, r7
 80089a6:	eb04 0903 	add.w	r9, r4, r3
 80089aa:	f000 fc65 	bl	8009278 <_sbrk_r>
 80089ae:	4581      	cmp	r9, r0
 80089b0:	d13f      	bne.n	8008a32 <_malloc_r+0xe6>
 80089b2:	6821      	ldr	r1, [r4, #0]
 80089b4:	1a6d      	subs	r5, r5, r1
 80089b6:	4629      	mov	r1, r5
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7ff ffa7 	bl	800890c <sbrk_aligned>
 80089be:	3001      	adds	r0, #1
 80089c0:	d037      	beq.n	8008a32 <_malloc_r+0xe6>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	442b      	add	r3, r5
 80089c6:	6023      	str	r3, [r4, #0]
 80089c8:	f8d8 3000 	ldr.w	r3, [r8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d038      	beq.n	8008a42 <_malloc_r+0xf6>
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	42a2      	cmp	r2, r4
 80089d4:	d12b      	bne.n	8008a2e <_malloc_r+0xe2>
 80089d6:	2200      	movs	r2, #0
 80089d8:	605a      	str	r2, [r3, #4]
 80089da:	e00f      	b.n	80089fc <_malloc_r+0xb0>
 80089dc:	6822      	ldr	r2, [r4, #0]
 80089de:	1b52      	subs	r2, r2, r5
 80089e0:	d41f      	bmi.n	8008a22 <_malloc_r+0xd6>
 80089e2:	2a0b      	cmp	r2, #11
 80089e4:	d917      	bls.n	8008a16 <_malloc_r+0xca>
 80089e6:	1961      	adds	r1, r4, r5
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	6025      	str	r5, [r4, #0]
 80089ec:	bf18      	it	ne
 80089ee:	6059      	strne	r1, [r3, #4]
 80089f0:	6863      	ldr	r3, [r4, #4]
 80089f2:	bf08      	it	eq
 80089f4:	f8c8 1000 	streq.w	r1, [r8]
 80089f8:	5162      	str	r2, [r4, r5]
 80089fa:	604b      	str	r3, [r1, #4]
 80089fc:	4638      	mov	r0, r7
 80089fe:	f104 060b 	add.w	r6, r4, #11
 8008a02:	f000 f829 	bl	8008a58 <__malloc_unlock>
 8008a06:	f026 0607 	bic.w	r6, r6, #7
 8008a0a:	1d23      	adds	r3, r4, #4
 8008a0c:	1af2      	subs	r2, r6, r3
 8008a0e:	d0ae      	beq.n	800896e <_malloc_r+0x22>
 8008a10:	1b9b      	subs	r3, r3, r6
 8008a12:	50a3      	str	r3, [r4, r2]
 8008a14:	e7ab      	b.n	800896e <_malloc_r+0x22>
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	6862      	ldr	r2, [r4, #4]
 8008a1a:	d1dd      	bne.n	80089d8 <_malloc_r+0x8c>
 8008a1c:	f8c8 2000 	str.w	r2, [r8]
 8008a20:	e7ec      	b.n	80089fc <_malloc_r+0xb0>
 8008a22:	4623      	mov	r3, r4
 8008a24:	6864      	ldr	r4, [r4, #4]
 8008a26:	e7ac      	b.n	8008982 <_malloc_r+0x36>
 8008a28:	4634      	mov	r4, r6
 8008a2a:	6876      	ldr	r6, [r6, #4]
 8008a2c:	e7b4      	b.n	8008998 <_malloc_r+0x4c>
 8008a2e:	4613      	mov	r3, r2
 8008a30:	e7cc      	b.n	80089cc <_malloc_r+0x80>
 8008a32:	230c      	movs	r3, #12
 8008a34:	603b      	str	r3, [r7, #0]
 8008a36:	4638      	mov	r0, r7
 8008a38:	f000 f80e 	bl	8008a58 <__malloc_unlock>
 8008a3c:	e797      	b.n	800896e <_malloc_r+0x22>
 8008a3e:	6025      	str	r5, [r4, #0]
 8008a40:	e7dc      	b.n	80089fc <_malloc_r+0xb0>
 8008a42:	605b      	str	r3, [r3, #4]
 8008a44:	deff      	udf	#255	; 0xff
 8008a46:	bf00      	nop
 8008a48:	20000a58 	.word	0x20000a58

08008a4c <__malloc_lock>:
 8008a4c:	4801      	ldr	r0, [pc, #4]	; (8008a54 <__malloc_lock+0x8>)
 8008a4e:	f000 bc60 	b.w	8009312 <__retarget_lock_acquire_recursive>
 8008a52:	bf00      	nop
 8008a54:	20000ba0 	.word	0x20000ba0

08008a58 <__malloc_unlock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__malloc_unlock+0x8>)
 8008a5a:	f000 bc5b 	b.w	8009314 <__retarget_lock_release_recursive>
 8008a5e:	bf00      	nop
 8008a60:	20000ba0 	.word	0x20000ba0

08008a64 <_strtoll_l.constprop.0>:
 8008a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	4688      	mov	r8, r1
 8008a6c:	9201      	str	r2, [sp, #4]
 8008a6e:	4a45      	ldr	r2, [pc, #276]	; (8008b84 <_strtoll_l.constprop.0+0x120>)
 8008a70:	9003      	str	r0, [sp, #12]
 8008a72:	461e      	mov	r6, r3
 8008a74:	460d      	mov	r5, r1
 8008a76:	462b      	mov	r3, r5
 8008a78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a7c:	5d17      	ldrb	r7, [r2, r4]
 8008a7e:	f017 0708 	ands.w	r7, r7, #8
 8008a82:	d1f8      	bne.n	8008a76 <_strtoll_l.constprop.0+0x12>
 8008a84:	2c2d      	cmp	r4, #45	; 0x2d
 8008a86:	d14a      	bne.n	8008b1e <_strtoll_l.constprop.0+0xba>
 8008a88:	782c      	ldrb	r4, [r5, #0]
 8008a8a:	2701      	movs	r7, #1
 8008a8c:	1c9d      	adds	r5, r3, #2
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	d073      	beq.n	8008b7a <_strtoll_l.constprop.0+0x116>
 8008a92:	2e10      	cmp	r6, #16
 8008a94:	d109      	bne.n	8008aaa <_strtoll_l.constprop.0+0x46>
 8008a96:	2c30      	cmp	r4, #48	; 0x30
 8008a98:	d107      	bne.n	8008aaa <_strtoll_l.constprop.0+0x46>
 8008a9a:	782b      	ldrb	r3, [r5, #0]
 8008a9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008aa0:	2b58      	cmp	r3, #88	; 0x58
 8008aa2:	d165      	bne.n	8008b70 <_strtoll_l.constprop.0+0x10c>
 8008aa4:	786c      	ldrb	r4, [r5, #1]
 8008aa6:	2610      	movs	r6, #16
 8008aa8:	3502      	adds	r5, #2
 8008aaa:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 8008aae:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 8008ab2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ab6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8008aba:	4632      	mov	r2, r6
 8008abc:	464b      	mov	r3, r9
 8008abe:	4658      	mov	r0, fp
 8008ac0:	4651      	mov	r1, sl
 8008ac2:	f7f7 fc3d 	bl	8000340 <__aeabi_uldivmod>
 8008ac6:	9202      	str	r2, [sp, #8]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	4684      	mov	ip, r0
 8008acc:	468e      	mov	lr, r1
 8008ace:	4610      	mov	r0, r2
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008ad6:	2b09      	cmp	r3, #9
 8008ad8:	d905      	bls.n	8008ae6 <_strtoll_l.constprop.0+0x82>
 8008ada:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008ade:	2b19      	cmp	r3, #25
 8008ae0:	d822      	bhi.n	8008b28 <_strtoll_l.constprop.0+0xc4>
 8008ae2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 8008ae6:	429e      	cmp	r6, r3
 8008ae8:	dd28      	ble.n	8008b3c <_strtoll_l.constprop.0+0xd8>
 8008aea:	1c54      	adds	r4, r2, #1
 8008aec:	d014      	beq.n	8008b18 <_strtoll_l.constprop.0+0xb4>
 8008aee:	4584      	cmp	ip, r0
 8008af0:	eb7e 0201 	sbcs.w	r2, lr, r1
 8008af4:	d31f      	bcc.n	8008b36 <_strtoll_l.constprop.0+0xd2>
 8008af6:	458e      	cmp	lr, r1
 8008af8:	bf08      	it	eq
 8008afa:	4584      	cmpeq	ip, r0
 8008afc:	d102      	bne.n	8008b04 <_strtoll_l.constprop.0+0xa0>
 8008afe:	9a02      	ldr	r2, [sp, #8]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	db18      	blt.n	8008b36 <_strtoll_l.constprop.0+0xd2>
 8008b04:	4371      	muls	r1, r6
 8008b06:	fb00 1109 	mla	r1, r0, r9, r1
 8008b0a:	fba6 0200 	umull	r0, r2, r6, r0
 8008b0e:	440a      	add	r2, r1
 8008b10:	1818      	adds	r0, r3, r0
 8008b12:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 8008b16:	2201      	movs	r2, #1
 8008b18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b1c:	e7d9      	b.n	8008ad2 <_strtoll_l.constprop.0+0x6e>
 8008b1e:	2c2b      	cmp	r4, #43	; 0x2b
 8008b20:	bf04      	itt	eq
 8008b22:	782c      	ldrbeq	r4, [r5, #0]
 8008b24:	1c9d      	addeq	r5, r3, #2
 8008b26:	e7b2      	b.n	8008a8e <_strtoll_l.constprop.0+0x2a>
 8008b28:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008b2c:	2b19      	cmp	r3, #25
 8008b2e:	d805      	bhi.n	8008b3c <_strtoll_l.constprop.0+0xd8>
 8008b30:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 8008b34:	e7d7      	b.n	8008ae6 <_strtoll_l.constprop.0+0x82>
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b3a:	e7ed      	b.n	8008b18 <_strtoll_l.constprop.0+0xb4>
 8008b3c:	1c53      	adds	r3, r2, #1
 8008b3e:	d109      	bne.n	8008b54 <_strtoll_l.constprop.0+0xf0>
 8008b40:	9a03      	ldr	r2, [sp, #12]
 8008b42:	2322      	movs	r3, #34	; 0x22
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	4658      	mov	r0, fp
 8008b4a:	4651      	mov	r1, sl
 8008b4c:	b953      	cbnz	r3, 8008b64 <_strtoll_l.constprop.0+0x100>
 8008b4e:	b005      	add	sp, #20
 8008b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b54:	b117      	cbz	r7, 8008b5c <_strtoll_l.constprop.0+0xf8>
 8008b56:	4240      	negs	r0, r0
 8008b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008b5c:	9b01      	ldr	r3, [sp, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0f5      	beq.n	8008b4e <_strtoll_l.constprop.0+0xea>
 8008b62:	b10a      	cbz	r2, 8008b68 <_strtoll_l.constprop.0+0x104>
 8008b64:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	f8c3 8000 	str.w	r8, [r3]
 8008b6e:	e7ee      	b.n	8008b4e <_strtoll_l.constprop.0+0xea>
 8008b70:	2430      	movs	r4, #48	; 0x30
 8008b72:	2e00      	cmp	r6, #0
 8008b74:	d199      	bne.n	8008aaa <_strtoll_l.constprop.0+0x46>
 8008b76:	2608      	movs	r6, #8
 8008b78:	e797      	b.n	8008aaa <_strtoll_l.constprop.0+0x46>
 8008b7a:	2c30      	cmp	r4, #48	; 0x30
 8008b7c:	d08d      	beq.n	8008a9a <_strtoll_l.constprop.0+0x36>
 8008b7e:	260a      	movs	r6, #10
 8008b80:	e793      	b.n	8008aaa <_strtoll_l.constprop.0+0x46>
 8008b82:	bf00      	nop
 8008b84:	0800ab91 	.word	0x0800ab91

08008b88 <strtoll>:
 8008b88:	4613      	mov	r3, r2
 8008b8a:	460a      	mov	r2, r1
 8008b8c:	4601      	mov	r1, r0
 8008b8e:	4802      	ldr	r0, [pc, #8]	; (8008b98 <strtoll+0x10>)
 8008b90:	6800      	ldr	r0, [r0, #0]
 8008b92:	f7ff bf67 	b.w	8008a64 <_strtoll_l.constprop.0>
 8008b96:	bf00      	nop
 8008b98:	20000074 	.word	0x20000074

08008b9c <std>:
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008baa:	6083      	str	r3, [r0, #8]
 8008bac:	8181      	strh	r1, [r0, #12]
 8008bae:	6643      	str	r3, [r0, #100]	; 0x64
 8008bb0:	81c2      	strh	r2, [r0, #14]
 8008bb2:	6183      	str	r3, [r0, #24]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	2208      	movs	r2, #8
 8008bb8:	305c      	adds	r0, #92	; 0x5c
 8008bba:	f000 fae5 	bl	8009188 <memset>
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <std+0x58>)
 8008bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8008bc2:	4b0d      	ldr	r3, [pc, #52]	; (8008bf8 <std+0x5c>)
 8008bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <std+0x60>)
 8008bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bca:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <std+0x64>)
 8008bcc:	6323      	str	r3, [r4, #48]	; 0x30
 8008bce:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <std+0x68>)
 8008bd0:	6224      	str	r4, [r4, #32]
 8008bd2:	429c      	cmp	r4, r3
 8008bd4:	d006      	beq.n	8008be4 <std+0x48>
 8008bd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008bda:	4294      	cmp	r4, r2
 8008bdc:	d002      	beq.n	8008be4 <std+0x48>
 8008bde:	33d0      	adds	r3, #208	; 0xd0
 8008be0:	429c      	cmp	r4, r3
 8008be2:	d105      	bne.n	8008bf0 <std+0x54>
 8008be4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bec:	f000 bb90 	b.w	8009310 <__retarget_lock_init_recursive>
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	bf00      	nop
 8008bf4:	08008fd5 	.word	0x08008fd5
 8008bf8:	08008ffb 	.word	0x08008ffb
 8008bfc:	08009033 	.word	0x08009033
 8008c00:	08009057 	.word	0x08009057
 8008c04:	20000a60 	.word	0x20000a60

08008c08 <stdio_exit_handler>:
 8008c08:	4a02      	ldr	r2, [pc, #8]	; (8008c14 <stdio_exit_handler+0xc>)
 8008c0a:	4903      	ldr	r1, [pc, #12]	; (8008c18 <stdio_exit_handler+0x10>)
 8008c0c:	4803      	ldr	r0, [pc, #12]	; (8008c1c <stdio_exit_handler+0x14>)
 8008c0e:	f000 b87b 	b.w	8008d08 <_fwalk_sglue>
 8008c12:	bf00      	nop
 8008c14:	2000001c 	.word	0x2000001c
 8008c18:	0800a381 	.word	0x0800a381
 8008c1c:	20000028 	.word	0x20000028

08008c20 <cleanup_stdio>:
 8008c20:	6841      	ldr	r1, [r0, #4]
 8008c22:	4b0c      	ldr	r3, [pc, #48]	; (8008c54 <cleanup_stdio+0x34>)
 8008c24:	4299      	cmp	r1, r3
 8008c26:	b510      	push	{r4, lr}
 8008c28:	4604      	mov	r4, r0
 8008c2a:	d001      	beq.n	8008c30 <cleanup_stdio+0x10>
 8008c2c:	f001 fba8 	bl	800a380 <_fflush_r>
 8008c30:	68a1      	ldr	r1, [r4, #8]
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <cleanup_stdio+0x38>)
 8008c34:	4299      	cmp	r1, r3
 8008c36:	d002      	beq.n	8008c3e <cleanup_stdio+0x1e>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f001 fba1 	bl	800a380 <_fflush_r>
 8008c3e:	68e1      	ldr	r1, [r4, #12]
 8008c40:	4b06      	ldr	r3, [pc, #24]	; (8008c5c <cleanup_stdio+0x3c>)
 8008c42:	4299      	cmp	r1, r3
 8008c44:	d004      	beq.n	8008c50 <cleanup_stdio+0x30>
 8008c46:	4620      	mov	r0, r4
 8008c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c4c:	f001 bb98 	b.w	800a380 <_fflush_r>
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	bf00      	nop
 8008c54:	20000a60 	.word	0x20000a60
 8008c58:	20000ac8 	.word	0x20000ac8
 8008c5c:	20000b30 	.word	0x20000b30

08008c60 <global_stdio_init.part.0>:
 8008c60:	b510      	push	{r4, lr}
 8008c62:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <global_stdio_init.part.0+0x30>)
 8008c64:	4c0b      	ldr	r4, [pc, #44]	; (8008c94 <global_stdio_init.part.0+0x34>)
 8008c66:	4a0c      	ldr	r2, [pc, #48]	; (8008c98 <global_stdio_init.part.0+0x38>)
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2104      	movs	r1, #4
 8008c70:	f7ff ff94 	bl	8008b9c <std>
 8008c74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008c78:	2201      	movs	r2, #1
 8008c7a:	2109      	movs	r1, #9
 8008c7c:	f7ff ff8e 	bl	8008b9c <std>
 8008c80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008c84:	2202      	movs	r2, #2
 8008c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c8a:	2112      	movs	r1, #18
 8008c8c:	f7ff bf86 	b.w	8008b9c <std>
 8008c90:	20000b98 	.word	0x20000b98
 8008c94:	20000a60 	.word	0x20000a60
 8008c98:	08008c09 	.word	0x08008c09

08008c9c <__sfp_lock_acquire>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	; (8008ca4 <__sfp_lock_acquire+0x8>)
 8008c9e:	f000 bb38 	b.w	8009312 <__retarget_lock_acquire_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	20000ba1 	.word	0x20000ba1

08008ca8 <__sfp_lock_release>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__sfp_lock_release+0x8>)
 8008caa:	f000 bb33 	b.w	8009314 <__retarget_lock_release_recursive>
 8008cae:	bf00      	nop
 8008cb0:	20000ba1 	.word	0x20000ba1

08008cb4 <__sinit>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	f7ff fff0 	bl	8008c9c <__sfp_lock_acquire>
 8008cbc:	6a23      	ldr	r3, [r4, #32]
 8008cbe:	b11b      	cbz	r3, 8008cc8 <__sinit+0x14>
 8008cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc4:	f7ff bff0 	b.w	8008ca8 <__sfp_lock_release>
 8008cc8:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <__sinit+0x28>)
 8008cca:	6223      	str	r3, [r4, #32]
 8008ccc:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <__sinit+0x2c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1f5      	bne.n	8008cc0 <__sinit+0xc>
 8008cd4:	f7ff ffc4 	bl	8008c60 <global_stdio_init.part.0>
 8008cd8:	e7f2      	b.n	8008cc0 <__sinit+0xc>
 8008cda:	bf00      	nop
 8008cdc:	08008c21 	.word	0x08008c21
 8008ce0:	20000b98 	.word	0x20000b98

08008ce4 <fiprintf>:
 8008ce4:	b40e      	push	{r1, r2, r3}
 8008ce6:	b503      	push	{r0, r1, lr}
 8008ce8:	4601      	mov	r1, r0
 8008cea:	ab03      	add	r3, sp, #12
 8008cec:	4805      	ldr	r0, [pc, #20]	; (8008d04 <fiprintf+0x20>)
 8008cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf2:	6800      	ldr	r0, [r0, #0]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	f000 fec5 	bl	8009a84 <_vfiprintf_r>
 8008cfa:	b002      	add	sp, #8
 8008cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d00:	b003      	add	sp, #12
 8008d02:	4770      	bx	lr
 8008d04:	20000074 	.word	0x20000074

08008d08 <_fwalk_sglue>:
 8008d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	4688      	mov	r8, r1
 8008d10:	4614      	mov	r4, r2
 8008d12:	2600      	movs	r6, #0
 8008d14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d18:	f1b9 0901 	subs.w	r9, r9, #1
 8008d1c:	d505      	bpl.n	8008d2a <_fwalk_sglue+0x22>
 8008d1e:	6824      	ldr	r4, [r4, #0]
 8008d20:	2c00      	cmp	r4, #0
 8008d22:	d1f7      	bne.n	8008d14 <_fwalk_sglue+0xc>
 8008d24:	4630      	mov	r0, r6
 8008d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d2a:	89ab      	ldrh	r3, [r5, #12]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d907      	bls.n	8008d40 <_fwalk_sglue+0x38>
 8008d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d34:	3301      	adds	r3, #1
 8008d36:	d003      	beq.n	8008d40 <_fwalk_sglue+0x38>
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	47c0      	blx	r8
 8008d3e:	4306      	orrs	r6, r0
 8008d40:	3568      	adds	r5, #104	; 0x68
 8008d42:	e7e9      	b.n	8008d18 <_fwalk_sglue+0x10>

08008d44 <_fwrite_r>:
 8008d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d48:	9c08      	ldr	r4, [sp, #32]
 8008d4a:	468a      	mov	sl, r1
 8008d4c:	4690      	mov	r8, r2
 8008d4e:	fb02 f903 	mul.w	r9, r2, r3
 8008d52:	4606      	mov	r6, r0
 8008d54:	b118      	cbz	r0, 8008d5e <_fwrite_r+0x1a>
 8008d56:	6a03      	ldr	r3, [r0, #32]
 8008d58:	b90b      	cbnz	r3, 8008d5e <_fwrite_r+0x1a>
 8008d5a:	f7ff ffab 	bl	8008cb4 <__sinit>
 8008d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d60:	07dd      	lsls	r5, r3, #31
 8008d62:	d405      	bmi.n	8008d70 <_fwrite_r+0x2c>
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	0598      	lsls	r0, r3, #22
 8008d68:	d402      	bmi.n	8008d70 <_fwrite_r+0x2c>
 8008d6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d6c:	f000 fad1 	bl	8009312 <__retarget_lock_acquire_recursive>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	0719      	lsls	r1, r3, #28
 8008d74:	d516      	bpl.n	8008da4 <_fwrite_r+0x60>
 8008d76:	6923      	ldr	r3, [r4, #16]
 8008d78:	b1a3      	cbz	r3, 8008da4 <_fwrite_r+0x60>
 8008d7a:	2500      	movs	r5, #0
 8008d7c:	454d      	cmp	r5, r9
 8008d7e:	d01f      	beq.n	8008dc0 <_fwrite_r+0x7c>
 8008d80:	68a7      	ldr	r7, [r4, #8]
 8008d82:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8008d86:	3f01      	subs	r7, #1
 8008d88:	2f00      	cmp	r7, #0
 8008d8a:	60a7      	str	r7, [r4, #8]
 8008d8c:	da04      	bge.n	8008d98 <_fwrite_r+0x54>
 8008d8e:	69a3      	ldr	r3, [r4, #24]
 8008d90:	429f      	cmp	r7, r3
 8008d92:	db0f      	blt.n	8008db4 <_fwrite_r+0x70>
 8008d94:	290a      	cmp	r1, #10
 8008d96:	d00d      	beq.n	8008db4 <_fwrite_r+0x70>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	6022      	str	r2, [r4, #0]
 8008d9e:	7019      	strb	r1, [r3, #0]
 8008da0:	3501      	adds	r5, #1
 8008da2:	e7eb      	b.n	8008d7c <_fwrite_r+0x38>
 8008da4:	4621      	mov	r1, r4
 8008da6:	4630      	mov	r0, r6
 8008da8:	f000 f996 	bl	80090d8 <__swsetup_r>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d0e4      	beq.n	8008d7a <_fwrite_r+0x36>
 8008db0:	2500      	movs	r5, #0
 8008db2:	e005      	b.n	8008dc0 <_fwrite_r+0x7c>
 8008db4:	4622      	mov	r2, r4
 8008db6:	4630      	mov	r0, r6
 8008db8:	f000 f951 	bl	800905e <__swbuf_r>
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d1ef      	bne.n	8008da0 <_fwrite_r+0x5c>
 8008dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dc2:	07da      	lsls	r2, r3, #31
 8008dc4:	d405      	bmi.n	8008dd2 <_fwrite_r+0x8e>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	059b      	lsls	r3, r3, #22
 8008dca:	d402      	bmi.n	8008dd2 <_fwrite_r+0x8e>
 8008dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dce:	f000 faa1 	bl	8009314 <__retarget_lock_release_recursive>
 8008dd2:	fbb5 f0f8 	udiv	r0, r5, r8
 8008dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08008ddc <fwrite>:
 8008ddc:	b507      	push	{r0, r1, r2, lr}
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	4613      	mov	r3, r2
 8008de2:	460a      	mov	r2, r1
 8008de4:	4601      	mov	r1, r0
 8008de6:	4803      	ldr	r0, [pc, #12]	; (8008df4 <fwrite+0x18>)
 8008de8:	6800      	ldr	r0, [r0, #0]
 8008dea:	f7ff ffab 	bl	8008d44 <_fwrite_r>
 8008dee:	b003      	add	sp, #12
 8008df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008df4:	20000074 	.word	0x20000074

08008df8 <iprintf>:
 8008df8:	b40f      	push	{r0, r1, r2, r3}
 8008dfa:	b507      	push	{r0, r1, r2, lr}
 8008dfc:	4906      	ldr	r1, [pc, #24]	; (8008e18 <iprintf+0x20>)
 8008dfe:	ab04      	add	r3, sp, #16
 8008e00:	6808      	ldr	r0, [r1, #0]
 8008e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e06:	6881      	ldr	r1, [r0, #8]
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	f000 fe3b 	bl	8009a84 <_vfiprintf_r>
 8008e0e:	b003      	add	sp, #12
 8008e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e14:	b004      	add	sp, #16
 8008e16:	4770      	bx	lr
 8008e18:	20000074 	.word	0x20000074

08008e1c <_puts_r>:
 8008e1c:	6a03      	ldr	r3, [r0, #32]
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	6884      	ldr	r4, [r0, #8]
 8008e22:	4605      	mov	r5, r0
 8008e24:	460e      	mov	r6, r1
 8008e26:	b90b      	cbnz	r3, 8008e2c <_puts_r+0x10>
 8008e28:	f7ff ff44 	bl	8008cb4 <__sinit>
 8008e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e2e:	07db      	lsls	r3, r3, #31
 8008e30:	d405      	bmi.n	8008e3e <_puts_r+0x22>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	0598      	lsls	r0, r3, #22
 8008e36:	d402      	bmi.n	8008e3e <_puts_r+0x22>
 8008e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e3a:	f000 fa6a 	bl	8009312 <__retarget_lock_acquire_recursive>
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	0719      	lsls	r1, r3, #28
 8008e42:	d513      	bpl.n	8008e6c <_puts_r+0x50>
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	b18b      	cbz	r3, 8008e6c <_puts_r+0x50>
 8008e48:	3e01      	subs	r6, #1
 8008e4a:	68a3      	ldr	r3, [r4, #8]
 8008e4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e50:	3b01      	subs	r3, #1
 8008e52:	60a3      	str	r3, [r4, #8]
 8008e54:	b9e9      	cbnz	r1, 8008e92 <_puts_r+0x76>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	da2e      	bge.n	8008eb8 <_puts_r+0x9c>
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	210a      	movs	r1, #10
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 f8fd 	bl	800905e <__swbuf_r>
 8008e64:	3001      	adds	r0, #1
 8008e66:	d007      	beq.n	8008e78 <_puts_r+0x5c>
 8008e68:	250a      	movs	r5, #10
 8008e6a:	e007      	b.n	8008e7c <_puts_r+0x60>
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f000 f932 	bl	80090d8 <__swsetup_r>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d0e7      	beq.n	8008e48 <_puts_r+0x2c>
 8008e78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008e7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e7e:	07da      	lsls	r2, r3, #31
 8008e80:	d405      	bmi.n	8008e8e <_puts_r+0x72>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	059b      	lsls	r3, r3, #22
 8008e86:	d402      	bmi.n	8008e8e <_puts_r+0x72>
 8008e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e8a:	f000 fa43 	bl	8009314 <__retarget_lock_release_recursive>
 8008e8e:	4628      	mov	r0, r5
 8008e90:	bd70      	pop	{r4, r5, r6, pc}
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da04      	bge.n	8008ea0 <_puts_r+0x84>
 8008e96:	69a2      	ldr	r2, [r4, #24]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	dc06      	bgt.n	8008eaa <_puts_r+0x8e>
 8008e9c:	290a      	cmp	r1, #10
 8008e9e:	d004      	beq.n	8008eaa <_puts_r+0x8e>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	6022      	str	r2, [r4, #0]
 8008ea6:	7019      	strb	r1, [r3, #0]
 8008ea8:	e7cf      	b.n	8008e4a <_puts_r+0x2e>
 8008eaa:	4622      	mov	r2, r4
 8008eac:	4628      	mov	r0, r5
 8008eae:	f000 f8d6 	bl	800905e <__swbuf_r>
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d1c9      	bne.n	8008e4a <_puts_r+0x2e>
 8008eb6:	e7df      	b.n	8008e78 <_puts_r+0x5c>
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	250a      	movs	r5, #10
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	6022      	str	r2, [r4, #0]
 8008ec0:	701d      	strb	r5, [r3, #0]
 8008ec2:	e7db      	b.n	8008e7c <_puts_r+0x60>

08008ec4 <puts>:
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <puts+0xc>)
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	f7ff bfa7 	b.w	8008e1c <_puts_r>
 8008ece:	bf00      	nop
 8008ed0:	20000074 	.word	0x20000074

08008ed4 <sniprintf>:
 8008ed4:	b40c      	push	{r2, r3}
 8008ed6:	b530      	push	{r4, r5, lr}
 8008ed8:	4b17      	ldr	r3, [pc, #92]	; (8008f38 <sniprintf+0x64>)
 8008eda:	1e0c      	subs	r4, r1, #0
 8008edc:	681d      	ldr	r5, [r3, #0]
 8008ede:	b09d      	sub	sp, #116	; 0x74
 8008ee0:	da08      	bge.n	8008ef4 <sniprintf+0x20>
 8008ee2:	238b      	movs	r3, #139	; 0x8b
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eea:	b01d      	add	sp, #116	; 0x74
 8008eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef0:	b002      	add	sp, #8
 8008ef2:	4770      	bx	lr
 8008ef4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ef8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008efc:	bf14      	ite	ne
 8008efe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008f02:	4623      	moveq	r3, r4
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	9307      	str	r3, [sp, #28]
 8008f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f0c:	9002      	str	r0, [sp, #8]
 8008f0e:	9006      	str	r0, [sp, #24]
 8008f10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f16:	ab21      	add	r3, sp, #132	; 0x84
 8008f18:	a902      	add	r1, sp, #8
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	9301      	str	r3, [sp, #4]
 8008f1e:	f000 fab7 	bl	8009490 <_svfiprintf_r>
 8008f22:	1c43      	adds	r3, r0, #1
 8008f24:	bfbc      	itt	lt
 8008f26:	238b      	movlt	r3, #139	; 0x8b
 8008f28:	602b      	strlt	r3, [r5, #0]
 8008f2a:	2c00      	cmp	r4, #0
 8008f2c:	d0dd      	beq.n	8008eea <sniprintf+0x16>
 8008f2e:	9b02      	ldr	r3, [sp, #8]
 8008f30:	2200      	movs	r2, #0
 8008f32:	701a      	strb	r2, [r3, #0]
 8008f34:	e7d9      	b.n	8008eea <sniprintf+0x16>
 8008f36:	bf00      	nop
 8008f38:	20000074 	.word	0x20000074

08008f3c <siprintf>:
 8008f3c:	b40e      	push	{r1, r2, r3}
 8008f3e:	b500      	push	{lr}
 8008f40:	b09c      	sub	sp, #112	; 0x70
 8008f42:	ab1d      	add	r3, sp, #116	; 0x74
 8008f44:	9002      	str	r0, [sp, #8]
 8008f46:	9006      	str	r0, [sp, #24]
 8008f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f4c:	4809      	ldr	r0, [pc, #36]	; (8008f74 <siprintf+0x38>)
 8008f4e:	9107      	str	r1, [sp, #28]
 8008f50:	9104      	str	r1, [sp, #16]
 8008f52:	4909      	ldr	r1, [pc, #36]	; (8008f78 <siprintf+0x3c>)
 8008f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f58:	9105      	str	r1, [sp, #20]
 8008f5a:	6800      	ldr	r0, [r0, #0]
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	a902      	add	r1, sp, #8
 8008f60:	f000 fa96 	bl	8009490 <_svfiprintf_r>
 8008f64:	9b02      	ldr	r3, [sp, #8]
 8008f66:	2200      	movs	r2, #0
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	b01c      	add	sp, #112	; 0x70
 8008f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f70:	b003      	add	sp, #12
 8008f72:	4770      	bx	lr
 8008f74:	20000074 	.word	0x20000074
 8008f78:	ffff0208 	.word	0xffff0208

08008f7c <siscanf>:
 8008f7c:	b40e      	push	{r1, r2, r3}
 8008f7e:	b510      	push	{r4, lr}
 8008f80:	b09f      	sub	sp, #124	; 0x7c
 8008f82:	ac21      	add	r4, sp, #132	; 0x84
 8008f84:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008f88:	f854 2b04 	ldr.w	r2, [r4], #4
 8008f8c:	9201      	str	r2, [sp, #4]
 8008f8e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008f92:	9004      	str	r0, [sp, #16]
 8008f94:	9008      	str	r0, [sp, #32]
 8008f96:	f7f7 f925 	bl	80001e4 <strlen>
 8008f9a:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <siscanf+0x50>)
 8008f9c:	9005      	str	r0, [sp, #20]
 8008f9e:	9009      	str	r0, [sp, #36]	; 0x24
 8008fa0:	930d      	str	r3, [sp, #52]	; 0x34
 8008fa2:	480b      	ldr	r0, [pc, #44]	; (8008fd0 <siscanf+0x54>)
 8008fa4:	9a01      	ldr	r2, [sp, #4]
 8008fa6:	6800      	ldr	r0, [r0, #0]
 8008fa8:	9403      	str	r4, [sp, #12]
 8008faa:	2300      	movs	r3, #0
 8008fac:	9311      	str	r3, [sp, #68]	; 0x44
 8008fae:	9316      	str	r3, [sp, #88]	; 0x58
 8008fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008fb8:	a904      	add	r1, sp, #16
 8008fba:	4623      	mov	r3, r4
 8008fbc:	f000 fbc0 	bl	8009740 <__ssvfiscanf_r>
 8008fc0:	b01f      	add	sp, #124	; 0x7c
 8008fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc6:	b003      	add	sp, #12
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	08008ff7 	.word	0x08008ff7
 8008fd0:	20000074 	.word	0x20000074

08008fd4 <__sread>:
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fdc:	f000 f93a 	bl	8009254 <_read_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	bfab      	itete	ge
 8008fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8008fe8:	181b      	addge	r3, r3, r0
 8008fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fee:	bfac      	ite	ge
 8008ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ff2:	81a3      	strhlt	r3, [r4, #12]
 8008ff4:	bd10      	pop	{r4, pc}

08008ff6 <__seofread>:
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	4770      	bx	lr

08008ffa <__swrite>:
 8008ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffe:	461f      	mov	r7, r3
 8009000:	898b      	ldrh	r3, [r1, #12]
 8009002:	05db      	lsls	r3, r3, #23
 8009004:	4605      	mov	r5, r0
 8009006:	460c      	mov	r4, r1
 8009008:	4616      	mov	r6, r2
 800900a:	d505      	bpl.n	8009018 <__swrite+0x1e>
 800900c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009010:	2302      	movs	r3, #2
 8009012:	2200      	movs	r2, #0
 8009014:	f000 f90c 	bl	8009230 <_lseek_r>
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800901e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	4632      	mov	r2, r6
 8009026:	463b      	mov	r3, r7
 8009028:	4628      	mov	r0, r5
 800902a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800902e:	f000 b933 	b.w	8009298 <_write_r>

08009032 <__sseek>:
 8009032:	b510      	push	{r4, lr}
 8009034:	460c      	mov	r4, r1
 8009036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800903a:	f000 f8f9 	bl	8009230 <_lseek_r>
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	bf15      	itete	ne
 8009044:	6560      	strne	r0, [r4, #84]	; 0x54
 8009046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800904a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800904e:	81a3      	strheq	r3, [r4, #12]
 8009050:	bf18      	it	ne
 8009052:	81a3      	strhne	r3, [r4, #12]
 8009054:	bd10      	pop	{r4, pc}

08009056 <__sclose>:
 8009056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905a:	f000 b8d9 	b.w	8009210 <_close_r>

0800905e <__swbuf_r>:
 800905e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009060:	460e      	mov	r6, r1
 8009062:	4614      	mov	r4, r2
 8009064:	4605      	mov	r5, r0
 8009066:	b118      	cbz	r0, 8009070 <__swbuf_r+0x12>
 8009068:	6a03      	ldr	r3, [r0, #32]
 800906a:	b90b      	cbnz	r3, 8009070 <__swbuf_r+0x12>
 800906c:	f7ff fe22 	bl	8008cb4 <__sinit>
 8009070:	69a3      	ldr	r3, [r4, #24]
 8009072:	60a3      	str	r3, [r4, #8]
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	071a      	lsls	r2, r3, #28
 8009078:	d525      	bpl.n	80090c6 <__swbuf_r+0x68>
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	b31b      	cbz	r3, 80090c6 <__swbuf_r+0x68>
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	6922      	ldr	r2, [r4, #16]
 8009082:	1a98      	subs	r0, r3, r2
 8009084:	6963      	ldr	r3, [r4, #20]
 8009086:	b2f6      	uxtb	r6, r6
 8009088:	4283      	cmp	r3, r0
 800908a:	4637      	mov	r7, r6
 800908c:	dc04      	bgt.n	8009098 <__swbuf_r+0x3a>
 800908e:	4621      	mov	r1, r4
 8009090:	4628      	mov	r0, r5
 8009092:	f001 f975 	bl	800a380 <_fflush_r>
 8009096:	b9e0      	cbnz	r0, 80090d2 <__swbuf_r+0x74>
 8009098:	68a3      	ldr	r3, [r4, #8]
 800909a:	3b01      	subs	r3, #1
 800909c:	60a3      	str	r3, [r4, #8]
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	6022      	str	r2, [r4, #0]
 80090a4:	701e      	strb	r6, [r3, #0]
 80090a6:	6962      	ldr	r2, [r4, #20]
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d004      	beq.n	80090b8 <__swbuf_r+0x5a>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	07db      	lsls	r3, r3, #31
 80090b2:	d506      	bpl.n	80090c2 <__swbuf_r+0x64>
 80090b4:	2e0a      	cmp	r6, #10
 80090b6:	d104      	bne.n	80090c2 <__swbuf_r+0x64>
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	f001 f960 	bl	800a380 <_fflush_r>
 80090c0:	b938      	cbnz	r0, 80090d2 <__swbuf_r+0x74>
 80090c2:	4638      	mov	r0, r7
 80090c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c6:	4621      	mov	r1, r4
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 f805 	bl	80090d8 <__swsetup_r>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d0d5      	beq.n	800907e <__swbuf_r+0x20>
 80090d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090d6:	e7f4      	b.n	80090c2 <__swbuf_r+0x64>

080090d8 <__swsetup_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4b2a      	ldr	r3, [pc, #168]	; (8009184 <__swsetup_r+0xac>)
 80090dc:	4605      	mov	r5, r0
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	460c      	mov	r4, r1
 80090e2:	b118      	cbz	r0, 80090ec <__swsetup_r+0x14>
 80090e4:	6a03      	ldr	r3, [r0, #32]
 80090e6:	b90b      	cbnz	r3, 80090ec <__swsetup_r+0x14>
 80090e8:	f7ff fde4 	bl	8008cb4 <__sinit>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090f2:	0718      	lsls	r0, r3, #28
 80090f4:	d422      	bmi.n	800913c <__swsetup_r+0x64>
 80090f6:	06d9      	lsls	r1, r3, #27
 80090f8:	d407      	bmi.n	800910a <__swsetup_r+0x32>
 80090fa:	2309      	movs	r3, #9
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009108:	e034      	b.n	8009174 <__swsetup_r+0x9c>
 800910a:	0758      	lsls	r0, r3, #29
 800910c:	d512      	bpl.n	8009134 <__swsetup_r+0x5c>
 800910e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009110:	b141      	cbz	r1, 8009124 <__swsetup_r+0x4c>
 8009112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009116:	4299      	cmp	r1, r3
 8009118:	d002      	beq.n	8009120 <__swsetup_r+0x48>
 800911a:	4628      	mov	r0, r5
 800911c:	f000 f912 	bl	8009344 <_free_r>
 8009120:	2300      	movs	r3, #0
 8009122:	6363      	str	r3, [r4, #52]	; 0x34
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	2300      	movs	r3, #0
 800912e:	6063      	str	r3, [r4, #4]
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	f043 0308 	orr.w	r3, r3, #8
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	b94b      	cbnz	r3, 8009154 <__swsetup_r+0x7c>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800914a:	d003      	beq.n	8009154 <__swsetup_r+0x7c>
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f001 f964 	bl	800a41c <__smakebuf_r>
 8009154:	89a0      	ldrh	r0, [r4, #12]
 8009156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800915a:	f010 0301 	ands.w	r3, r0, #1
 800915e:	d00a      	beq.n	8009176 <__swsetup_r+0x9e>
 8009160:	2300      	movs	r3, #0
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	6963      	ldr	r3, [r4, #20]
 8009166:	425b      	negs	r3, r3
 8009168:	61a3      	str	r3, [r4, #24]
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	b943      	cbnz	r3, 8009180 <__swsetup_r+0xa8>
 800916e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009172:	d1c4      	bne.n	80090fe <__swsetup_r+0x26>
 8009174:	bd38      	pop	{r3, r4, r5, pc}
 8009176:	0781      	lsls	r1, r0, #30
 8009178:	bf58      	it	pl
 800917a:	6963      	ldrpl	r3, [r4, #20]
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	e7f4      	b.n	800916a <__swsetup_r+0x92>
 8009180:	2000      	movs	r0, #0
 8009182:	e7f7      	b.n	8009174 <__swsetup_r+0x9c>
 8009184:	20000074 	.word	0x20000074

08009188 <memset>:
 8009188:	4402      	add	r2, r0
 800918a:	4603      	mov	r3, r0
 800918c:	4293      	cmp	r3, r2
 800918e:	d100      	bne.n	8009192 <memset+0xa>
 8009190:	4770      	bx	lr
 8009192:	f803 1b01 	strb.w	r1, [r3], #1
 8009196:	e7f9      	b.n	800918c <memset+0x4>

08009198 <strncmp>:
 8009198:	b510      	push	{r4, lr}
 800919a:	b16a      	cbz	r2, 80091b8 <strncmp+0x20>
 800919c:	3901      	subs	r1, #1
 800919e:	1884      	adds	r4, r0, r2
 80091a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d103      	bne.n	80091b4 <strncmp+0x1c>
 80091ac:	42a0      	cmp	r0, r4
 80091ae:	d001      	beq.n	80091b4 <strncmp+0x1c>
 80091b0:	2a00      	cmp	r2, #0
 80091b2:	d1f5      	bne.n	80091a0 <strncmp+0x8>
 80091b4:	1ad0      	subs	r0, r2, r3
 80091b6:	bd10      	pop	{r4, pc}
 80091b8:	4610      	mov	r0, r2
 80091ba:	e7fc      	b.n	80091b6 <strncmp+0x1e>

080091bc <strncpy>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	3901      	subs	r1, #1
 80091c0:	4603      	mov	r3, r0
 80091c2:	b132      	cbz	r2, 80091d2 <strncpy+0x16>
 80091c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80091c8:	f803 4b01 	strb.w	r4, [r3], #1
 80091cc:	3a01      	subs	r2, #1
 80091ce:	2c00      	cmp	r4, #0
 80091d0:	d1f7      	bne.n	80091c2 <strncpy+0x6>
 80091d2:	441a      	add	r2, r3
 80091d4:	2100      	movs	r1, #0
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d100      	bne.n	80091dc <strncpy+0x20>
 80091da:	bd10      	pop	{r4, pc}
 80091dc:	f803 1b01 	strb.w	r1, [r3], #1
 80091e0:	e7f9      	b.n	80091d6 <strncpy+0x1a>

080091e2 <strstr>:
 80091e2:	780a      	ldrb	r2, [r1, #0]
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	b96a      	cbnz	r2, 8009204 <strstr+0x22>
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d109      	bne.n	8009202 <strstr+0x20>
 80091ee:	460c      	mov	r4, r1
 80091f0:	4605      	mov	r5, r0
 80091f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0f6      	beq.n	80091e8 <strstr+0x6>
 80091fa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80091fe:	429e      	cmp	r6, r3
 8009200:	d0f7      	beq.n	80091f2 <strstr+0x10>
 8009202:	3001      	adds	r0, #1
 8009204:	7803      	ldrb	r3, [r0, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1ef      	bne.n	80091ea <strstr+0x8>
 800920a:	4618      	mov	r0, r3
 800920c:	e7ec      	b.n	80091e8 <strstr+0x6>
	...

08009210 <_close_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d06      	ldr	r5, [pc, #24]	; (800922c <_close_r+0x1c>)
 8009214:	2300      	movs	r3, #0
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	f7fa fc67 	bl	8003aee <_close>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_close_r+0x1a>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	b103      	cbz	r3, 800922a <_close_r+0x1a>
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20000b9c 	.word	0x20000b9c

08009230 <_lseek_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4d07      	ldr	r5, [pc, #28]	; (8009250 <_lseek_r+0x20>)
 8009234:	4604      	mov	r4, r0
 8009236:	4608      	mov	r0, r1
 8009238:	4611      	mov	r1, r2
 800923a:	2200      	movs	r2, #0
 800923c:	602a      	str	r2, [r5, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	f7fa fc7c 	bl	8003b3c <_lseek>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_lseek_r+0x1e>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_lseek_r+0x1e>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20000b9c 	.word	0x20000b9c

08009254 <_read_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d07      	ldr	r5, [pc, #28]	; (8009274 <_read_r+0x20>)
 8009258:	4604      	mov	r4, r0
 800925a:	4608      	mov	r0, r1
 800925c:	4611      	mov	r1, r2
 800925e:	2200      	movs	r2, #0
 8009260:	602a      	str	r2, [r5, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f7fa fc0a 	bl	8003a7c <_read>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_read_r+0x1e>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_read_r+0x1e>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	20000b9c 	.word	0x20000b9c

08009278 <_sbrk_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d06      	ldr	r5, [pc, #24]	; (8009294 <_sbrk_r+0x1c>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7fa fc68 	bl	8003b58 <_sbrk>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_sbrk_r+0x1a>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_sbrk_r+0x1a>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000b9c 	.word	0x20000b9c

08009298 <_write_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d07      	ldr	r5, [pc, #28]	; (80092b8 <_write_r+0x20>)
 800929c:	4604      	mov	r4, r0
 800929e:	4608      	mov	r0, r1
 80092a0:	4611      	mov	r1, r2
 80092a2:	2200      	movs	r2, #0
 80092a4:	602a      	str	r2, [r5, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	f7fa fc05 	bl	8003ab6 <_write>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_write_r+0x1e>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_write_r+0x1e>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	20000b9c 	.word	0x20000b9c

080092bc <__errno>:
 80092bc:	4b01      	ldr	r3, [pc, #4]	; (80092c4 <__errno+0x8>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000074 	.word	0x20000074

080092c8 <__libc_init_array>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	4d0d      	ldr	r5, [pc, #52]	; (8009300 <__libc_init_array+0x38>)
 80092cc:	4c0d      	ldr	r4, [pc, #52]	; (8009304 <__libc_init_array+0x3c>)
 80092ce:	1b64      	subs	r4, r4, r5
 80092d0:	10a4      	asrs	r4, r4, #2
 80092d2:	2600      	movs	r6, #0
 80092d4:	42a6      	cmp	r6, r4
 80092d6:	d109      	bne.n	80092ec <__libc_init_array+0x24>
 80092d8:	4d0b      	ldr	r5, [pc, #44]	; (8009308 <__libc_init_array+0x40>)
 80092da:	4c0c      	ldr	r4, [pc, #48]	; (800930c <__libc_init_array+0x44>)
 80092dc:	f001 faba 	bl	800a854 <_init>
 80092e0:	1b64      	subs	r4, r4, r5
 80092e2:	10a4      	asrs	r4, r4, #2
 80092e4:	2600      	movs	r6, #0
 80092e6:	42a6      	cmp	r6, r4
 80092e8:	d105      	bne.n	80092f6 <__libc_init_array+0x2e>
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f0:	4798      	blx	r3
 80092f2:	3601      	adds	r6, #1
 80092f4:	e7ee      	b.n	80092d4 <__libc_init_array+0xc>
 80092f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fa:	4798      	blx	r3
 80092fc:	3601      	adds	r6, #1
 80092fe:	e7f2      	b.n	80092e6 <__libc_init_array+0x1e>
 8009300:	0800ace8 	.word	0x0800ace8
 8009304:	0800ace8 	.word	0x0800ace8
 8009308:	0800ace8 	.word	0x0800ace8
 800930c:	0800acec 	.word	0x0800acec

08009310 <__retarget_lock_init_recursive>:
 8009310:	4770      	bx	lr

08009312 <__retarget_lock_acquire_recursive>:
 8009312:	4770      	bx	lr

08009314 <__retarget_lock_release_recursive>:
 8009314:	4770      	bx	lr

08009316 <strcpy>:
 8009316:	4603      	mov	r3, r0
 8009318:	f811 2b01 	ldrb.w	r2, [r1], #1
 800931c:	f803 2b01 	strb.w	r2, [r3], #1
 8009320:	2a00      	cmp	r2, #0
 8009322:	d1f9      	bne.n	8009318 <strcpy+0x2>
 8009324:	4770      	bx	lr

08009326 <memcpy>:
 8009326:	440a      	add	r2, r1
 8009328:	4291      	cmp	r1, r2
 800932a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800932e:	d100      	bne.n	8009332 <memcpy+0xc>
 8009330:	4770      	bx	lr
 8009332:	b510      	push	{r4, lr}
 8009334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800933c:	4291      	cmp	r1, r2
 800933e:	d1f9      	bne.n	8009334 <memcpy+0xe>
 8009340:	bd10      	pop	{r4, pc}
	...

08009344 <_free_r>:
 8009344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009346:	2900      	cmp	r1, #0
 8009348:	d044      	beq.n	80093d4 <_free_r+0x90>
 800934a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800934e:	9001      	str	r0, [sp, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	f1a1 0404 	sub.w	r4, r1, #4
 8009356:	bfb8      	it	lt
 8009358:	18e4      	addlt	r4, r4, r3
 800935a:	f7ff fb77 	bl	8008a4c <__malloc_lock>
 800935e:	4a1e      	ldr	r2, [pc, #120]	; (80093d8 <_free_r+0x94>)
 8009360:	9801      	ldr	r0, [sp, #4]
 8009362:	6813      	ldr	r3, [r2, #0]
 8009364:	b933      	cbnz	r3, 8009374 <_free_r+0x30>
 8009366:	6063      	str	r3, [r4, #4]
 8009368:	6014      	str	r4, [r2, #0]
 800936a:	b003      	add	sp, #12
 800936c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009370:	f7ff bb72 	b.w	8008a58 <__malloc_unlock>
 8009374:	42a3      	cmp	r3, r4
 8009376:	d908      	bls.n	800938a <_free_r+0x46>
 8009378:	6825      	ldr	r5, [r4, #0]
 800937a:	1961      	adds	r1, r4, r5
 800937c:	428b      	cmp	r3, r1
 800937e:	bf01      	itttt	eq
 8009380:	6819      	ldreq	r1, [r3, #0]
 8009382:	685b      	ldreq	r3, [r3, #4]
 8009384:	1949      	addeq	r1, r1, r5
 8009386:	6021      	streq	r1, [r4, #0]
 8009388:	e7ed      	b.n	8009366 <_free_r+0x22>
 800938a:	461a      	mov	r2, r3
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	b10b      	cbz	r3, 8009394 <_free_r+0x50>
 8009390:	42a3      	cmp	r3, r4
 8009392:	d9fa      	bls.n	800938a <_free_r+0x46>
 8009394:	6811      	ldr	r1, [r2, #0]
 8009396:	1855      	adds	r5, r2, r1
 8009398:	42a5      	cmp	r5, r4
 800939a:	d10b      	bne.n	80093b4 <_free_r+0x70>
 800939c:	6824      	ldr	r4, [r4, #0]
 800939e:	4421      	add	r1, r4
 80093a0:	1854      	adds	r4, r2, r1
 80093a2:	42a3      	cmp	r3, r4
 80093a4:	6011      	str	r1, [r2, #0]
 80093a6:	d1e0      	bne.n	800936a <_free_r+0x26>
 80093a8:	681c      	ldr	r4, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	6053      	str	r3, [r2, #4]
 80093ae:	440c      	add	r4, r1
 80093b0:	6014      	str	r4, [r2, #0]
 80093b2:	e7da      	b.n	800936a <_free_r+0x26>
 80093b4:	d902      	bls.n	80093bc <_free_r+0x78>
 80093b6:	230c      	movs	r3, #12
 80093b8:	6003      	str	r3, [r0, #0]
 80093ba:	e7d6      	b.n	800936a <_free_r+0x26>
 80093bc:	6825      	ldr	r5, [r4, #0]
 80093be:	1961      	adds	r1, r4, r5
 80093c0:	428b      	cmp	r3, r1
 80093c2:	bf04      	itt	eq
 80093c4:	6819      	ldreq	r1, [r3, #0]
 80093c6:	685b      	ldreq	r3, [r3, #4]
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	bf04      	itt	eq
 80093cc:	1949      	addeq	r1, r1, r5
 80093ce:	6021      	streq	r1, [r4, #0]
 80093d0:	6054      	str	r4, [r2, #4]
 80093d2:	e7ca      	b.n	800936a <_free_r+0x26>
 80093d4:	b003      	add	sp, #12
 80093d6:	bd30      	pop	{r4, r5, pc}
 80093d8:	20000a58 	.word	0x20000a58

080093dc <__ssputs_r>:
 80093dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e0:	688e      	ldr	r6, [r1, #8]
 80093e2:	461f      	mov	r7, r3
 80093e4:	42be      	cmp	r6, r7
 80093e6:	680b      	ldr	r3, [r1, #0]
 80093e8:	4682      	mov	sl, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	4690      	mov	r8, r2
 80093ee:	d82c      	bhi.n	800944a <__ssputs_r+0x6e>
 80093f0:	898a      	ldrh	r2, [r1, #12]
 80093f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093f6:	d026      	beq.n	8009446 <__ssputs_r+0x6a>
 80093f8:	6965      	ldr	r5, [r4, #20]
 80093fa:	6909      	ldr	r1, [r1, #16]
 80093fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009400:	eba3 0901 	sub.w	r9, r3, r1
 8009404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009408:	1c7b      	adds	r3, r7, #1
 800940a:	444b      	add	r3, r9
 800940c:	106d      	asrs	r5, r5, #1
 800940e:	429d      	cmp	r5, r3
 8009410:	bf38      	it	cc
 8009412:	461d      	movcc	r5, r3
 8009414:	0553      	lsls	r3, r2, #21
 8009416:	d527      	bpl.n	8009468 <__ssputs_r+0x8c>
 8009418:	4629      	mov	r1, r5
 800941a:	f7ff fa97 	bl	800894c <_malloc_r>
 800941e:	4606      	mov	r6, r0
 8009420:	b360      	cbz	r0, 800947c <__ssputs_r+0xa0>
 8009422:	6921      	ldr	r1, [r4, #16]
 8009424:	464a      	mov	r2, r9
 8009426:	f7ff ff7e 	bl	8009326 <memcpy>
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	6126      	str	r6, [r4, #16]
 8009438:	6165      	str	r5, [r4, #20]
 800943a:	444e      	add	r6, r9
 800943c:	eba5 0509 	sub.w	r5, r5, r9
 8009440:	6026      	str	r6, [r4, #0]
 8009442:	60a5      	str	r5, [r4, #8]
 8009444:	463e      	mov	r6, r7
 8009446:	42be      	cmp	r6, r7
 8009448:	d900      	bls.n	800944c <__ssputs_r+0x70>
 800944a:	463e      	mov	r6, r7
 800944c:	6820      	ldr	r0, [r4, #0]
 800944e:	4632      	mov	r2, r6
 8009450:	4641      	mov	r1, r8
 8009452:	f001 f892 	bl	800a57a <memmove>
 8009456:	68a3      	ldr	r3, [r4, #8]
 8009458:	1b9b      	subs	r3, r3, r6
 800945a:	60a3      	str	r3, [r4, #8]
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	4433      	add	r3, r6
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	2000      	movs	r0, #0
 8009464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009468:	462a      	mov	r2, r5
 800946a:	f001 f8c3 	bl	800a5f4 <_realloc_r>
 800946e:	4606      	mov	r6, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	d1e0      	bne.n	8009436 <__ssputs_r+0x5a>
 8009474:	6921      	ldr	r1, [r4, #16]
 8009476:	4650      	mov	r0, sl
 8009478:	f7ff ff64 	bl	8009344 <_free_r>
 800947c:	230c      	movs	r3, #12
 800947e:	f8ca 3000 	str.w	r3, [sl]
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009488:	81a3      	strh	r3, [r4, #12]
 800948a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800948e:	e7e9      	b.n	8009464 <__ssputs_r+0x88>

08009490 <_svfiprintf_r>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	4698      	mov	r8, r3
 8009496:	898b      	ldrh	r3, [r1, #12]
 8009498:	061b      	lsls	r3, r3, #24
 800949a:	b09d      	sub	sp, #116	; 0x74
 800949c:	4607      	mov	r7, r0
 800949e:	460d      	mov	r5, r1
 80094a0:	4614      	mov	r4, r2
 80094a2:	d50e      	bpl.n	80094c2 <_svfiprintf_r+0x32>
 80094a4:	690b      	ldr	r3, [r1, #16]
 80094a6:	b963      	cbnz	r3, 80094c2 <_svfiprintf_r+0x32>
 80094a8:	2140      	movs	r1, #64	; 0x40
 80094aa:	f7ff fa4f 	bl	800894c <_malloc_r>
 80094ae:	6028      	str	r0, [r5, #0]
 80094b0:	6128      	str	r0, [r5, #16]
 80094b2:	b920      	cbnz	r0, 80094be <_svfiprintf_r+0x2e>
 80094b4:	230c      	movs	r3, #12
 80094b6:	603b      	str	r3, [r7, #0]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094bc:	e0d0      	b.n	8009660 <_svfiprintf_r+0x1d0>
 80094be:	2340      	movs	r3, #64	; 0x40
 80094c0:	616b      	str	r3, [r5, #20]
 80094c2:	2300      	movs	r3, #0
 80094c4:	9309      	str	r3, [sp, #36]	; 0x24
 80094c6:	2320      	movs	r3, #32
 80094c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80094d0:	2330      	movs	r3, #48	; 0x30
 80094d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009678 <_svfiprintf_r+0x1e8>
 80094d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094da:	f04f 0901 	mov.w	r9, #1
 80094de:	4623      	mov	r3, r4
 80094e0:	469a      	mov	sl, r3
 80094e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e6:	b10a      	cbz	r2, 80094ec <_svfiprintf_r+0x5c>
 80094e8:	2a25      	cmp	r2, #37	; 0x25
 80094ea:	d1f9      	bne.n	80094e0 <_svfiprintf_r+0x50>
 80094ec:	ebba 0b04 	subs.w	fp, sl, r4
 80094f0:	d00b      	beq.n	800950a <_svfiprintf_r+0x7a>
 80094f2:	465b      	mov	r3, fp
 80094f4:	4622      	mov	r2, r4
 80094f6:	4629      	mov	r1, r5
 80094f8:	4638      	mov	r0, r7
 80094fa:	f7ff ff6f 	bl	80093dc <__ssputs_r>
 80094fe:	3001      	adds	r0, #1
 8009500:	f000 80a9 	beq.w	8009656 <_svfiprintf_r+0x1c6>
 8009504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009506:	445a      	add	r2, fp
 8009508:	9209      	str	r2, [sp, #36]	; 0x24
 800950a:	f89a 3000 	ldrb.w	r3, [sl]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 80a1 	beq.w	8009656 <_svfiprintf_r+0x1c6>
 8009514:	2300      	movs	r3, #0
 8009516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800951a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800951e:	f10a 0a01 	add.w	sl, sl, #1
 8009522:	9304      	str	r3, [sp, #16]
 8009524:	9307      	str	r3, [sp, #28]
 8009526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800952a:	931a      	str	r3, [sp, #104]	; 0x68
 800952c:	4654      	mov	r4, sl
 800952e:	2205      	movs	r2, #5
 8009530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009534:	4850      	ldr	r0, [pc, #320]	; (8009678 <_svfiprintf_r+0x1e8>)
 8009536:	f7f6 fe63 	bl	8000200 <memchr>
 800953a:	9a04      	ldr	r2, [sp, #16]
 800953c:	b9d8      	cbnz	r0, 8009576 <_svfiprintf_r+0xe6>
 800953e:	06d0      	lsls	r0, r2, #27
 8009540:	bf44      	itt	mi
 8009542:	2320      	movmi	r3, #32
 8009544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009548:	0711      	lsls	r1, r2, #28
 800954a:	bf44      	itt	mi
 800954c:	232b      	movmi	r3, #43	; 0x2b
 800954e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009552:	f89a 3000 	ldrb.w	r3, [sl]
 8009556:	2b2a      	cmp	r3, #42	; 0x2a
 8009558:	d015      	beq.n	8009586 <_svfiprintf_r+0xf6>
 800955a:	9a07      	ldr	r2, [sp, #28]
 800955c:	4654      	mov	r4, sl
 800955e:	2000      	movs	r0, #0
 8009560:	f04f 0c0a 	mov.w	ip, #10
 8009564:	4621      	mov	r1, r4
 8009566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800956a:	3b30      	subs	r3, #48	; 0x30
 800956c:	2b09      	cmp	r3, #9
 800956e:	d94d      	bls.n	800960c <_svfiprintf_r+0x17c>
 8009570:	b1b0      	cbz	r0, 80095a0 <_svfiprintf_r+0x110>
 8009572:	9207      	str	r2, [sp, #28]
 8009574:	e014      	b.n	80095a0 <_svfiprintf_r+0x110>
 8009576:	eba0 0308 	sub.w	r3, r0, r8
 800957a:	fa09 f303 	lsl.w	r3, r9, r3
 800957e:	4313      	orrs	r3, r2
 8009580:	9304      	str	r3, [sp, #16]
 8009582:	46a2      	mov	sl, r4
 8009584:	e7d2      	b.n	800952c <_svfiprintf_r+0x9c>
 8009586:	9b03      	ldr	r3, [sp, #12]
 8009588:	1d19      	adds	r1, r3, #4
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	9103      	str	r1, [sp, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	bfbb      	ittet	lt
 8009592:	425b      	neglt	r3, r3
 8009594:	f042 0202 	orrlt.w	r2, r2, #2
 8009598:	9307      	strge	r3, [sp, #28]
 800959a:	9307      	strlt	r3, [sp, #28]
 800959c:	bfb8      	it	lt
 800959e:	9204      	strlt	r2, [sp, #16]
 80095a0:	7823      	ldrb	r3, [r4, #0]
 80095a2:	2b2e      	cmp	r3, #46	; 0x2e
 80095a4:	d10c      	bne.n	80095c0 <_svfiprintf_r+0x130>
 80095a6:	7863      	ldrb	r3, [r4, #1]
 80095a8:	2b2a      	cmp	r3, #42	; 0x2a
 80095aa:	d134      	bne.n	8009616 <_svfiprintf_r+0x186>
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	1d1a      	adds	r2, r3, #4
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	9203      	str	r2, [sp, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bfb8      	it	lt
 80095b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095bc:	3402      	adds	r4, #2
 80095be:	9305      	str	r3, [sp, #20]
 80095c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009688 <_svfiprintf_r+0x1f8>
 80095c4:	7821      	ldrb	r1, [r4, #0]
 80095c6:	2203      	movs	r2, #3
 80095c8:	4650      	mov	r0, sl
 80095ca:	f7f6 fe19 	bl	8000200 <memchr>
 80095ce:	b138      	cbz	r0, 80095e0 <_svfiprintf_r+0x150>
 80095d0:	9b04      	ldr	r3, [sp, #16]
 80095d2:	eba0 000a 	sub.w	r0, r0, sl
 80095d6:	2240      	movs	r2, #64	; 0x40
 80095d8:	4082      	lsls	r2, r0
 80095da:	4313      	orrs	r3, r2
 80095dc:	3401      	adds	r4, #1
 80095de:	9304      	str	r3, [sp, #16]
 80095e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e4:	4825      	ldr	r0, [pc, #148]	; (800967c <_svfiprintf_r+0x1ec>)
 80095e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ea:	2206      	movs	r2, #6
 80095ec:	f7f6 fe08 	bl	8000200 <memchr>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d038      	beq.n	8009666 <_svfiprintf_r+0x1d6>
 80095f4:	4b22      	ldr	r3, [pc, #136]	; (8009680 <_svfiprintf_r+0x1f0>)
 80095f6:	bb1b      	cbnz	r3, 8009640 <_svfiprintf_r+0x1b0>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	3307      	adds	r3, #7
 80095fc:	f023 0307 	bic.w	r3, r3, #7
 8009600:	3308      	adds	r3, #8
 8009602:	9303      	str	r3, [sp, #12]
 8009604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009606:	4433      	add	r3, r6
 8009608:	9309      	str	r3, [sp, #36]	; 0x24
 800960a:	e768      	b.n	80094de <_svfiprintf_r+0x4e>
 800960c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009610:	460c      	mov	r4, r1
 8009612:	2001      	movs	r0, #1
 8009614:	e7a6      	b.n	8009564 <_svfiprintf_r+0xd4>
 8009616:	2300      	movs	r3, #0
 8009618:	3401      	adds	r4, #1
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	4619      	mov	r1, r3
 800961e:	f04f 0c0a 	mov.w	ip, #10
 8009622:	4620      	mov	r0, r4
 8009624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009628:	3a30      	subs	r2, #48	; 0x30
 800962a:	2a09      	cmp	r2, #9
 800962c:	d903      	bls.n	8009636 <_svfiprintf_r+0x1a6>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0c6      	beq.n	80095c0 <_svfiprintf_r+0x130>
 8009632:	9105      	str	r1, [sp, #20]
 8009634:	e7c4      	b.n	80095c0 <_svfiprintf_r+0x130>
 8009636:	fb0c 2101 	mla	r1, ip, r1, r2
 800963a:	4604      	mov	r4, r0
 800963c:	2301      	movs	r3, #1
 800963e:	e7f0      	b.n	8009622 <_svfiprintf_r+0x192>
 8009640:	ab03      	add	r3, sp, #12
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	462a      	mov	r2, r5
 8009646:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <_svfiprintf_r+0x1f4>)
 8009648:	a904      	add	r1, sp, #16
 800964a:	4638      	mov	r0, r7
 800964c:	f3af 8000 	nop.w
 8009650:	1c42      	adds	r2, r0, #1
 8009652:	4606      	mov	r6, r0
 8009654:	d1d6      	bne.n	8009604 <_svfiprintf_r+0x174>
 8009656:	89ab      	ldrh	r3, [r5, #12]
 8009658:	065b      	lsls	r3, r3, #25
 800965a:	f53f af2d 	bmi.w	80094b8 <_svfiprintf_r+0x28>
 800965e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009660:	b01d      	add	sp, #116	; 0x74
 8009662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009666:	ab03      	add	r3, sp, #12
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	462a      	mov	r2, r5
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <_svfiprintf_r+0x1f4>)
 800966e:	a904      	add	r1, sp, #16
 8009670:	4638      	mov	r0, r7
 8009672:	f000 fb8f 	bl	8009d94 <_printf_i>
 8009676:	e7eb      	b.n	8009650 <_svfiprintf_r+0x1c0>
 8009678:	0800ac91 	.word	0x0800ac91
 800967c:	0800ac9b 	.word	0x0800ac9b
 8009680:	00000000 	.word	0x00000000
 8009684:	080093dd 	.word	0x080093dd
 8009688:	0800ac97 	.word	0x0800ac97

0800968c <_sungetc_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	1c4b      	adds	r3, r1, #1
 8009690:	4614      	mov	r4, r2
 8009692:	d103      	bne.n	800969c <_sungetc_r+0x10>
 8009694:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009698:	4628      	mov	r0, r5
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	8993      	ldrh	r3, [r2, #12]
 800969e:	f023 0320 	bic.w	r3, r3, #32
 80096a2:	8193      	strh	r3, [r2, #12]
 80096a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096a6:	6852      	ldr	r2, [r2, #4]
 80096a8:	b2cd      	uxtb	r5, r1
 80096aa:	b18b      	cbz	r3, 80096d0 <_sungetc_r+0x44>
 80096ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096ae:	4293      	cmp	r3, r2
 80096b0:	dd08      	ble.n	80096c4 <_sungetc_r+0x38>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	1e5a      	subs	r2, r3, #1
 80096b6:	6022      	str	r2, [r4, #0]
 80096b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80096bc:	6863      	ldr	r3, [r4, #4]
 80096be:	3301      	adds	r3, #1
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	e7e9      	b.n	8009698 <_sungetc_r+0xc>
 80096c4:	4621      	mov	r1, r4
 80096c6:	f000 ff1e 	bl	800a506 <__submore>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d0f1      	beq.n	80096b2 <_sungetc_r+0x26>
 80096ce:	e7e1      	b.n	8009694 <_sungetc_r+0x8>
 80096d0:	6921      	ldr	r1, [r4, #16]
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	b151      	cbz	r1, 80096ec <_sungetc_r+0x60>
 80096d6:	4299      	cmp	r1, r3
 80096d8:	d208      	bcs.n	80096ec <_sungetc_r+0x60>
 80096da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80096de:	42a9      	cmp	r1, r5
 80096e0:	d104      	bne.n	80096ec <_sungetc_r+0x60>
 80096e2:	3b01      	subs	r3, #1
 80096e4:	3201      	adds	r2, #1
 80096e6:	6023      	str	r3, [r4, #0]
 80096e8:	6062      	str	r2, [r4, #4]
 80096ea:	e7d5      	b.n	8009698 <_sungetc_r+0xc>
 80096ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80096f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096f4:	6363      	str	r3, [r4, #52]	; 0x34
 80096f6:	2303      	movs	r3, #3
 80096f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80096fa:	4623      	mov	r3, r4
 80096fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	2301      	movs	r3, #1
 8009704:	e7dc      	b.n	80096c0 <_sungetc_r+0x34>

08009706 <__ssrefill_r>:
 8009706:	b510      	push	{r4, lr}
 8009708:	460c      	mov	r4, r1
 800970a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800970c:	b169      	cbz	r1, 800972a <__ssrefill_r+0x24>
 800970e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009712:	4299      	cmp	r1, r3
 8009714:	d001      	beq.n	800971a <__ssrefill_r+0x14>
 8009716:	f7ff fe15 	bl	8009344 <_free_r>
 800971a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800971c:	6063      	str	r3, [r4, #4]
 800971e:	2000      	movs	r0, #0
 8009720:	6360      	str	r0, [r4, #52]	; 0x34
 8009722:	b113      	cbz	r3, 800972a <__ssrefill_r+0x24>
 8009724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	bd10      	pop	{r4, pc}
 800972a:	6923      	ldr	r3, [r4, #16]
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	2300      	movs	r3, #0
 8009730:	6063      	str	r3, [r4, #4]
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	f043 0320 	orr.w	r3, r3, #32
 8009738:	81a3      	strh	r3, [r4, #12]
 800973a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800973e:	e7f3      	b.n	8009728 <__ssrefill_r+0x22>

08009740 <__ssvfiscanf_r>:
 8009740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009744:	460c      	mov	r4, r1
 8009746:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800974a:	2100      	movs	r1, #0
 800974c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009750:	49a6      	ldr	r1, [pc, #664]	; (80099ec <__ssvfiscanf_r+0x2ac>)
 8009752:	91a0      	str	r1, [sp, #640]	; 0x280
 8009754:	f10d 0804 	add.w	r8, sp, #4
 8009758:	49a5      	ldr	r1, [pc, #660]	; (80099f0 <__ssvfiscanf_r+0x2b0>)
 800975a:	4fa6      	ldr	r7, [pc, #664]	; (80099f4 <__ssvfiscanf_r+0x2b4>)
 800975c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80099f8 <__ssvfiscanf_r+0x2b8>
 8009760:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009764:	4606      	mov	r6, r0
 8009766:	91a1      	str	r1, [sp, #644]	; 0x284
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	7813      	ldrb	r3, [r2, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 815a 	beq.w	8009a26 <__ssvfiscanf_r+0x2e6>
 8009772:	5cf9      	ldrb	r1, [r7, r3]
 8009774:	f011 0108 	ands.w	r1, r1, #8
 8009778:	f102 0501 	add.w	r5, r2, #1
 800977c:	d019      	beq.n	80097b2 <__ssvfiscanf_r+0x72>
 800977e:	6863      	ldr	r3, [r4, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	dd0f      	ble.n	80097a4 <__ssvfiscanf_r+0x64>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	5cba      	ldrb	r2, [r7, r2]
 800978a:	0712      	lsls	r2, r2, #28
 800978c:	d401      	bmi.n	8009792 <__ssvfiscanf_r+0x52>
 800978e:	462a      	mov	r2, r5
 8009790:	e7eb      	b.n	800976a <__ssvfiscanf_r+0x2a>
 8009792:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009794:	3201      	adds	r2, #1
 8009796:	9245      	str	r2, [sp, #276]	; 0x114
 8009798:	6862      	ldr	r2, [r4, #4]
 800979a:	3301      	adds	r3, #1
 800979c:	3a01      	subs	r2, #1
 800979e:	6062      	str	r2, [r4, #4]
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	e7ec      	b.n	800977e <__ssvfiscanf_r+0x3e>
 80097a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097a6:	4621      	mov	r1, r4
 80097a8:	4630      	mov	r0, r6
 80097aa:	4798      	blx	r3
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d0e9      	beq.n	8009784 <__ssvfiscanf_r+0x44>
 80097b0:	e7ed      	b.n	800978e <__ssvfiscanf_r+0x4e>
 80097b2:	2b25      	cmp	r3, #37	; 0x25
 80097b4:	d012      	beq.n	80097dc <__ssvfiscanf_r+0x9c>
 80097b6:	469a      	mov	sl, r3
 80097b8:	6863      	ldr	r3, [r4, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f340 8091 	ble.w	80098e2 <__ssvfiscanf_r+0x1a2>
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	7813      	ldrb	r3, [r2, #0]
 80097c4:	4553      	cmp	r3, sl
 80097c6:	f040 812e 	bne.w	8009a26 <__ssvfiscanf_r+0x2e6>
 80097ca:	6863      	ldr	r3, [r4, #4]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	6063      	str	r3, [r4, #4]
 80097d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80097d2:	3201      	adds	r2, #1
 80097d4:	3301      	adds	r3, #1
 80097d6:	6022      	str	r2, [r4, #0]
 80097d8:	9345      	str	r3, [sp, #276]	; 0x114
 80097da:	e7d8      	b.n	800978e <__ssvfiscanf_r+0x4e>
 80097dc:	9141      	str	r1, [sp, #260]	; 0x104
 80097de:	9143      	str	r1, [sp, #268]	; 0x10c
 80097e0:	7853      	ldrb	r3, [r2, #1]
 80097e2:	2b2a      	cmp	r3, #42	; 0x2a
 80097e4:	bf02      	ittt	eq
 80097e6:	2310      	moveq	r3, #16
 80097e8:	1c95      	addeq	r5, r2, #2
 80097ea:	9341      	streq	r3, [sp, #260]	; 0x104
 80097ec:	220a      	movs	r2, #10
 80097ee:	46aa      	mov	sl, r5
 80097f0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80097f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80097f8:	2b09      	cmp	r3, #9
 80097fa:	d91c      	bls.n	8009836 <__ssvfiscanf_r+0xf6>
 80097fc:	487e      	ldr	r0, [pc, #504]	; (80099f8 <__ssvfiscanf_r+0x2b8>)
 80097fe:	2203      	movs	r2, #3
 8009800:	f7f6 fcfe 	bl	8000200 <memchr>
 8009804:	b138      	cbz	r0, 8009816 <__ssvfiscanf_r+0xd6>
 8009806:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009808:	eba0 0009 	sub.w	r0, r0, r9
 800980c:	2301      	movs	r3, #1
 800980e:	4083      	lsls	r3, r0
 8009810:	4313      	orrs	r3, r2
 8009812:	9341      	str	r3, [sp, #260]	; 0x104
 8009814:	4655      	mov	r5, sl
 8009816:	f815 3b01 	ldrb.w	r3, [r5], #1
 800981a:	2b78      	cmp	r3, #120	; 0x78
 800981c:	d806      	bhi.n	800982c <__ssvfiscanf_r+0xec>
 800981e:	2b57      	cmp	r3, #87	; 0x57
 8009820:	d810      	bhi.n	8009844 <__ssvfiscanf_r+0x104>
 8009822:	2b25      	cmp	r3, #37	; 0x25
 8009824:	d0c7      	beq.n	80097b6 <__ssvfiscanf_r+0x76>
 8009826:	d857      	bhi.n	80098d8 <__ssvfiscanf_r+0x198>
 8009828:	2b00      	cmp	r3, #0
 800982a:	d065      	beq.n	80098f8 <__ssvfiscanf_r+0x1b8>
 800982c:	2303      	movs	r3, #3
 800982e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009830:	230a      	movs	r3, #10
 8009832:	9342      	str	r3, [sp, #264]	; 0x108
 8009834:	e076      	b.n	8009924 <__ssvfiscanf_r+0x1e4>
 8009836:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009838:	fb02 1103 	mla	r1, r2, r3, r1
 800983c:	3930      	subs	r1, #48	; 0x30
 800983e:	9143      	str	r1, [sp, #268]	; 0x10c
 8009840:	4655      	mov	r5, sl
 8009842:	e7d4      	b.n	80097ee <__ssvfiscanf_r+0xae>
 8009844:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009848:	2a20      	cmp	r2, #32
 800984a:	d8ef      	bhi.n	800982c <__ssvfiscanf_r+0xec>
 800984c:	a101      	add	r1, pc, #4	; (adr r1, 8009854 <__ssvfiscanf_r+0x114>)
 800984e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009852:	bf00      	nop
 8009854:	08009907 	.word	0x08009907
 8009858:	0800982d 	.word	0x0800982d
 800985c:	0800982d 	.word	0x0800982d
 8009860:	08009965 	.word	0x08009965
 8009864:	0800982d 	.word	0x0800982d
 8009868:	0800982d 	.word	0x0800982d
 800986c:	0800982d 	.word	0x0800982d
 8009870:	0800982d 	.word	0x0800982d
 8009874:	0800982d 	.word	0x0800982d
 8009878:	0800982d 	.word	0x0800982d
 800987c:	0800982d 	.word	0x0800982d
 8009880:	0800997b 	.word	0x0800997b
 8009884:	08009961 	.word	0x08009961
 8009888:	080098df 	.word	0x080098df
 800988c:	080098df 	.word	0x080098df
 8009890:	080098df 	.word	0x080098df
 8009894:	0800982d 	.word	0x0800982d
 8009898:	0800991d 	.word	0x0800991d
 800989c:	0800982d 	.word	0x0800982d
 80098a0:	0800982d 	.word	0x0800982d
 80098a4:	0800982d 	.word	0x0800982d
 80098a8:	0800982d 	.word	0x0800982d
 80098ac:	0800998b 	.word	0x0800998b
 80098b0:	08009959 	.word	0x08009959
 80098b4:	080098ff 	.word	0x080098ff
 80098b8:	0800982d 	.word	0x0800982d
 80098bc:	0800982d 	.word	0x0800982d
 80098c0:	08009987 	.word	0x08009987
 80098c4:	0800982d 	.word	0x0800982d
 80098c8:	08009961 	.word	0x08009961
 80098cc:	0800982d 	.word	0x0800982d
 80098d0:	0800982d 	.word	0x0800982d
 80098d4:	08009907 	.word	0x08009907
 80098d8:	3b45      	subs	r3, #69	; 0x45
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d8a6      	bhi.n	800982c <__ssvfiscanf_r+0xec>
 80098de:	2305      	movs	r3, #5
 80098e0:	e01f      	b.n	8009922 <__ssvfiscanf_r+0x1e2>
 80098e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098e4:	4621      	mov	r1, r4
 80098e6:	4630      	mov	r0, r6
 80098e8:	4798      	blx	r3
 80098ea:	2800      	cmp	r0, #0
 80098ec:	f43f af68 	beq.w	80097c0 <__ssvfiscanf_r+0x80>
 80098f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f040 808d 	bne.w	8009a12 <__ssvfiscanf_r+0x2d2>
 80098f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098fc:	e08f      	b.n	8009a1e <__ssvfiscanf_r+0x2de>
 80098fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009900:	f042 0220 	orr.w	r2, r2, #32
 8009904:	9241      	str	r2, [sp, #260]	; 0x104
 8009906:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800990c:	9241      	str	r2, [sp, #260]	; 0x104
 800990e:	2210      	movs	r2, #16
 8009910:	2b6f      	cmp	r3, #111	; 0x6f
 8009912:	9242      	str	r2, [sp, #264]	; 0x108
 8009914:	bf34      	ite	cc
 8009916:	2303      	movcc	r3, #3
 8009918:	2304      	movcs	r3, #4
 800991a:	e002      	b.n	8009922 <__ssvfiscanf_r+0x1e2>
 800991c:	2300      	movs	r3, #0
 800991e:	9342      	str	r3, [sp, #264]	; 0x108
 8009920:	2303      	movs	r3, #3
 8009922:	9347      	str	r3, [sp, #284]	; 0x11c
 8009924:	6863      	ldr	r3, [r4, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	dd3d      	ble.n	80099a6 <__ssvfiscanf_r+0x266>
 800992a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800992c:	0659      	lsls	r1, r3, #25
 800992e:	d404      	bmi.n	800993a <__ssvfiscanf_r+0x1fa>
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	781a      	ldrb	r2, [r3, #0]
 8009934:	5cba      	ldrb	r2, [r7, r2]
 8009936:	0712      	lsls	r2, r2, #28
 8009938:	d43c      	bmi.n	80099b4 <__ssvfiscanf_r+0x274>
 800993a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800993c:	2b02      	cmp	r3, #2
 800993e:	dc4b      	bgt.n	80099d8 <__ssvfiscanf_r+0x298>
 8009940:	466b      	mov	r3, sp
 8009942:	4622      	mov	r2, r4
 8009944:	a941      	add	r1, sp, #260	; 0x104
 8009946:	4630      	mov	r0, r6
 8009948:	f000 fb46 	bl	8009fd8 <_scanf_chars>
 800994c:	2801      	cmp	r0, #1
 800994e:	d06a      	beq.n	8009a26 <__ssvfiscanf_r+0x2e6>
 8009950:	2802      	cmp	r0, #2
 8009952:	f47f af1c 	bne.w	800978e <__ssvfiscanf_r+0x4e>
 8009956:	e7cb      	b.n	80098f0 <__ssvfiscanf_r+0x1b0>
 8009958:	2308      	movs	r3, #8
 800995a:	9342      	str	r3, [sp, #264]	; 0x108
 800995c:	2304      	movs	r3, #4
 800995e:	e7e0      	b.n	8009922 <__ssvfiscanf_r+0x1e2>
 8009960:	220a      	movs	r2, #10
 8009962:	e7d5      	b.n	8009910 <__ssvfiscanf_r+0x1d0>
 8009964:	4629      	mov	r1, r5
 8009966:	4640      	mov	r0, r8
 8009968:	f000 fd94 	bl	800a494 <__sccl>
 800996c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800996e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009972:	9341      	str	r3, [sp, #260]	; 0x104
 8009974:	4605      	mov	r5, r0
 8009976:	2301      	movs	r3, #1
 8009978:	e7d3      	b.n	8009922 <__ssvfiscanf_r+0x1e2>
 800997a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800997c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009980:	9341      	str	r3, [sp, #260]	; 0x104
 8009982:	2300      	movs	r3, #0
 8009984:	e7cd      	b.n	8009922 <__ssvfiscanf_r+0x1e2>
 8009986:	2302      	movs	r3, #2
 8009988:	e7cb      	b.n	8009922 <__ssvfiscanf_r+0x1e2>
 800998a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800998c:	06c3      	lsls	r3, r0, #27
 800998e:	f53f aefe 	bmi.w	800978e <__ssvfiscanf_r+0x4e>
 8009992:	9b00      	ldr	r3, [sp, #0]
 8009994:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009996:	1d19      	adds	r1, r3, #4
 8009998:	9100      	str	r1, [sp, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	07c0      	lsls	r0, r0, #31
 800999e:	bf4c      	ite	mi
 80099a0:	801a      	strhmi	r2, [r3, #0]
 80099a2:	601a      	strpl	r2, [r3, #0]
 80099a4:	e6f3      	b.n	800978e <__ssvfiscanf_r+0x4e>
 80099a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099a8:	4621      	mov	r1, r4
 80099aa:	4630      	mov	r0, r6
 80099ac:	4798      	blx	r3
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d0bb      	beq.n	800992a <__ssvfiscanf_r+0x1ea>
 80099b2:	e79d      	b.n	80098f0 <__ssvfiscanf_r+0x1b0>
 80099b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80099b6:	3201      	adds	r2, #1
 80099b8:	9245      	str	r2, [sp, #276]	; 0x114
 80099ba:	6862      	ldr	r2, [r4, #4]
 80099bc:	3a01      	subs	r2, #1
 80099be:	2a00      	cmp	r2, #0
 80099c0:	6062      	str	r2, [r4, #4]
 80099c2:	dd02      	ble.n	80099ca <__ssvfiscanf_r+0x28a>
 80099c4:	3301      	adds	r3, #1
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	e7b2      	b.n	8009930 <__ssvfiscanf_r+0x1f0>
 80099ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099cc:	4621      	mov	r1, r4
 80099ce:	4630      	mov	r0, r6
 80099d0:	4798      	blx	r3
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d0ac      	beq.n	8009930 <__ssvfiscanf_r+0x1f0>
 80099d6:	e78b      	b.n	80098f0 <__ssvfiscanf_r+0x1b0>
 80099d8:	2b04      	cmp	r3, #4
 80099da:	dc0f      	bgt.n	80099fc <__ssvfiscanf_r+0x2bc>
 80099dc:	466b      	mov	r3, sp
 80099de:	4622      	mov	r2, r4
 80099e0:	a941      	add	r1, sp, #260	; 0x104
 80099e2:	4630      	mov	r0, r6
 80099e4:	f000 fb52 	bl	800a08c <_scanf_i>
 80099e8:	e7b0      	b.n	800994c <__ssvfiscanf_r+0x20c>
 80099ea:	bf00      	nop
 80099ec:	0800968d 	.word	0x0800968d
 80099f0:	08009707 	.word	0x08009707
 80099f4:	0800ab91 	.word	0x0800ab91
 80099f8:	0800ac97 	.word	0x0800ac97
 80099fc:	4b0b      	ldr	r3, [pc, #44]	; (8009a2c <__ssvfiscanf_r+0x2ec>)
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f43f aec5 	beq.w	800978e <__ssvfiscanf_r+0x4e>
 8009a04:	466b      	mov	r3, sp
 8009a06:	4622      	mov	r2, r4
 8009a08:	a941      	add	r1, sp, #260	; 0x104
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f3af 8000 	nop.w
 8009a10:	e79c      	b.n	800994c <__ssvfiscanf_r+0x20c>
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009a18:	bf18      	it	ne
 8009a1a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009a1e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a26:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009a28:	e7f9      	b.n	8009a1e <__ssvfiscanf_r+0x2de>
 8009a2a:	bf00      	nop
 8009a2c:	00000000 	.word	0x00000000

08009a30 <__sfputc_r>:
 8009a30:	6893      	ldr	r3, [r2, #8]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	b410      	push	{r4}
 8009a38:	6093      	str	r3, [r2, #8]
 8009a3a:	da08      	bge.n	8009a4e <__sfputc_r+0x1e>
 8009a3c:	6994      	ldr	r4, [r2, #24]
 8009a3e:	42a3      	cmp	r3, r4
 8009a40:	db01      	blt.n	8009a46 <__sfputc_r+0x16>
 8009a42:	290a      	cmp	r1, #10
 8009a44:	d103      	bne.n	8009a4e <__sfputc_r+0x1e>
 8009a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a4a:	f7ff bb08 	b.w	800905e <__swbuf_r>
 8009a4e:	6813      	ldr	r3, [r2, #0]
 8009a50:	1c58      	adds	r0, r3, #1
 8009a52:	6010      	str	r0, [r2, #0]
 8009a54:	7019      	strb	r1, [r3, #0]
 8009a56:	4608      	mov	r0, r1
 8009a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <__sfputs_r>:
 8009a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a60:	4606      	mov	r6, r0
 8009a62:	460f      	mov	r7, r1
 8009a64:	4614      	mov	r4, r2
 8009a66:	18d5      	adds	r5, r2, r3
 8009a68:	42ac      	cmp	r4, r5
 8009a6a:	d101      	bne.n	8009a70 <__sfputs_r+0x12>
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e007      	b.n	8009a80 <__sfputs_r+0x22>
 8009a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a74:	463a      	mov	r2, r7
 8009a76:	4630      	mov	r0, r6
 8009a78:	f7ff ffda 	bl	8009a30 <__sfputc_r>
 8009a7c:	1c43      	adds	r3, r0, #1
 8009a7e:	d1f3      	bne.n	8009a68 <__sfputs_r+0xa>
 8009a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a84 <_vfiprintf_r>:
 8009a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a88:	460d      	mov	r5, r1
 8009a8a:	b09d      	sub	sp, #116	; 0x74
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	4698      	mov	r8, r3
 8009a90:	4606      	mov	r6, r0
 8009a92:	b118      	cbz	r0, 8009a9c <_vfiprintf_r+0x18>
 8009a94:	6a03      	ldr	r3, [r0, #32]
 8009a96:	b90b      	cbnz	r3, 8009a9c <_vfiprintf_r+0x18>
 8009a98:	f7ff f90c 	bl	8008cb4 <__sinit>
 8009a9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a9e:	07d9      	lsls	r1, r3, #31
 8009aa0:	d405      	bmi.n	8009aae <_vfiprintf_r+0x2a>
 8009aa2:	89ab      	ldrh	r3, [r5, #12]
 8009aa4:	059a      	lsls	r2, r3, #22
 8009aa6:	d402      	bmi.n	8009aae <_vfiprintf_r+0x2a>
 8009aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aaa:	f7ff fc32 	bl	8009312 <__retarget_lock_acquire_recursive>
 8009aae:	89ab      	ldrh	r3, [r5, #12]
 8009ab0:	071b      	lsls	r3, r3, #28
 8009ab2:	d501      	bpl.n	8009ab8 <_vfiprintf_r+0x34>
 8009ab4:	692b      	ldr	r3, [r5, #16]
 8009ab6:	b99b      	cbnz	r3, 8009ae0 <_vfiprintf_r+0x5c>
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	f7ff fb0c 	bl	80090d8 <__swsetup_r>
 8009ac0:	b170      	cbz	r0, 8009ae0 <_vfiprintf_r+0x5c>
 8009ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ac4:	07dc      	lsls	r4, r3, #31
 8009ac6:	d504      	bpl.n	8009ad2 <_vfiprintf_r+0x4e>
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009acc:	b01d      	add	sp, #116	; 0x74
 8009ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	0598      	lsls	r0, r3, #22
 8009ad6:	d4f7      	bmi.n	8009ac8 <_vfiprintf_r+0x44>
 8009ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ada:	f7ff fc1b 	bl	8009314 <__retarget_lock_release_recursive>
 8009ade:	e7f3      	b.n	8009ac8 <_vfiprintf_r+0x44>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aee:	2330      	movs	r3, #48	; 0x30
 8009af0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009ca4 <_vfiprintf_r+0x220>
 8009af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009af8:	f04f 0901 	mov.w	r9, #1
 8009afc:	4623      	mov	r3, r4
 8009afe:	469a      	mov	sl, r3
 8009b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b04:	b10a      	cbz	r2, 8009b0a <_vfiprintf_r+0x86>
 8009b06:	2a25      	cmp	r2, #37	; 0x25
 8009b08:	d1f9      	bne.n	8009afe <_vfiprintf_r+0x7a>
 8009b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8009b0e:	d00b      	beq.n	8009b28 <_vfiprintf_r+0xa4>
 8009b10:	465b      	mov	r3, fp
 8009b12:	4622      	mov	r2, r4
 8009b14:	4629      	mov	r1, r5
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7ff ffa1 	bl	8009a5e <__sfputs_r>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f000 80a9 	beq.w	8009c74 <_vfiprintf_r+0x1f0>
 8009b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b24:	445a      	add	r2, fp
 8009b26:	9209      	str	r2, [sp, #36]	; 0x24
 8009b28:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 80a1 	beq.w	8009c74 <_vfiprintf_r+0x1f0>
 8009b32:	2300      	movs	r3, #0
 8009b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b3c:	f10a 0a01 	add.w	sl, sl, #1
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	9307      	str	r3, [sp, #28]
 8009b44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b48:	931a      	str	r3, [sp, #104]	; 0x68
 8009b4a:	4654      	mov	r4, sl
 8009b4c:	2205      	movs	r2, #5
 8009b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b52:	4854      	ldr	r0, [pc, #336]	; (8009ca4 <_vfiprintf_r+0x220>)
 8009b54:	f7f6 fb54 	bl	8000200 <memchr>
 8009b58:	9a04      	ldr	r2, [sp, #16]
 8009b5a:	b9d8      	cbnz	r0, 8009b94 <_vfiprintf_r+0x110>
 8009b5c:	06d1      	lsls	r1, r2, #27
 8009b5e:	bf44      	itt	mi
 8009b60:	2320      	movmi	r3, #32
 8009b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b66:	0713      	lsls	r3, r2, #28
 8009b68:	bf44      	itt	mi
 8009b6a:	232b      	movmi	r3, #43	; 0x2b
 8009b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b70:	f89a 3000 	ldrb.w	r3, [sl]
 8009b74:	2b2a      	cmp	r3, #42	; 0x2a
 8009b76:	d015      	beq.n	8009ba4 <_vfiprintf_r+0x120>
 8009b78:	9a07      	ldr	r2, [sp, #28]
 8009b7a:	4654      	mov	r4, sl
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f04f 0c0a 	mov.w	ip, #10
 8009b82:	4621      	mov	r1, r4
 8009b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b88:	3b30      	subs	r3, #48	; 0x30
 8009b8a:	2b09      	cmp	r3, #9
 8009b8c:	d94d      	bls.n	8009c2a <_vfiprintf_r+0x1a6>
 8009b8e:	b1b0      	cbz	r0, 8009bbe <_vfiprintf_r+0x13a>
 8009b90:	9207      	str	r2, [sp, #28]
 8009b92:	e014      	b.n	8009bbe <_vfiprintf_r+0x13a>
 8009b94:	eba0 0308 	sub.w	r3, r0, r8
 8009b98:	fa09 f303 	lsl.w	r3, r9, r3
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	46a2      	mov	sl, r4
 8009ba2:	e7d2      	b.n	8009b4a <_vfiprintf_r+0xc6>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	1d19      	adds	r1, r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	9103      	str	r1, [sp, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bfbb      	ittet	lt
 8009bb0:	425b      	neglt	r3, r3
 8009bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8009bb6:	9307      	strge	r3, [sp, #28]
 8009bb8:	9307      	strlt	r3, [sp, #28]
 8009bba:	bfb8      	it	lt
 8009bbc:	9204      	strlt	r2, [sp, #16]
 8009bbe:	7823      	ldrb	r3, [r4, #0]
 8009bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8009bc2:	d10c      	bne.n	8009bde <_vfiprintf_r+0x15a>
 8009bc4:	7863      	ldrb	r3, [r4, #1]
 8009bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc8:	d134      	bne.n	8009c34 <_vfiprintf_r+0x1b0>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	9203      	str	r2, [sp, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bfb8      	it	lt
 8009bd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009bda:	3402      	adds	r4, #2
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009cb4 <_vfiprintf_r+0x230>
 8009be2:	7821      	ldrb	r1, [r4, #0]
 8009be4:	2203      	movs	r2, #3
 8009be6:	4650      	mov	r0, sl
 8009be8:	f7f6 fb0a 	bl	8000200 <memchr>
 8009bec:	b138      	cbz	r0, 8009bfe <_vfiprintf_r+0x17a>
 8009bee:	9b04      	ldr	r3, [sp, #16]
 8009bf0:	eba0 000a 	sub.w	r0, r0, sl
 8009bf4:	2240      	movs	r2, #64	; 0x40
 8009bf6:	4082      	lsls	r2, r0
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	3401      	adds	r4, #1
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c02:	4829      	ldr	r0, [pc, #164]	; (8009ca8 <_vfiprintf_r+0x224>)
 8009c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c08:	2206      	movs	r2, #6
 8009c0a:	f7f6 faf9 	bl	8000200 <memchr>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d03f      	beq.n	8009c92 <_vfiprintf_r+0x20e>
 8009c12:	4b26      	ldr	r3, [pc, #152]	; (8009cac <_vfiprintf_r+0x228>)
 8009c14:	bb1b      	cbnz	r3, 8009c5e <_vfiprintf_r+0x1da>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	3307      	adds	r3, #7
 8009c1a:	f023 0307 	bic.w	r3, r3, #7
 8009c1e:	3308      	adds	r3, #8
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c24:	443b      	add	r3, r7
 8009c26:	9309      	str	r3, [sp, #36]	; 0x24
 8009c28:	e768      	b.n	8009afc <_vfiprintf_r+0x78>
 8009c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c2e:	460c      	mov	r4, r1
 8009c30:	2001      	movs	r0, #1
 8009c32:	e7a6      	b.n	8009b82 <_vfiprintf_r+0xfe>
 8009c34:	2300      	movs	r3, #0
 8009c36:	3401      	adds	r4, #1
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	f04f 0c0a 	mov.w	ip, #10
 8009c40:	4620      	mov	r0, r4
 8009c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c46:	3a30      	subs	r2, #48	; 0x30
 8009c48:	2a09      	cmp	r2, #9
 8009c4a:	d903      	bls.n	8009c54 <_vfiprintf_r+0x1d0>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0c6      	beq.n	8009bde <_vfiprintf_r+0x15a>
 8009c50:	9105      	str	r1, [sp, #20]
 8009c52:	e7c4      	b.n	8009bde <_vfiprintf_r+0x15a>
 8009c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c58:	4604      	mov	r4, r0
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7f0      	b.n	8009c40 <_vfiprintf_r+0x1bc>
 8009c5e:	ab03      	add	r3, sp, #12
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	462a      	mov	r2, r5
 8009c64:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <_vfiprintf_r+0x22c>)
 8009c66:	a904      	add	r1, sp, #16
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f3af 8000 	nop.w
 8009c6e:	4607      	mov	r7, r0
 8009c70:	1c78      	adds	r0, r7, #1
 8009c72:	d1d6      	bne.n	8009c22 <_vfiprintf_r+0x19e>
 8009c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c76:	07d9      	lsls	r1, r3, #31
 8009c78:	d405      	bmi.n	8009c86 <_vfiprintf_r+0x202>
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	059a      	lsls	r2, r3, #22
 8009c7e:	d402      	bmi.n	8009c86 <_vfiprintf_r+0x202>
 8009c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c82:	f7ff fb47 	bl	8009314 <__retarget_lock_release_recursive>
 8009c86:	89ab      	ldrh	r3, [r5, #12]
 8009c88:	065b      	lsls	r3, r3, #25
 8009c8a:	f53f af1d 	bmi.w	8009ac8 <_vfiprintf_r+0x44>
 8009c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c90:	e71c      	b.n	8009acc <_vfiprintf_r+0x48>
 8009c92:	ab03      	add	r3, sp, #12
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	462a      	mov	r2, r5
 8009c98:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <_vfiprintf_r+0x22c>)
 8009c9a:	a904      	add	r1, sp, #16
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f000 f879 	bl	8009d94 <_printf_i>
 8009ca2:	e7e4      	b.n	8009c6e <_vfiprintf_r+0x1ea>
 8009ca4:	0800ac91 	.word	0x0800ac91
 8009ca8:	0800ac9b 	.word	0x0800ac9b
 8009cac:	00000000 	.word	0x00000000
 8009cb0:	08009a5f 	.word	0x08009a5f
 8009cb4:	0800ac97 	.word	0x0800ac97

08009cb8 <_printf_common>:
 8009cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	4616      	mov	r6, r2
 8009cbe:	4699      	mov	r9, r3
 8009cc0:	688a      	ldr	r2, [r1, #8]
 8009cc2:	690b      	ldr	r3, [r1, #16]
 8009cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	bfb8      	it	lt
 8009ccc:	4613      	movlt	r3, r2
 8009cce:	6033      	str	r3, [r6, #0]
 8009cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cd4:	4607      	mov	r7, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	b10a      	cbz	r2, 8009cde <_printf_common+0x26>
 8009cda:	3301      	adds	r3, #1
 8009cdc:	6033      	str	r3, [r6, #0]
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	0699      	lsls	r1, r3, #26
 8009ce2:	bf42      	ittt	mi
 8009ce4:	6833      	ldrmi	r3, [r6, #0]
 8009ce6:	3302      	addmi	r3, #2
 8009ce8:	6033      	strmi	r3, [r6, #0]
 8009cea:	6825      	ldr	r5, [r4, #0]
 8009cec:	f015 0506 	ands.w	r5, r5, #6
 8009cf0:	d106      	bne.n	8009d00 <_printf_common+0x48>
 8009cf2:	f104 0a19 	add.w	sl, r4, #25
 8009cf6:	68e3      	ldr	r3, [r4, #12]
 8009cf8:	6832      	ldr	r2, [r6, #0]
 8009cfa:	1a9b      	subs	r3, r3, r2
 8009cfc:	42ab      	cmp	r3, r5
 8009cfe:	dc26      	bgt.n	8009d4e <_printf_common+0x96>
 8009d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d04:	1e13      	subs	r3, r2, #0
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	bf18      	it	ne
 8009d0a:	2301      	movne	r3, #1
 8009d0c:	0692      	lsls	r2, r2, #26
 8009d0e:	d42b      	bmi.n	8009d68 <_printf_common+0xb0>
 8009d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d14:	4649      	mov	r1, r9
 8009d16:	4638      	mov	r0, r7
 8009d18:	47c0      	blx	r8
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	d01e      	beq.n	8009d5c <_printf_common+0xa4>
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	6922      	ldr	r2, [r4, #16]
 8009d22:	f003 0306 	and.w	r3, r3, #6
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	bf02      	ittt	eq
 8009d2a:	68e5      	ldreq	r5, [r4, #12]
 8009d2c:	6833      	ldreq	r3, [r6, #0]
 8009d2e:	1aed      	subeq	r5, r5, r3
 8009d30:	68a3      	ldr	r3, [r4, #8]
 8009d32:	bf0c      	ite	eq
 8009d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d38:	2500      	movne	r5, #0
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	bfc4      	itt	gt
 8009d3e:	1a9b      	subgt	r3, r3, r2
 8009d40:	18ed      	addgt	r5, r5, r3
 8009d42:	2600      	movs	r6, #0
 8009d44:	341a      	adds	r4, #26
 8009d46:	42b5      	cmp	r5, r6
 8009d48:	d11a      	bne.n	8009d80 <_printf_common+0xc8>
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	e008      	b.n	8009d60 <_printf_common+0xa8>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4652      	mov	r2, sl
 8009d52:	4649      	mov	r1, r9
 8009d54:	4638      	mov	r0, r7
 8009d56:	47c0      	blx	r8
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d103      	bne.n	8009d64 <_printf_common+0xac>
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d64:	3501      	adds	r5, #1
 8009d66:	e7c6      	b.n	8009cf6 <_printf_common+0x3e>
 8009d68:	18e1      	adds	r1, r4, r3
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	2030      	movs	r0, #48	; 0x30
 8009d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d72:	4422      	add	r2, r4
 8009d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d7c:	3302      	adds	r3, #2
 8009d7e:	e7c7      	b.n	8009d10 <_printf_common+0x58>
 8009d80:	2301      	movs	r3, #1
 8009d82:	4622      	mov	r2, r4
 8009d84:	4649      	mov	r1, r9
 8009d86:	4638      	mov	r0, r7
 8009d88:	47c0      	blx	r8
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d0e6      	beq.n	8009d5c <_printf_common+0xa4>
 8009d8e:	3601      	adds	r6, #1
 8009d90:	e7d9      	b.n	8009d46 <_printf_common+0x8e>
	...

08009d94 <_printf_i>:
 8009d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d98:	7e0f      	ldrb	r7, [r1, #24]
 8009d9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d9c:	2f78      	cmp	r7, #120	; 0x78
 8009d9e:	4691      	mov	r9, r2
 8009da0:	4680      	mov	r8, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	469a      	mov	sl, r3
 8009da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009daa:	d807      	bhi.n	8009dbc <_printf_i+0x28>
 8009dac:	2f62      	cmp	r7, #98	; 0x62
 8009dae:	d80a      	bhi.n	8009dc6 <_printf_i+0x32>
 8009db0:	2f00      	cmp	r7, #0
 8009db2:	f000 80d4 	beq.w	8009f5e <_printf_i+0x1ca>
 8009db6:	2f58      	cmp	r7, #88	; 0x58
 8009db8:	f000 80c0 	beq.w	8009f3c <_printf_i+0x1a8>
 8009dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dc4:	e03a      	b.n	8009e3c <_printf_i+0xa8>
 8009dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dca:	2b15      	cmp	r3, #21
 8009dcc:	d8f6      	bhi.n	8009dbc <_printf_i+0x28>
 8009dce:	a101      	add	r1, pc, #4	; (adr r1, 8009dd4 <_printf_i+0x40>)
 8009dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dd4:	08009e2d 	.word	0x08009e2d
 8009dd8:	08009e41 	.word	0x08009e41
 8009ddc:	08009dbd 	.word	0x08009dbd
 8009de0:	08009dbd 	.word	0x08009dbd
 8009de4:	08009dbd 	.word	0x08009dbd
 8009de8:	08009dbd 	.word	0x08009dbd
 8009dec:	08009e41 	.word	0x08009e41
 8009df0:	08009dbd 	.word	0x08009dbd
 8009df4:	08009dbd 	.word	0x08009dbd
 8009df8:	08009dbd 	.word	0x08009dbd
 8009dfc:	08009dbd 	.word	0x08009dbd
 8009e00:	08009f45 	.word	0x08009f45
 8009e04:	08009e6d 	.word	0x08009e6d
 8009e08:	08009eff 	.word	0x08009eff
 8009e0c:	08009dbd 	.word	0x08009dbd
 8009e10:	08009dbd 	.word	0x08009dbd
 8009e14:	08009f67 	.word	0x08009f67
 8009e18:	08009dbd 	.word	0x08009dbd
 8009e1c:	08009e6d 	.word	0x08009e6d
 8009e20:	08009dbd 	.word	0x08009dbd
 8009e24:	08009dbd 	.word	0x08009dbd
 8009e28:	08009f07 	.word	0x08009f07
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	1d1a      	adds	r2, r3, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	602a      	str	r2, [r5, #0]
 8009e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e09f      	b.n	8009f80 <_printf_i+0x1ec>
 8009e40:	6820      	ldr	r0, [r4, #0]
 8009e42:	682b      	ldr	r3, [r5, #0]
 8009e44:	0607      	lsls	r7, r0, #24
 8009e46:	f103 0104 	add.w	r1, r3, #4
 8009e4a:	6029      	str	r1, [r5, #0]
 8009e4c:	d501      	bpl.n	8009e52 <_printf_i+0xbe>
 8009e4e:	681e      	ldr	r6, [r3, #0]
 8009e50:	e003      	b.n	8009e5a <_printf_i+0xc6>
 8009e52:	0646      	lsls	r6, r0, #25
 8009e54:	d5fb      	bpl.n	8009e4e <_printf_i+0xba>
 8009e56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e5a:	2e00      	cmp	r6, #0
 8009e5c:	da03      	bge.n	8009e66 <_printf_i+0xd2>
 8009e5e:	232d      	movs	r3, #45	; 0x2d
 8009e60:	4276      	negs	r6, r6
 8009e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e66:	485a      	ldr	r0, [pc, #360]	; (8009fd0 <_printf_i+0x23c>)
 8009e68:	230a      	movs	r3, #10
 8009e6a:	e012      	b.n	8009e92 <_printf_i+0xfe>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	6820      	ldr	r0, [r4, #0]
 8009e70:	1d19      	adds	r1, r3, #4
 8009e72:	6029      	str	r1, [r5, #0]
 8009e74:	0605      	lsls	r5, r0, #24
 8009e76:	d501      	bpl.n	8009e7c <_printf_i+0xe8>
 8009e78:	681e      	ldr	r6, [r3, #0]
 8009e7a:	e002      	b.n	8009e82 <_printf_i+0xee>
 8009e7c:	0641      	lsls	r1, r0, #25
 8009e7e:	d5fb      	bpl.n	8009e78 <_printf_i+0xe4>
 8009e80:	881e      	ldrh	r6, [r3, #0]
 8009e82:	4853      	ldr	r0, [pc, #332]	; (8009fd0 <_printf_i+0x23c>)
 8009e84:	2f6f      	cmp	r7, #111	; 0x6f
 8009e86:	bf0c      	ite	eq
 8009e88:	2308      	moveq	r3, #8
 8009e8a:	230a      	movne	r3, #10
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e92:	6865      	ldr	r5, [r4, #4]
 8009e94:	60a5      	str	r5, [r4, #8]
 8009e96:	2d00      	cmp	r5, #0
 8009e98:	bfa2      	ittt	ge
 8009e9a:	6821      	ldrge	r1, [r4, #0]
 8009e9c:	f021 0104 	bicge.w	r1, r1, #4
 8009ea0:	6021      	strge	r1, [r4, #0]
 8009ea2:	b90e      	cbnz	r6, 8009ea8 <_printf_i+0x114>
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	d04b      	beq.n	8009f40 <_printf_i+0x1ac>
 8009ea8:	4615      	mov	r5, r2
 8009eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8009eae:	fb03 6711 	mls	r7, r3, r1, r6
 8009eb2:	5dc7      	ldrb	r7, [r0, r7]
 8009eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009eb8:	4637      	mov	r7, r6
 8009eba:	42bb      	cmp	r3, r7
 8009ebc:	460e      	mov	r6, r1
 8009ebe:	d9f4      	bls.n	8009eaa <_printf_i+0x116>
 8009ec0:	2b08      	cmp	r3, #8
 8009ec2:	d10b      	bne.n	8009edc <_printf_i+0x148>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	07de      	lsls	r6, r3, #31
 8009ec8:	d508      	bpl.n	8009edc <_printf_i+0x148>
 8009eca:	6923      	ldr	r3, [r4, #16]
 8009ecc:	6861      	ldr	r1, [r4, #4]
 8009ece:	4299      	cmp	r1, r3
 8009ed0:	bfde      	ittt	le
 8009ed2:	2330      	movle	r3, #48	; 0x30
 8009ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ed8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009edc:	1b52      	subs	r2, r2, r5
 8009ede:	6122      	str	r2, [r4, #16]
 8009ee0:	f8cd a000 	str.w	sl, [sp]
 8009ee4:	464b      	mov	r3, r9
 8009ee6:	aa03      	add	r2, sp, #12
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4640      	mov	r0, r8
 8009eec:	f7ff fee4 	bl	8009cb8 <_printf_common>
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d14a      	bne.n	8009f8a <_printf_i+0x1f6>
 8009ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ef8:	b004      	add	sp, #16
 8009efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	f043 0320 	orr.w	r3, r3, #32
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	4833      	ldr	r0, [pc, #204]	; (8009fd4 <_printf_i+0x240>)
 8009f08:	2778      	movs	r7, #120	; 0x78
 8009f0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	6829      	ldr	r1, [r5, #0]
 8009f12:	061f      	lsls	r7, r3, #24
 8009f14:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f18:	d402      	bmi.n	8009f20 <_printf_i+0x18c>
 8009f1a:	065f      	lsls	r7, r3, #25
 8009f1c:	bf48      	it	mi
 8009f1e:	b2b6      	uxthmi	r6, r6
 8009f20:	07df      	lsls	r7, r3, #31
 8009f22:	bf48      	it	mi
 8009f24:	f043 0320 	orrmi.w	r3, r3, #32
 8009f28:	6029      	str	r1, [r5, #0]
 8009f2a:	bf48      	it	mi
 8009f2c:	6023      	strmi	r3, [r4, #0]
 8009f2e:	b91e      	cbnz	r6, 8009f38 <_printf_i+0x1a4>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	f023 0320 	bic.w	r3, r3, #32
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	2310      	movs	r3, #16
 8009f3a:	e7a7      	b.n	8009e8c <_printf_i+0xf8>
 8009f3c:	4824      	ldr	r0, [pc, #144]	; (8009fd0 <_printf_i+0x23c>)
 8009f3e:	e7e4      	b.n	8009f0a <_printf_i+0x176>
 8009f40:	4615      	mov	r5, r2
 8009f42:	e7bd      	b.n	8009ec0 <_printf_i+0x12c>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	6826      	ldr	r6, [r4, #0]
 8009f48:	6961      	ldr	r1, [r4, #20]
 8009f4a:	1d18      	adds	r0, r3, #4
 8009f4c:	6028      	str	r0, [r5, #0]
 8009f4e:	0635      	lsls	r5, r6, #24
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	d501      	bpl.n	8009f58 <_printf_i+0x1c4>
 8009f54:	6019      	str	r1, [r3, #0]
 8009f56:	e002      	b.n	8009f5e <_printf_i+0x1ca>
 8009f58:	0670      	lsls	r0, r6, #25
 8009f5a:	d5fb      	bpl.n	8009f54 <_printf_i+0x1c0>
 8009f5c:	8019      	strh	r1, [r3, #0]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6123      	str	r3, [r4, #16]
 8009f62:	4615      	mov	r5, r2
 8009f64:	e7bc      	b.n	8009ee0 <_printf_i+0x14c>
 8009f66:	682b      	ldr	r3, [r5, #0]
 8009f68:	1d1a      	adds	r2, r3, #4
 8009f6a:	602a      	str	r2, [r5, #0]
 8009f6c:	681d      	ldr	r5, [r3, #0]
 8009f6e:	6862      	ldr	r2, [r4, #4]
 8009f70:	2100      	movs	r1, #0
 8009f72:	4628      	mov	r0, r5
 8009f74:	f7f6 f944 	bl	8000200 <memchr>
 8009f78:	b108      	cbz	r0, 8009f7e <_printf_i+0x1ea>
 8009f7a:	1b40      	subs	r0, r0, r5
 8009f7c:	6060      	str	r0, [r4, #4]
 8009f7e:	6863      	ldr	r3, [r4, #4]
 8009f80:	6123      	str	r3, [r4, #16]
 8009f82:	2300      	movs	r3, #0
 8009f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f88:	e7aa      	b.n	8009ee0 <_printf_i+0x14c>
 8009f8a:	6923      	ldr	r3, [r4, #16]
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	4649      	mov	r1, r9
 8009f90:	4640      	mov	r0, r8
 8009f92:	47d0      	blx	sl
 8009f94:	3001      	adds	r0, #1
 8009f96:	d0ad      	beq.n	8009ef4 <_printf_i+0x160>
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	079b      	lsls	r3, r3, #30
 8009f9c:	d413      	bmi.n	8009fc6 <_printf_i+0x232>
 8009f9e:	68e0      	ldr	r0, [r4, #12]
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	4298      	cmp	r0, r3
 8009fa4:	bfb8      	it	lt
 8009fa6:	4618      	movlt	r0, r3
 8009fa8:	e7a6      	b.n	8009ef8 <_printf_i+0x164>
 8009faa:	2301      	movs	r3, #1
 8009fac:	4632      	mov	r2, r6
 8009fae:	4649      	mov	r1, r9
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	47d0      	blx	sl
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d09d      	beq.n	8009ef4 <_printf_i+0x160>
 8009fb8:	3501      	adds	r5, #1
 8009fba:	68e3      	ldr	r3, [r4, #12]
 8009fbc:	9903      	ldr	r1, [sp, #12]
 8009fbe:	1a5b      	subs	r3, r3, r1
 8009fc0:	42ab      	cmp	r3, r5
 8009fc2:	dcf2      	bgt.n	8009faa <_printf_i+0x216>
 8009fc4:	e7eb      	b.n	8009f9e <_printf_i+0x20a>
 8009fc6:	2500      	movs	r5, #0
 8009fc8:	f104 0619 	add.w	r6, r4, #25
 8009fcc:	e7f5      	b.n	8009fba <_printf_i+0x226>
 8009fce:	bf00      	nop
 8009fd0:	0800aca2 	.word	0x0800aca2
 8009fd4:	0800acb3 	.word	0x0800acb3

08009fd8 <_scanf_chars>:
 8009fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	4615      	mov	r5, r2
 8009fde:	688a      	ldr	r2, [r1, #8]
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	b932      	cbnz	r2, 8009ff4 <_scanf_chars+0x1c>
 8009fe6:	698a      	ldr	r2, [r1, #24]
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	bf0c      	ite	eq
 8009fec:	2201      	moveq	r2, #1
 8009fee:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009ff2:	608a      	str	r2, [r1, #8]
 8009ff4:	6822      	ldr	r2, [r4, #0]
 8009ff6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a088 <_scanf_chars+0xb0>
 8009ffa:	06d1      	lsls	r1, r2, #27
 8009ffc:	bf5f      	itttt	pl
 8009ffe:	681a      	ldrpl	r2, [r3, #0]
 800a000:	1d11      	addpl	r1, r2, #4
 800a002:	6019      	strpl	r1, [r3, #0]
 800a004:	6816      	ldrpl	r6, [r2, #0]
 800a006:	2700      	movs	r7, #0
 800a008:	69a0      	ldr	r0, [r4, #24]
 800a00a:	b188      	cbz	r0, 800a030 <_scanf_chars+0x58>
 800a00c:	2801      	cmp	r0, #1
 800a00e:	d107      	bne.n	800a020 <_scanf_chars+0x48>
 800a010:	682a      	ldr	r2, [r5, #0]
 800a012:	7811      	ldrb	r1, [r2, #0]
 800a014:	6962      	ldr	r2, [r4, #20]
 800a016:	5c52      	ldrb	r2, [r2, r1]
 800a018:	b952      	cbnz	r2, 800a030 <_scanf_chars+0x58>
 800a01a:	2f00      	cmp	r7, #0
 800a01c:	d031      	beq.n	800a082 <_scanf_chars+0xaa>
 800a01e:	e022      	b.n	800a066 <_scanf_chars+0x8e>
 800a020:	2802      	cmp	r0, #2
 800a022:	d120      	bne.n	800a066 <_scanf_chars+0x8e>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a02c:	071b      	lsls	r3, r3, #28
 800a02e:	d41a      	bmi.n	800a066 <_scanf_chars+0x8e>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	06da      	lsls	r2, r3, #27
 800a034:	bf5e      	ittt	pl
 800a036:	682b      	ldrpl	r3, [r5, #0]
 800a038:	781b      	ldrbpl	r3, [r3, #0]
 800a03a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a03e:	682a      	ldr	r2, [r5, #0]
 800a040:	686b      	ldr	r3, [r5, #4]
 800a042:	3201      	adds	r2, #1
 800a044:	602a      	str	r2, [r5, #0]
 800a046:	68a2      	ldr	r2, [r4, #8]
 800a048:	3b01      	subs	r3, #1
 800a04a:	3a01      	subs	r2, #1
 800a04c:	606b      	str	r3, [r5, #4]
 800a04e:	3701      	adds	r7, #1
 800a050:	60a2      	str	r2, [r4, #8]
 800a052:	b142      	cbz	r2, 800a066 <_scanf_chars+0x8e>
 800a054:	2b00      	cmp	r3, #0
 800a056:	dcd7      	bgt.n	800a008 <_scanf_chars+0x30>
 800a058:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a05c:	4629      	mov	r1, r5
 800a05e:	4640      	mov	r0, r8
 800a060:	4798      	blx	r3
 800a062:	2800      	cmp	r0, #0
 800a064:	d0d0      	beq.n	800a008 <_scanf_chars+0x30>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	f013 0310 	ands.w	r3, r3, #16
 800a06c:	d105      	bne.n	800a07a <_scanf_chars+0xa2>
 800a06e:	68e2      	ldr	r2, [r4, #12]
 800a070:	3201      	adds	r2, #1
 800a072:	60e2      	str	r2, [r4, #12]
 800a074:	69a2      	ldr	r2, [r4, #24]
 800a076:	b102      	cbz	r2, 800a07a <_scanf_chars+0xa2>
 800a078:	7033      	strb	r3, [r6, #0]
 800a07a:	6923      	ldr	r3, [r4, #16]
 800a07c:	443b      	add	r3, r7
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	2000      	movs	r0, #0
 800a082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a086:	bf00      	nop
 800a088:	0800ab91 	.word	0x0800ab91

0800a08c <_scanf_i>:
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	4698      	mov	r8, r3
 800a092:	4b74      	ldr	r3, [pc, #464]	; (800a264 <_scanf_i+0x1d8>)
 800a094:	460c      	mov	r4, r1
 800a096:	4682      	mov	sl, r0
 800a098:	4616      	mov	r6, r2
 800a09a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	ab03      	add	r3, sp, #12
 800a0a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0a6:	4b70      	ldr	r3, [pc, #448]	; (800a268 <_scanf_i+0x1dc>)
 800a0a8:	69a1      	ldr	r1, [r4, #24]
 800a0aa:	4a70      	ldr	r2, [pc, #448]	; (800a26c <_scanf_i+0x1e0>)
 800a0ac:	2903      	cmp	r1, #3
 800a0ae:	bf18      	it	ne
 800a0b0:	461a      	movne	r2, r3
 800a0b2:	68a3      	ldr	r3, [r4, #8]
 800a0b4:	9201      	str	r2, [sp, #4]
 800a0b6:	1e5a      	subs	r2, r3, #1
 800a0b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a0bc:	bf88      	it	hi
 800a0be:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0c2:	4627      	mov	r7, r4
 800a0c4:	bf82      	ittt	hi
 800a0c6:	eb03 0905 	addhi.w	r9, r3, r5
 800a0ca:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0ce:	60a3      	strhi	r3, [r4, #8]
 800a0d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a0d4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a0d8:	bf98      	it	ls
 800a0da:	f04f 0900 	movls.w	r9, #0
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	463d      	mov	r5, r7
 800a0e2:	f04f 0b00 	mov.w	fp, #0
 800a0e6:	6831      	ldr	r1, [r6, #0]
 800a0e8:	ab03      	add	r3, sp, #12
 800a0ea:	7809      	ldrb	r1, [r1, #0]
 800a0ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	f7f6 f885 	bl	8000200 <memchr>
 800a0f6:	b328      	cbz	r0, 800a144 <_scanf_i+0xb8>
 800a0f8:	f1bb 0f01 	cmp.w	fp, #1
 800a0fc:	d159      	bne.n	800a1b2 <_scanf_i+0x126>
 800a0fe:	6862      	ldr	r2, [r4, #4]
 800a100:	b92a      	cbnz	r2, 800a10e <_scanf_i+0x82>
 800a102:	6822      	ldr	r2, [r4, #0]
 800a104:	2308      	movs	r3, #8
 800a106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a10a:	6063      	str	r3, [r4, #4]
 800a10c:	6022      	str	r2, [r4, #0]
 800a10e:	6822      	ldr	r2, [r4, #0]
 800a110:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a114:	6022      	str	r2, [r4, #0]
 800a116:	68a2      	ldr	r2, [r4, #8]
 800a118:	1e51      	subs	r1, r2, #1
 800a11a:	60a1      	str	r1, [r4, #8]
 800a11c:	b192      	cbz	r2, 800a144 <_scanf_i+0xb8>
 800a11e:	6832      	ldr	r2, [r6, #0]
 800a120:	1c51      	adds	r1, r2, #1
 800a122:	6031      	str	r1, [r6, #0]
 800a124:	7812      	ldrb	r2, [r2, #0]
 800a126:	f805 2b01 	strb.w	r2, [r5], #1
 800a12a:	6872      	ldr	r2, [r6, #4]
 800a12c:	3a01      	subs	r2, #1
 800a12e:	2a00      	cmp	r2, #0
 800a130:	6072      	str	r2, [r6, #4]
 800a132:	dc07      	bgt.n	800a144 <_scanf_i+0xb8>
 800a134:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a138:	4631      	mov	r1, r6
 800a13a:	4650      	mov	r0, sl
 800a13c:	4790      	blx	r2
 800a13e:	2800      	cmp	r0, #0
 800a140:	f040 8085 	bne.w	800a24e <_scanf_i+0x1c2>
 800a144:	f10b 0b01 	add.w	fp, fp, #1
 800a148:	f1bb 0f03 	cmp.w	fp, #3
 800a14c:	d1cb      	bne.n	800a0e6 <_scanf_i+0x5a>
 800a14e:	6863      	ldr	r3, [r4, #4]
 800a150:	b90b      	cbnz	r3, 800a156 <_scanf_i+0xca>
 800a152:	230a      	movs	r3, #10
 800a154:	6063      	str	r3, [r4, #4]
 800a156:	6863      	ldr	r3, [r4, #4]
 800a158:	4945      	ldr	r1, [pc, #276]	; (800a270 <_scanf_i+0x1e4>)
 800a15a:	6960      	ldr	r0, [r4, #20]
 800a15c:	1ac9      	subs	r1, r1, r3
 800a15e:	f000 f999 	bl	800a494 <__sccl>
 800a162:	f04f 0b00 	mov.w	fp, #0
 800a166:	68a3      	ldr	r3, [r4, #8]
 800a168:	6822      	ldr	r2, [r4, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d03d      	beq.n	800a1ea <_scanf_i+0x15e>
 800a16e:	6831      	ldr	r1, [r6, #0]
 800a170:	6960      	ldr	r0, [r4, #20]
 800a172:	f891 c000 	ldrb.w	ip, [r1]
 800a176:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d035      	beq.n	800a1ea <_scanf_i+0x15e>
 800a17e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a182:	d124      	bne.n	800a1ce <_scanf_i+0x142>
 800a184:	0510      	lsls	r0, r2, #20
 800a186:	d522      	bpl.n	800a1ce <_scanf_i+0x142>
 800a188:	f10b 0b01 	add.w	fp, fp, #1
 800a18c:	f1b9 0f00 	cmp.w	r9, #0
 800a190:	d003      	beq.n	800a19a <_scanf_i+0x10e>
 800a192:	3301      	adds	r3, #1
 800a194:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a198:	60a3      	str	r3, [r4, #8]
 800a19a:	6873      	ldr	r3, [r6, #4]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	6073      	str	r3, [r6, #4]
 800a1a2:	dd1b      	ble.n	800a1dc <_scanf_i+0x150>
 800a1a4:	6833      	ldr	r3, [r6, #0]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	6033      	str	r3, [r6, #0]
 800a1aa:	68a3      	ldr	r3, [r4, #8]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	60a3      	str	r3, [r4, #8]
 800a1b0:	e7d9      	b.n	800a166 <_scanf_i+0xda>
 800a1b2:	f1bb 0f02 	cmp.w	fp, #2
 800a1b6:	d1ae      	bne.n	800a116 <_scanf_i+0x8a>
 800a1b8:	6822      	ldr	r2, [r4, #0]
 800a1ba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a1be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a1c2:	d1bf      	bne.n	800a144 <_scanf_i+0xb8>
 800a1c4:	2310      	movs	r3, #16
 800a1c6:	6063      	str	r3, [r4, #4]
 800a1c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1cc:	e7a2      	b.n	800a114 <_scanf_i+0x88>
 800a1ce:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a1d2:	6022      	str	r2, [r4, #0]
 800a1d4:	780b      	ldrb	r3, [r1, #0]
 800a1d6:	f805 3b01 	strb.w	r3, [r5], #1
 800a1da:	e7de      	b.n	800a19a <_scanf_i+0x10e>
 800a1dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	4650      	mov	r0, sl
 800a1e4:	4798      	blx	r3
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d0df      	beq.n	800a1aa <_scanf_i+0x11e>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	05d9      	lsls	r1, r3, #23
 800a1ee:	d50d      	bpl.n	800a20c <_scanf_i+0x180>
 800a1f0:	42bd      	cmp	r5, r7
 800a1f2:	d909      	bls.n	800a208 <_scanf_i+0x17c>
 800a1f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a1f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	4650      	mov	r0, sl
 800a200:	4798      	blx	r3
 800a202:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a206:	464d      	mov	r5, r9
 800a208:	42bd      	cmp	r5, r7
 800a20a:	d028      	beq.n	800a25e <_scanf_i+0x1d2>
 800a20c:	6822      	ldr	r2, [r4, #0]
 800a20e:	f012 0210 	ands.w	r2, r2, #16
 800a212:	d113      	bne.n	800a23c <_scanf_i+0x1b0>
 800a214:	702a      	strb	r2, [r5, #0]
 800a216:	6863      	ldr	r3, [r4, #4]
 800a218:	9e01      	ldr	r6, [sp, #4]
 800a21a:	4639      	mov	r1, r7
 800a21c:	4650      	mov	r0, sl
 800a21e:	47b0      	blx	r6
 800a220:	f8d8 3000 	ldr.w	r3, [r8]
 800a224:	6821      	ldr	r1, [r4, #0]
 800a226:	1d1a      	adds	r2, r3, #4
 800a228:	f8c8 2000 	str.w	r2, [r8]
 800a22c:	f011 0f20 	tst.w	r1, #32
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	d00f      	beq.n	800a254 <_scanf_i+0x1c8>
 800a234:	6018      	str	r0, [r3, #0]
 800a236:	68e3      	ldr	r3, [r4, #12]
 800a238:	3301      	adds	r3, #1
 800a23a:	60e3      	str	r3, [r4, #12]
 800a23c:	6923      	ldr	r3, [r4, #16]
 800a23e:	1bed      	subs	r5, r5, r7
 800a240:	445d      	add	r5, fp
 800a242:	442b      	add	r3, r5
 800a244:	6123      	str	r3, [r4, #16]
 800a246:	2000      	movs	r0, #0
 800a248:	b007      	add	sp, #28
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	f04f 0b00 	mov.w	fp, #0
 800a252:	e7ca      	b.n	800a1ea <_scanf_i+0x15e>
 800a254:	07ca      	lsls	r2, r1, #31
 800a256:	bf4c      	ite	mi
 800a258:	8018      	strhmi	r0, [r3, #0]
 800a25a:	6018      	strpl	r0, [r3, #0]
 800a25c:	e7eb      	b.n	800a236 <_scanf_i+0x1aa>
 800a25e:	2001      	movs	r0, #1
 800a260:	e7f2      	b.n	800a248 <_scanf_i+0x1bc>
 800a262:	bf00      	nop
 800a264:	0800ab3c 	.word	0x0800ab3c
 800a268:	0800a841 	.word	0x0800a841
 800a26c:	0800a759 	.word	0x0800a759
 800a270:	0800acd4 	.word	0x0800acd4

0800a274 <__sflush_r>:
 800a274:	898a      	ldrh	r2, [r1, #12]
 800a276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	4605      	mov	r5, r0
 800a27c:	0710      	lsls	r0, r2, #28
 800a27e:	460c      	mov	r4, r1
 800a280:	d458      	bmi.n	800a334 <__sflush_r+0xc0>
 800a282:	684b      	ldr	r3, [r1, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	dc05      	bgt.n	800a294 <__sflush_r+0x20>
 800a288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dc02      	bgt.n	800a294 <__sflush_r+0x20>
 800a28e:	2000      	movs	r0, #0
 800a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a296:	2e00      	cmp	r6, #0
 800a298:	d0f9      	beq.n	800a28e <__sflush_r+0x1a>
 800a29a:	2300      	movs	r3, #0
 800a29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2a0:	682f      	ldr	r7, [r5, #0]
 800a2a2:	6a21      	ldr	r1, [r4, #32]
 800a2a4:	602b      	str	r3, [r5, #0]
 800a2a6:	d032      	beq.n	800a30e <__sflush_r+0x9a>
 800a2a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	075a      	lsls	r2, r3, #29
 800a2ae:	d505      	bpl.n	800a2bc <__sflush_r+0x48>
 800a2b0:	6863      	ldr	r3, [r4, #4]
 800a2b2:	1ac0      	subs	r0, r0, r3
 800a2b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2b6:	b10b      	cbz	r3, 800a2bc <__sflush_r+0x48>
 800a2b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2ba:	1ac0      	subs	r0, r0, r3
 800a2bc:	2300      	movs	r3, #0
 800a2be:	4602      	mov	r2, r0
 800a2c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2c2:	6a21      	ldr	r1, [r4, #32]
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	47b0      	blx	r6
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	d106      	bne.n	800a2dc <__sflush_r+0x68>
 800a2ce:	6829      	ldr	r1, [r5, #0]
 800a2d0:	291d      	cmp	r1, #29
 800a2d2:	d82b      	bhi.n	800a32c <__sflush_r+0xb8>
 800a2d4:	4a29      	ldr	r2, [pc, #164]	; (800a37c <__sflush_r+0x108>)
 800a2d6:	410a      	asrs	r2, r1
 800a2d8:	07d6      	lsls	r6, r2, #31
 800a2da:	d427      	bmi.n	800a32c <__sflush_r+0xb8>
 800a2dc:	2200      	movs	r2, #0
 800a2de:	6062      	str	r2, [r4, #4]
 800a2e0:	04d9      	lsls	r1, r3, #19
 800a2e2:	6922      	ldr	r2, [r4, #16]
 800a2e4:	6022      	str	r2, [r4, #0]
 800a2e6:	d504      	bpl.n	800a2f2 <__sflush_r+0x7e>
 800a2e8:	1c42      	adds	r2, r0, #1
 800a2ea:	d101      	bne.n	800a2f0 <__sflush_r+0x7c>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b903      	cbnz	r3, 800a2f2 <__sflush_r+0x7e>
 800a2f0:	6560      	str	r0, [r4, #84]	; 0x54
 800a2f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2f4:	602f      	str	r7, [r5, #0]
 800a2f6:	2900      	cmp	r1, #0
 800a2f8:	d0c9      	beq.n	800a28e <__sflush_r+0x1a>
 800a2fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2fe:	4299      	cmp	r1, r3
 800a300:	d002      	beq.n	800a308 <__sflush_r+0x94>
 800a302:	4628      	mov	r0, r5
 800a304:	f7ff f81e 	bl	8009344 <_free_r>
 800a308:	2000      	movs	r0, #0
 800a30a:	6360      	str	r0, [r4, #52]	; 0x34
 800a30c:	e7c0      	b.n	800a290 <__sflush_r+0x1c>
 800a30e:	2301      	movs	r3, #1
 800a310:	4628      	mov	r0, r5
 800a312:	47b0      	blx	r6
 800a314:	1c41      	adds	r1, r0, #1
 800a316:	d1c8      	bne.n	800a2aa <__sflush_r+0x36>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0c5      	beq.n	800a2aa <__sflush_r+0x36>
 800a31e:	2b1d      	cmp	r3, #29
 800a320:	d001      	beq.n	800a326 <__sflush_r+0xb2>
 800a322:	2b16      	cmp	r3, #22
 800a324:	d101      	bne.n	800a32a <__sflush_r+0xb6>
 800a326:	602f      	str	r7, [r5, #0]
 800a328:	e7b1      	b.n	800a28e <__sflush_r+0x1a>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a330:	81a3      	strh	r3, [r4, #12]
 800a332:	e7ad      	b.n	800a290 <__sflush_r+0x1c>
 800a334:	690f      	ldr	r7, [r1, #16]
 800a336:	2f00      	cmp	r7, #0
 800a338:	d0a9      	beq.n	800a28e <__sflush_r+0x1a>
 800a33a:	0793      	lsls	r3, r2, #30
 800a33c:	680e      	ldr	r6, [r1, #0]
 800a33e:	bf08      	it	eq
 800a340:	694b      	ldreq	r3, [r1, #20]
 800a342:	600f      	str	r7, [r1, #0]
 800a344:	bf18      	it	ne
 800a346:	2300      	movne	r3, #0
 800a348:	eba6 0807 	sub.w	r8, r6, r7
 800a34c:	608b      	str	r3, [r1, #8]
 800a34e:	f1b8 0f00 	cmp.w	r8, #0
 800a352:	dd9c      	ble.n	800a28e <__sflush_r+0x1a>
 800a354:	6a21      	ldr	r1, [r4, #32]
 800a356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a358:	4643      	mov	r3, r8
 800a35a:	463a      	mov	r2, r7
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b0      	blx	r6
 800a360:	2800      	cmp	r0, #0
 800a362:	dc06      	bgt.n	800a372 <__sflush_r+0xfe>
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a36a:	81a3      	strh	r3, [r4, #12]
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a370:	e78e      	b.n	800a290 <__sflush_r+0x1c>
 800a372:	4407      	add	r7, r0
 800a374:	eba8 0800 	sub.w	r8, r8, r0
 800a378:	e7e9      	b.n	800a34e <__sflush_r+0xda>
 800a37a:	bf00      	nop
 800a37c:	dfbffffe 	.word	0xdfbffffe

0800a380 <_fflush_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	690b      	ldr	r3, [r1, #16]
 800a384:	4605      	mov	r5, r0
 800a386:	460c      	mov	r4, r1
 800a388:	b913      	cbnz	r3, 800a390 <_fflush_r+0x10>
 800a38a:	2500      	movs	r5, #0
 800a38c:	4628      	mov	r0, r5
 800a38e:	bd38      	pop	{r3, r4, r5, pc}
 800a390:	b118      	cbz	r0, 800a39a <_fflush_r+0x1a>
 800a392:	6a03      	ldr	r3, [r0, #32]
 800a394:	b90b      	cbnz	r3, 800a39a <_fflush_r+0x1a>
 800a396:	f7fe fc8d 	bl	8008cb4 <__sinit>
 800a39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d0f3      	beq.n	800a38a <_fflush_r+0xa>
 800a3a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3a4:	07d0      	lsls	r0, r2, #31
 800a3a6:	d404      	bmi.n	800a3b2 <_fflush_r+0x32>
 800a3a8:	0599      	lsls	r1, r3, #22
 800a3aa:	d402      	bmi.n	800a3b2 <_fflush_r+0x32>
 800a3ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ae:	f7fe ffb0 	bl	8009312 <__retarget_lock_acquire_recursive>
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	f7ff ff5d 	bl	800a274 <__sflush_r>
 800a3ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3bc:	07da      	lsls	r2, r3, #31
 800a3be:	4605      	mov	r5, r0
 800a3c0:	d4e4      	bmi.n	800a38c <_fflush_r+0xc>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	059b      	lsls	r3, r3, #22
 800a3c6:	d4e1      	bmi.n	800a38c <_fflush_r+0xc>
 800a3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ca:	f7fe ffa3 	bl	8009314 <__retarget_lock_release_recursive>
 800a3ce:	e7dd      	b.n	800a38c <_fflush_r+0xc>

0800a3d0 <__swhatbuf_r>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d8:	2900      	cmp	r1, #0
 800a3da:	b096      	sub	sp, #88	; 0x58
 800a3dc:	4615      	mov	r5, r2
 800a3de:	461e      	mov	r6, r3
 800a3e0:	da0d      	bge.n	800a3fe <__swhatbuf_r+0x2e>
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3e8:	f04f 0100 	mov.w	r1, #0
 800a3ec:	bf0c      	ite	eq
 800a3ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3f2:	2340      	movne	r3, #64	; 0x40
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	6031      	str	r1, [r6, #0]
 800a3f8:	602b      	str	r3, [r5, #0]
 800a3fa:	b016      	add	sp, #88	; 0x58
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	466a      	mov	r2, sp
 800a400:	f000 f8d6 	bl	800a5b0 <_fstat_r>
 800a404:	2800      	cmp	r0, #0
 800a406:	dbec      	blt.n	800a3e2 <__swhatbuf_r+0x12>
 800a408:	9901      	ldr	r1, [sp, #4]
 800a40a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a40e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a412:	4259      	negs	r1, r3
 800a414:	4159      	adcs	r1, r3
 800a416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a41a:	e7eb      	b.n	800a3f4 <__swhatbuf_r+0x24>

0800a41c <__smakebuf_r>:
 800a41c:	898b      	ldrh	r3, [r1, #12]
 800a41e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a420:	079d      	lsls	r5, r3, #30
 800a422:	4606      	mov	r6, r0
 800a424:	460c      	mov	r4, r1
 800a426:	d507      	bpl.n	800a438 <__smakebuf_r+0x1c>
 800a428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	6123      	str	r3, [r4, #16]
 800a430:	2301      	movs	r3, #1
 800a432:	6163      	str	r3, [r4, #20]
 800a434:	b002      	add	sp, #8
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	ab01      	add	r3, sp, #4
 800a43a:	466a      	mov	r2, sp
 800a43c:	f7ff ffc8 	bl	800a3d0 <__swhatbuf_r>
 800a440:	9900      	ldr	r1, [sp, #0]
 800a442:	4605      	mov	r5, r0
 800a444:	4630      	mov	r0, r6
 800a446:	f7fe fa81 	bl	800894c <_malloc_r>
 800a44a:	b948      	cbnz	r0, 800a460 <__smakebuf_r+0x44>
 800a44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a450:	059a      	lsls	r2, r3, #22
 800a452:	d4ef      	bmi.n	800a434 <__smakebuf_r+0x18>
 800a454:	f023 0303 	bic.w	r3, r3, #3
 800a458:	f043 0302 	orr.w	r3, r3, #2
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	e7e3      	b.n	800a428 <__smakebuf_r+0xc>
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	6020      	str	r0, [r4, #0]
 800a464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a468:	81a3      	strh	r3, [r4, #12]
 800a46a:	9b00      	ldr	r3, [sp, #0]
 800a46c:	6163      	str	r3, [r4, #20]
 800a46e:	9b01      	ldr	r3, [sp, #4]
 800a470:	6120      	str	r0, [r4, #16]
 800a472:	b15b      	cbz	r3, 800a48c <__smakebuf_r+0x70>
 800a474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a478:	4630      	mov	r0, r6
 800a47a:	f000 f8ab 	bl	800a5d4 <_isatty_r>
 800a47e:	b128      	cbz	r0, 800a48c <__smakebuf_r+0x70>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	f023 0303 	bic.w	r3, r3, #3
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	81a3      	strh	r3, [r4, #12]
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	431d      	orrs	r5, r3
 800a490:	81a5      	strh	r5, [r4, #12]
 800a492:	e7cf      	b.n	800a434 <__smakebuf_r+0x18>

0800a494 <__sccl>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	780b      	ldrb	r3, [r1, #0]
 800a498:	4604      	mov	r4, r0
 800a49a:	2b5e      	cmp	r3, #94	; 0x5e
 800a49c:	bf0b      	itete	eq
 800a49e:	784b      	ldrbeq	r3, [r1, #1]
 800a4a0:	1c4a      	addne	r2, r1, #1
 800a4a2:	1c8a      	addeq	r2, r1, #2
 800a4a4:	2100      	movne	r1, #0
 800a4a6:	bf08      	it	eq
 800a4a8:	2101      	moveq	r1, #1
 800a4aa:	3801      	subs	r0, #1
 800a4ac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a4b0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a4b4:	42a8      	cmp	r0, r5
 800a4b6:	d1fb      	bne.n	800a4b0 <__sccl+0x1c>
 800a4b8:	b90b      	cbnz	r3, 800a4be <__sccl+0x2a>
 800a4ba:	1e50      	subs	r0, r2, #1
 800a4bc:	bd70      	pop	{r4, r5, r6, pc}
 800a4be:	f081 0101 	eor.w	r1, r1, #1
 800a4c2:	54e1      	strb	r1, [r4, r3]
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a4cc:	2d2d      	cmp	r5, #45	; 0x2d
 800a4ce:	d005      	beq.n	800a4dc <__sccl+0x48>
 800a4d0:	2d5d      	cmp	r5, #93	; 0x5d
 800a4d2:	d016      	beq.n	800a502 <__sccl+0x6e>
 800a4d4:	2d00      	cmp	r5, #0
 800a4d6:	d0f1      	beq.n	800a4bc <__sccl+0x28>
 800a4d8:	462b      	mov	r3, r5
 800a4da:	e7f2      	b.n	800a4c2 <__sccl+0x2e>
 800a4dc:	7846      	ldrb	r6, [r0, #1]
 800a4de:	2e5d      	cmp	r6, #93	; 0x5d
 800a4e0:	d0fa      	beq.n	800a4d8 <__sccl+0x44>
 800a4e2:	42b3      	cmp	r3, r6
 800a4e4:	dcf8      	bgt.n	800a4d8 <__sccl+0x44>
 800a4e6:	3002      	adds	r0, #2
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	3201      	adds	r2, #1
 800a4ec:	4296      	cmp	r6, r2
 800a4ee:	54a1      	strb	r1, [r4, r2]
 800a4f0:	dcfb      	bgt.n	800a4ea <__sccl+0x56>
 800a4f2:	1af2      	subs	r2, r6, r3
 800a4f4:	3a01      	subs	r2, #1
 800a4f6:	1c5d      	adds	r5, r3, #1
 800a4f8:	42b3      	cmp	r3, r6
 800a4fa:	bfa8      	it	ge
 800a4fc:	2200      	movge	r2, #0
 800a4fe:	18ab      	adds	r3, r5, r2
 800a500:	e7e1      	b.n	800a4c6 <__sccl+0x32>
 800a502:	4610      	mov	r0, r2
 800a504:	e7da      	b.n	800a4bc <__sccl+0x28>

0800a506 <__submore>:
 800a506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50a:	460c      	mov	r4, r1
 800a50c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a50e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a512:	4299      	cmp	r1, r3
 800a514:	d11d      	bne.n	800a552 <__submore+0x4c>
 800a516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a51a:	f7fe fa17 	bl	800894c <_malloc_r>
 800a51e:	b918      	cbnz	r0, 800a528 <__submore+0x22>
 800a520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a52c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a52e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a532:	6360      	str	r0, [r4, #52]	; 0x34
 800a534:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a538:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a53c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a540:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a544:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a548:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a54c:	6020      	str	r0, [r4, #0]
 800a54e:	2000      	movs	r0, #0
 800a550:	e7e8      	b.n	800a524 <__submore+0x1e>
 800a552:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a554:	0077      	lsls	r7, r6, #1
 800a556:	463a      	mov	r2, r7
 800a558:	f000 f84c 	bl	800a5f4 <_realloc_r>
 800a55c:	4605      	mov	r5, r0
 800a55e:	2800      	cmp	r0, #0
 800a560:	d0de      	beq.n	800a520 <__submore+0x1a>
 800a562:	eb00 0806 	add.w	r8, r0, r6
 800a566:	4601      	mov	r1, r0
 800a568:	4632      	mov	r2, r6
 800a56a:	4640      	mov	r0, r8
 800a56c:	f7fe fedb 	bl	8009326 <memcpy>
 800a570:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a574:	f8c4 8000 	str.w	r8, [r4]
 800a578:	e7e9      	b.n	800a54e <__submore+0x48>

0800a57a <memmove>:
 800a57a:	4288      	cmp	r0, r1
 800a57c:	b510      	push	{r4, lr}
 800a57e:	eb01 0402 	add.w	r4, r1, r2
 800a582:	d902      	bls.n	800a58a <memmove+0x10>
 800a584:	4284      	cmp	r4, r0
 800a586:	4623      	mov	r3, r4
 800a588:	d807      	bhi.n	800a59a <memmove+0x20>
 800a58a:	1e43      	subs	r3, r0, #1
 800a58c:	42a1      	cmp	r1, r4
 800a58e:	d008      	beq.n	800a5a2 <memmove+0x28>
 800a590:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a594:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a598:	e7f8      	b.n	800a58c <memmove+0x12>
 800a59a:	4402      	add	r2, r0
 800a59c:	4601      	mov	r1, r0
 800a59e:	428a      	cmp	r2, r1
 800a5a0:	d100      	bne.n	800a5a4 <memmove+0x2a>
 800a5a2:	bd10      	pop	{r4, pc}
 800a5a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ac:	e7f7      	b.n	800a59e <memmove+0x24>
	...

0800a5b0 <_fstat_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4d07      	ldr	r5, [pc, #28]	; (800a5d0 <_fstat_r+0x20>)
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	602b      	str	r3, [r5, #0]
 800a5be:	f7f9 faa2 	bl	8003b06 <_fstat>
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	d102      	bne.n	800a5cc <_fstat_r+0x1c>
 800a5c6:	682b      	ldr	r3, [r5, #0]
 800a5c8:	b103      	cbz	r3, 800a5cc <_fstat_r+0x1c>
 800a5ca:	6023      	str	r3, [r4, #0]
 800a5cc:	bd38      	pop	{r3, r4, r5, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20000b9c 	.word	0x20000b9c

0800a5d4 <_isatty_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d06      	ldr	r5, [pc, #24]	; (800a5f0 <_isatty_r+0x1c>)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	602b      	str	r3, [r5, #0]
 800a5e0:	f7f9 faa1 	bl	8003b26 <_isatty>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_isatty_r+0x1a>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_isatty_r+0x1a>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	20000b9c 	.word	0x20000b9c

0800a5f4 <_realloc_r>:
 800a5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	4614      	mov	r4, r2
 800a5fc:	460e      	mov	r6, r1
 800a5fe:	b921      	cbnz	r1, 800a60a <_realloc_r+0x16>
 800a600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a604:	4611      	mov	r1, r2
 800a606:	f7fe b9a1 	b.w	800894c <_malloc_r>
 800a60a:	b92a      	cbnz	r2, 800a618 <_realloc_r+0x24>
 800a60c:	f7fe fe9a 	bl	8009344 <_free_r>
 800a610:	4625      	mov	r5, r4
 800a612:	4628      	mov	r0, r5
 800a614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a618:	f000 f914 	bl	800a844 <_malloc_usable_size_r>
 800a61c:	4284      	cmp	r4, r0
 800a61e:	4607      	mov	r7, r0
 800a620:	d802      	bhi.n	800a628 <_realloc_r+0x34>
 800a622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a626:	d812      	bhi.n	800a64e <_realloc_r+0x5a>
 800a628:	4621      	mov	r1, r4
 800a62a:	4640      	mov	r0, r8
 800a62c:	f7fe f98e 	bl	800894c <_malloc_r>
 800a630:	4605      	mov	r5, r0
 800a632:	2800      	cmp	r0, #0
 800a634:	d0ed      	beq.n	800a612 <_realloc_r+0x1e>
 800a636:	42bc      	cmp	r4, r7
 800a638:	4622      	mov	r2, r4
 800a63a:	4631      	mov	r1, r6
 800a63c:	bf28      	it	cs
 800a63e:	463a      	movcs	r2, r7
 800a640:	f7fe fe71 	bl	8009326 <memcpy>
 800a644:	4631      	mov	r1, r6
 800a646:	4640      	mov	r0, r8
 800a648:	f7fe fe7c 	bl	8009344 <_free_r>
 800a64c:	e7e1      	b.n	800a612 <_realloc_r+0x1e>
 800a64e:	4635      	mov	r5, r6
 800a650:	e7df      	b.n	800a612 <_realloc_r+0x1e>
	...

0800a654 <_strtol_l.constprop.0>:
 800a654:	2b01      	cmp	r3, #1
 800a656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a65a:	d001      	beq.n	800a660 <_strtol_l.constprop.0+0xc>
 800a65c:	2b24      	cmp	r3, #36	; 0x24
 800a65e:	d906      	bls.n	800a66e <_strtol_l.constprop.0+0x1a>
 800a660:	f7fe fe2c 	bl	80092bc <__errno>
 800a664:	2316      	movs	r3, #22
 800a666:	6003      	str	r3, [r0, #0]
 800a668:	2000      	movs	r0, #0
 800a66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a754 <_strtol_l.constprop.0+0x100>
 800a672:	460d      	mov	r5, r1
 800a674:	462e      	mov	r6, r5
 800a676:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a67a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a67e:	f017 0708 	ands.w	r7, r7, #8
 800a682:	d1f7      	bne.n	800a674 <_strtol_l.constprop.0+0x20>
 800a684:	2c2d      	cmp	r4, #45	; 0x2d
 800a686:	d132      	bne.n	800a6ee <_strtol_l.constprop.0+0x9a>
 800a688:	782c      	ldrb	r4, [r5, #0]
 800a68a:	2701      	movs	r7, #1
 800a68c:	1cb5      	adds	r5, r6, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d05b      	beq.n	800a74a <_strtol_l.constprop.0+0xf6>
 800a692:	2b10      	cmp	r3, #16
 800a694:	d109      	bne.n	800a6aa <_strtol_l.constprop.0+0x56>
 800a696:	2c30      	cmp	r4, #48	; 0x30
 800a698:	d107      	bne.n	800a6aa <_strtol_l.constprop.0+0x56>
 800a69a:	782c      	ldrb	r4, [r5, #0]
 800a69c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6a0:	2c58      	cmp	r4, #88	; 0x58
 800a6a2:	d14d      	bne.n	800a740 <_strtol_l.constprop.0+0xec>
 800a6a4:	786c      	ldrb	r4, [r5, #1]
 800a6a6:	2310      	movs	r3, #16
 800a6a8:	3502      	adds	r5, #2
 800a6aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a6ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a6b2:	f04f 0e00 	mov.w	lr, #0
 800a6b6:	fbb8 f9f3 	udiv	r9, r8, r3
 800a6ba:	4676      	mov	r6, lr
 800a6bc:	fb03 8a19 	mls	sl, r3, r9, r8
 800a6c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a6c4:	f1bc 0f09 	cmp.w	ip, #9
 800a6c8:	d816      	bhi.n	800a6f8 <_strtol_l.constprop.0+0xa4>
 800a6ca:	4664      	mov	r4, ip
 800a6cc:	42a3      	cmp	r3, r4
 800a6ce:	dd24      	ble.n	800a71a <_strtol_l.constprop.0+0xc6>
 800a6d0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a6d4:	d008      	beq.n	800a6e8 <_strtol_l.constprop.0+0x94>
 800a6d6:	45b1      	cmp	r9, r6
 800a6d8:	d31c      	bcc.n	800a714 <_strtol_l.constprop.0+0xc0>
 800a6da:	d101      	bne.n	800a6e0 <_strtol_l.constprop.0+0x8c>
 800a6dc:	45a2      	cmp	sl, r4
 800a6de:	db19      	blt.n	800a714 <_strtol_l.constprop.0+0xc0>
 800a6e0:	fb06 4603 	mla	r6, r6, r3, r4
 800a6e4:	f04f 0e01 	mov.w	lr, #1
 800a6e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6ec:	e7e8      	b.n	800a6c0 <_strtol_l.constprop.0+0x6c>
 800a6ee:	2c2b      	cmp	r4, #43	; 0x2b
 800a6f0:	bf04      	itt	eq
 800a6f2:	782c      	ldrbeq	r4, [r5, #0]
 800a6f4:	1cb5      	addeq	r5, r6, #2
 800a6f6:	e7ca      	b.n	800a68e <_strtol_l.constprop.0+0x3a>
 800a6f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a6fc:	f1bc 0f19 	cmp.w	ip, #25
 800a700:	d801      	bhi.n	800a706 <_strtol_l.constprop.0+0xb2>
 800a702:	3c37      	subs	r4, #55	; 0x37
 800a704:	e7e2      	b.n	800a6cc <_strtol_l.constprop.0+0x78>
 800a706:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a70a:	f1bc 0f19 	cmp.w	ip, #25
 800a70e:	d804      	bhi.n	800a71a <_strtol_l.constprop.0+0xc6>
 800a710:	3c57      	subs	r4, #87	; 0x57
 800a712:	e7db      	b.n	800a6cc <_strtol_l.constprop.0+0x78>
 800a714:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800a718:	e7e6      	b.n	800a6e8 <_strtol_l.constprop.0+0x94>
 800a71a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a71e:	d105      	bne.n	800a72c <_strtol_l.constprop.0+0xd8>
 800a720:	2322      	movs	r3, #34	; 0x22
 800a722:	6003      	str	r3, [r0, #0]
 800a724:	4646      	mov	r6, r8
 800a726:	b942      	cbnz	r2, 800a73a <_strtol_l.constprop.0+0xe6>
 800a728:	4630      	mov	r0, r6
 800a72a:	e79e      	b.n	800a66a <_strtol_l.constprop.0+0x16>
 800a72c:	b107      	cbz	r7, 800a730 <_strtol_l.constprop.0+0xdc>
 800a72e:	4276      	negs	r6, r6
 800a730:	2a00      	cmp	r2, #0
 800a732:	d0f9      	beq.n	800a728 <_strtol_l.constprop.0+0xd4>
 800a734:	f1be 0f00 	cmp.w	lr, #0
 800a738:	d000      	beq.n	800a73c <_strtol_l.constprop.0+0xe8>
 800a73a:	1e69      	subs	r1, r5, #1
 800a73c:	6011      	str	r1, [r2, #0]
 800a73e:	e7f3      	b.n	800a728 <_strtol_l.constprop.0+0xd4>
 800a740:	2430      	movs	r4, #48	; 0x30
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1b1      	bne.n	800a6aa <_strtol_l.constprop.0+0x56>
 800a746:	2308      	movs	r3, #8
 800a748:	e7af      	b.n	800a6aa <_strtol_l.constprop.0+0x56>
 800a74a:	2c30      	cmp	r4, #48	; 0x30
 800a74c:	d0a5      	beq.n	800a69a <_strtol_l.constprop.0+0x46>
 800a74e:	230a      	movs	r3, #10
 800a750:	e7ab      	b.n	800a6aa <_strtol_l.constprop.0+0x56>
 800a752:	bf00      	nop
 800a754:	0800ab91 	.word	0x0800ab91

0800a758 <_strtol_r>:
 800a758:	f7ff bf7c 	b.w	800a654 <_strtol_l.constprop.0>

0800a75c <_strtoul_l.constprop.0>:
 800a75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a760:	4f36      	ldr	r7, [pc, #216]	; (800a83c <_strtoul_l.constprop.0+0xe0>)
 800a762:	4686      	mov	lr, r0
 800a764:	460d      	mov	r5, r1
 800a766:	4628      	mov	r0, r5
 800a768:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a76c:	5d3e      	ldrb	r6, [r7, r4]
 800a76e:	f016 0608 	ands.w	r6, r6, #8
 800a772:	d1f8      	bne.n	800a766 <_strtoul_l.constprop.0+0xa>
 800a774:	2c2d      	cmp	r4, #45	; 0x2d
 800a776:	d130      	bne.n	800a7da <_strtoul_l.constprop.0+0x7e>
 800a778:	782c      	ldrb	r4, [r5, #0]
 800a77a:	2601      	movs	r6, #1
 800a77c:	1c85      	adds	r5, r0, #2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d057      	beq.n	800a832 <_strtoul_l.constprop.0+0xd6>
 800a782:	2b10      	cmp	r3, #16
 800a784:	d109      	bne.n	800a79a <_strtoul_l.constprop.0+0x3e>
 800a786:	2c30      	cmp	r4, #48	; 0x30
 800a788:	d107      	bne.n	800a79a <_strtoul_l.constprop.0+0x3e>
 800a78a:	7828      	ldrb	r0, [r5, #0]
 800a78c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a790:	2858      	cmp	r0, #88	; 0x58
 800a792:	d149      	bne.n	800a828 <_strtoul_l.constprop.0+0xcc>
 800a794:	786c      	ldrb	r4, [r5, #1]
 800a796:	2310      	movs	r3, #16
 800a798:	3502      	adds	r5, #2
 800a79a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a79e:	2700      	movs	r7, #0
 800a7a0:	fbb8 f8f3 	udiv	r8, r8, r3
 800a7a4:	fb03 f908 	mul.w	r9, r3, r8
 800a7a8:	ea6f 0909 	mvn.w	r9, r9
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7b2:	f1bc 0f09 	cmp.w	ip, #9
 800a7b6:	d815      	bhi.n	800a7e4 <_strtoul_l.constprop.0+0x88>
 800a7b8:	4664      	mov	r4, ip
 800a7ba:	42a3      	cmp	r3, r4
 800a7bc:	dd23      	ble.n	800a806 <_strtoul_l.constprop.0+0xaa>
 800a7be:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800a7c2:	d007      	beq.n	800a7d4 <_strtoul_l.constprop.0+0x78>
 800a7c4:	4580      	cmp	r8, r0
 800a7c6:	d31b      	bcc.n	800a800 <_strtoul_l.constprop.0+0xa4>
 800a7c8:	d101      	bne.n	800a7ce <_strtoul_l.constprop.0+0x72>
 800a7ca:	45a1      	cmp	r9, r4
 800a7cc:	db18      	blt.n	800a800 <_strtoul_l.constprop.0+0xa4>
 800a7ce:	fb00 4003 	mla	r0, r0, r3, r4
 800a7d2:	2701      	movs	r7, #1
 800a7d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d8:	e7e9      	b.n	800a7ae <_strtoul_l.constprop.0+0x52>
 800a7da:	2c2b      	cmp	r4, #43	; 0x2b
 800a7dc:	bf04      	itt	eq
 800a7de:	782c      	ldrbeq	r4, [r5, #0]
 800a7e0:	1c85      	addeq	r5, r0, #2
 800a7e2:	e7cc      	b.n	800a77e <_strtoul_l.constprop.0+0x22>
 800a7e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a7e8:	f1bc 0f19 	cmp.w	ip, #25
 800a7ec:	d801      	bhi.n	800a7f2 <_strtoul_l.constprop.0+0x96>
 800a7ee:	3c37      	subs	r4, #55	; 0x37
 800a7f0:	e7e3      	b.n	800a7ba <_strtoul_l.constprop.0+0x5e>
 800a7f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a7f6:	f1bc 0f19 	cmp.w	ip, #25
 800a7fa:	d804      	bhi.n	800a806 <_strtoul_l.constprop.0+0xaa>
 800a7fc:	3c57      	subs	r4, #87	; 0x57
 800a7fe:	e7dc      	b.n	800a7ba <_strtoul_l.constprop.0+0x5e>
 800a800:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a804:	e7e6      	b.n	800a7d4 <_strtoul_l.constprop.0+0x78>
 800a806:	1c7b      	adds	r3, r7, #1
 800a808:	d106      	bne.n	800a818 <_strtoul_l.constprop.0+0xbc>
 800a80a:	2322      	movs	r3, #34	; 0x22
 800a80c:	f8ce 3000 	str.w	r3, [lr]
 800a810:	4638      	mov	r0, r7
 800a812:	b932      	cbnz	r2, 800a822 <_strtoul_l.constprop.0+0xc6>
 800a814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a818:	b106      	cbz	r6, 800a81c <_strtoul_l.constprop.0+0xc0>
 800a81a:	4240      	negs	r0, r0
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	d0f9      	beq.n	800a814 <_strtoul_l.constprop.0+0xb8>
 800a820:	b107      	cbz	r7, 800a824 <_strtoul_l.constprop.0+0xc8>
 800a822:	1e69      	subs	r1, r5, #1
 800a824:	6011      	str	r1, [r2, #0]
 800a826:	e7f5      	b.n	800a814 <_strtoul_l.constprop.0+0xb8>
 800a828:	2430      	movs	r4, #48	; 0x30
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1b5      	bne.n	800a79a <_strtoul_l.constprop.0+0x3e>
 800a82e:	2308      	movs	r3, #8
 800a830:	e7b3      	b.n	800a79a <_strtoul_l.constprop.0+0x3e>
 800a832:	2c30      	cmp	r4, #48	; 0x30
 800a834:	d0a9      	beq.n	800a78a <_strtoul_l.constprop.0+0x2e>
 800a836:	230a      	movs	r3, #10
 800a838:	e7af      	b.n	800a79a <_strtoul_l.constprop.0+0x3e>
 800a83a:	bf00      	nop
 800a83c:	0800ab91 	.word	0x0800ab91

0800a840 <_strtoul_r>:
 800a840:	f7ff bf8c 	b.w	800a75c <_strtoul_l.constprop.0>

0800a844 <_malloc_usable_size_r>:
 800a844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a848:	1f18      	subs	r0, r3, #4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bfbc      	itt	lt
 800a84e:	580b      	ldrlt	r3, [r1, r0]
 800a850:	18c0      	addlt	r0, r0, r3
 800a852:	4770      	bx	lr

0800a854 <_init>:
 800a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a856:	bf00      	nop
 800a858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a85a:	bc08      	pop	{r3}
 800a85c:	469e      	mov	lr, r3
 800a85e:	4770      	bx	lr

0800a860 <_fini>:
 800a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a862:	bf00      	nop
 800a864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a866:	bc08      	pop	{r3}
 800a868:	469e      	mov	lr, r3
 800a86a:	4770      	bx	lr
